%package Tests.Jacc
%class Parser
%interface ParserTokens

%semantic String
%get lexer.getCurrentToken()
%next lexer.getNextToken()

%{
import Compiler.Lex.Lexer;
import java.io.*;
import Logic.MessageType;
import jsonAction;
import java.util.ArrayList;
%}

//Operadores y otros.
%token '+' '-' '*' '/' '(' ')' '[' ']' '<' '>' ';' '=' INTEGER FLOAT VAR IDENTIFIER INIC

//Colores permitidos
%token BLANCO AZUL MARRON CIAN GRIS AMARILLO NEGRO ROJO VERDE

//Procedimientos sin parámetros.
%token OCULTATORTUGA OT APARECETORTUGA AT RUMBO BAJALAPIZ BL SUBELAPIZ SB CENTRO BORRAPANTALLA

//Procedimientos con un parámetro.
%token AVANZA AV RETROCEDE RE GIRADERECHA GD GIRAIZQUIERDA GI PONRUMBO PONX PONY PONCOLORLAPIZ PONCL ESPERA REDONDEA COS AZAR MENOS RAIZCUADRADA RC SENO SEN

//Procedimientos con 2 parámetros.
%token PONXY IGUALES Y O MAYORQUE MENORQUE POTENCIA DIVISION RESTO

//Procedimientos con N parámetros.
%token DIFERENCIA PRODUCTO SUMA

//Procedimientos con paréntesis []
%token INC PONPOS EJECUTA ELEGIR CUENTA ULTIMO UL PRIMERO

//Procedimientos con un parámetro y paréntesis []
%token REPITE SI ELEMENTO

%left '+' '-'
%left '*' '/'

%%

//Símbolo inicial
prog
    : expression ';' prog ';'
    | expression
    ;

//Definición de expresión
expression
    : declaration_expr
    | redeclaration_expr
    | logic_expr
    | arithmetic_expr
    | procedure_val
    | procedure1_val
    | procedure2_val
    | procedureN_val
    | procedureP_val
    | procedure1P_val
    | procedure_noval
    | procedure1_noval
    | procedure2_noval
    | procedureP_noval
    | procedure1P_noval
    ;

//Lo que se evalúa a un número
number
    : INTEGER {$$=$1}
    | FLOAT {$$=$1}
    | IDENTIFIER {$$=$1}
    | arithmetic_expr
    | procedure_val
    | procedure1_val
    | procedure2_val
    | procedureN_val
    | procedureP_val
    | procedure1P_val
    ;

//Expresión para redeclarar una variable
redeclaration_expr
    : INIC IDENTIFIER '=' number
    ;

//Expresiones para declarar una variable
declaration_expr
    : VAR IDENTIFIER            { /* Almacenar identificador */ }
    | VAR IDENTIFIER '=' number { System.out.println("Identificador " + $2 + " creado."); }
    ;

//Expresiones con valor booleano
logic_expr
    : number '<' number {$$=$1<$3}
    | number '>' number {$$=$1>$3}
    | procedure2_bool
    ;

//Expresiones aritméticas con valor numérico
arithmetic_expr
    : number '+' number {$$=$1+$3}
    | number '-' number {$$=$1-$3}
    | number '*' number {$$=$1*$3}
    | number '/' number {$$=$1/$3}
    ;

//Colores permitidos
color
    : BLANCO
    | AZUL
    | MARRON
    | CIAN
    | GRIS
    | AMARILLO
    | NEGRO
    | ROJO
    | VERDE
    ;



//Procedimientos sin parámetros que devuelven un valor numérico
procedure_val
    : RUMBO
    ;

//Procedimientos sin parámetros ni valor de retorno
// TODO: Json de acciones
procedure_noval
    : OCULTATORTUGA
    | OT
    | APARECETORTUGA
    | AT
    | BAJALAPIZ
    | BL
    | SUBELAPIZ
    | SB
    | CENTRO
    | BORRAPANTALLA
    ;

//Procedimientos con un parámetro que devuelven un valor numérico
procedure1_val
    : REDONDEA     number {Math.rint($2)}
    | COS          number {$$ = Math.cos($2)}
    | AZAR         number {$$ = Random.doubles($2)}
    | MENOS        number {$$ = $2*-1}
    | RAIZCUADRADA number {$$ = Math.sqrt($2)}
    | RC           number {$$ = Math.sqrt($2)}
    | SENO         number {$$ = Math.sin($2)}
    | SEN          number {$$ = Math.sin($2)}
    ;

//Procedimientos con un parámetro que no tienen valor de retorno
procedure1_noval
    : AVANZA        number
    | AV            number
    | RETROCEDE     number
    | RE            number
    | GIRADERECHA   number
    | GD            number
    | GIRAIZQUIERDA number
    | GI            number
    | PONRUMBO      number
    | PONX          number
    | PONY          number
    | PONCOLORLAPIZ color
    | PONCL         color
    | ESPERA        number
    ;

//Procedimientos con 2 parámetros que devuelven un valor numérico
procedure2_val
    : POTENCIA number number {$$ = $1**$2}
    | DIVISION number number {$$ = $1/$2}
    | RESTO    number number {$$=$1%$2}
    ;

//Procedimientos con 2 parámetros que devuelven un valor booleano
procedure2_bool
    : IGUALES  number number {$$=$1==$2}
    | Y        number number {$$=($1 AND $2)}
    | O        number number {$$=($1 OR $2)}
    | MAYORQUE number number  {$$= $1 > $2}
    | MENORQUE number number  {$$= $1 < $2}
    ;

//Procedimientos con 2 parámetros que no tienen valor de retorno
procedure2_noval
    : PONXY number number
    ;

//Regla para N cantidad de parámetros
N_params
    : number N_params
    | number
    ;

//Procedimientos con N parámetros que devuelven un valor numérico
// TODO
procedureN_val
    : DIFERENCIA N_params
    | PRODUCTO N_params
    | SUMA N_params
    ;

//Regla para definir cualquier cantidad de órdenes
N_ordenes
    : expression N_ordenes
    | expression
    ;

//N cantidad de valores enteros
N_intvals
    : INTEGER N_intvals
    | INTEGER
    ;

//N cantidad de valores flotante
N_floatvals
    : FLOAT N_floatvals
    | FLOAT
    ;

//Procedimientos con paréntesis que devuelven un valor numérico
procedureP_val
    : ELEGIR '[' N_intvals ']' {$$=($3)}
    | ELEGIR '[' N_floatvals ']'{$$=($3)}
    | CUENTA '[' N_intvals ']'{$$=($3)}
    | CUENTA '[' N_floatvals ']'{$$=($3)}
    | ULTIMO '[' N_intvals ']'{$$=($3)}
    | UL '[' N_intvals ']'{$$=($3)}
    | ULTIMO '[' N_floatvals ']'{$$=($3)}
    | UL '[' N_floatvals ']'{$$=($3)}
    | PRIMERO '[' N_intvals ']'{$$=($3)}
    | PRIMERO '[' N_floatvals ']'{$$=($3)}
    ;


//Procedimientos con paréntesis que no tienen valor de retorno
procedureP_noval
    : INC '[' IDENTIFIER ']'
    | INC '[' IDENTIFIER number ']'
    | PONPOS '[' number number ']'
    | EJECUTA '[' N_ordenes ']' { /* Similar a un procedimiento anónimo */ }
    ;

procedure1P_val
    : ELEMENTO INTEGER '[' N_intvals ']'
    | ELEMENTO INTEGER '[' N_floatvals ']'
    | ELEMENTO IDENTIFIER '[' N_intvals ']'
    | ELEMENTO IDENTIFIER '[' N_floatvals ']'
    ;

procedure1P_noval
    : REPITE INTEGER '[' N_ordenes ']'
    | REPITE IDENTIFIER '[' N_ordenes ']'
    | SI logic_expr '[' N_ordenes ']'
    ;

%%

    public Lexer lexer;
	private ArrayList<jsonAction> acciones; // Aqui se guardan las acciones a ejecutar en la interfaz
// TODO: Guardar una version en texto plano de este array list en un documento


    public void yyerror(String msg) {
        int lastToken = lexer.getCurrentToken(); //Para verificar si se llegó al final de línea.
        if (lastToken == 0) {
            parseFinished();
            return;
        }

        System.out.println(msg);
        System.out.println("En " + lexer.getSemantic() + ", línea " + (lexer.line + 1) + ". columna " + (lexer.column + 1));
    }

    public Parser(String ruta) {
	    acciones = new ArrayList<jsonAction>();
        try {
            Reader reader = new BufferedReader(new FileReader(ruta));
            lexer = new Lexer(reader);
            lexer.getNextToken();
        } catch (IOException ex) {
            yyerror("Could not open file for parsing.");
        }
    }

    /**
     * Función para mostrar un mensaje del compilador en la interfaz.
     */
    public void showMessage(String msg, MessageType type) {
        //TODO: mostrar mensaje del tipo correspondiente en la interfaz.
    }

    public void parseFinished() {
        System.out.println("Compilación finalizada correctamente.");
        //TODO: notificar interfaz que finalizó la compilación.
    }

    public static void main(String[] args) {
        //TODO: recibir ruta desde args.
        String path = "/src/Compiler/NewLex/parse.txt";
        String ruta  = System.getProperty("user.dir").replaceAll("\\\\", "/") + path;
        Parser parser = new Parser(ruta);
        parser.parse();
    }