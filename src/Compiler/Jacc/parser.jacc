%package Compiler.Jacc
%class Parser
%interface ParserTokens
%get lexer.getCurrentToken()
%next lexer.getNextToken()

%{
import Compiler.Lex.Lexer;
import java.io.*;
import Logic.MessageType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Stack;
import com.fasterxml.jackson.databind.ObjectMapper;
import Compiler.Helpers.*;
import Logic.MessageHandler;

public
%}

%token <String> COLOR
//%token <String> BLANCO AZUL MARRON CIAN GRIS AMARILLO NEGRO ROJO VERDE

%token <String> OCULTATORTUGA APARECETORTUGA RUMBO BAJALAPIZ SUBELAPIZ CENTRO BORRAPANTALLA
//%token <String> OCULTATORTUGA OT APARECETORTUGA AT RUMBO BAJALAPIZ BL SUBELAPIZ SB CENTRO BORRAPANTALLA

%token <String> AVANZA RETROCEDE GIRADERECHA GIRAIZQUIERDA PONRUMBO PONX PONY PONCOLORLAPIZ ESPERA REDONDEA COS AZAR MENOS RAIZCUADRADA SEN
//%token <String> AVANZA AV RETROCEDE RE GIRADERECHA GD GIRAIZQUIERDA GI PONRUMBO PONX PONY PONCOLORLAPIZ PONCL ESPERA REDONDEA COS AZAR MENOS RAIZCUADRADA RC SENO SEN

%token <String> INC PONPOS EJECUTA ELEGIR CUENTA ULTIMO PRIMERO
//%token <String> INC PONPOS EJECUTA ELEGIR CUENTA ULTIMO UL PRIMERO

%token '+' '-' '*' '/' '(' ')' '[' ']' '<' '>' ';' '='
%token <Integer> INTEGER
%token <Float> FLOAT
%token <Boolean> BOOLEAN
%token <String> IDENTIFIER VAR INIC PARA FIN
%token <String> DIFERENCIA PRODUCTO SUMA REPITE SI ELEMENTO MOSTRAR VELOCIDAD PONXY IGUALES Y O MAYORQUE MENORQUE POTENCIA DIVISION RESTO


%left '+' '-'
%left '*' '/'

%type <String> integer_expr float_expr boolean_expr int_instr_argument float_instr_argument number_argument user_proc integer_expr2 float_expr2 boolean_expr2 
%type <String> int_proc1 int_proc2 float_proc1 float_proc2 instr_arg int_proc_n float_proc_n int_proc_p float_proc_p int_proc_1p float_proc_1p float_proc
//Expresiones
%type <String> expression declaration_expr redeclaration_expr proc proc1 proc2 proc_p proc_loop proc_cond user_proc_call

//Expresiones con valor de retorno
%type <String> val_proc1 val_proc2 val_proc_1p val_proc_n val_proc_p proc_exec

%%

program_end
    : program { parsingDone(); }
    ;

program
    : expression ';' program    { instructions.add($1); }
    | user_proc  ';' program
    | expression ';'            { instructions.add($1); }
    | user_proc  ';'
    ;

expression
    : declaration_expr
    | redeclaration_expr
    | proc
    | proc1
    | val_proc1
    | proc2
    | val_proc2
    | val_proc_n
    | proc_p
    | val_proc_p
    | val_proc_1p
    | proc_loop
    | proc_cond
    | user_proc_call
    | proc_exec
    ;

//Constante entera
integer_expr
    : integer_expr '+' integer_expr { $$ = numeric_expr($1, $3, "+"); }
    | integer_expr '-' integer_expr { $$ = numeric_expr($1, $3, "-"); }
    | integer_expr '*' integer_expr { $$ = numeric_expr($1, $3, "*"); System.out.println($$);}
    | integer_expr '/' integer_expr { $$ = numeric_expr($1, $3, "/"); System.out.println($$);}
    | '(' integer_expr ')'          { $$ = $2; }
    | IDENTIFIER                    { $$ = arguments.varArg($1); }
    | INTEGER                       { $$ = arguments.intArg($1); }
    ;

integer_expr2
    : integer_expr '+' integer_expr { $$ = numeric_expr($1, $3, "+"); }
    | integer_expr '-' integer_expr { $$ = numeric_expr($1, $3, "-"); }
    | integer_expr '*' integer_expr { $$ = numeric_expr($1, $3, "*"); }
    | integer_expr '/' integer_expr { $$ = numeric_expr($1, $3, "/"); }
    | '(' integer_expr ')'          { $$ = $2; }
    | INTEGER                       { $$ = arguments.intArg($1); }
    ;

//Constante flotante
float_expr
    : float_expr '+' float_expr { $$ = numeric_expr($1, $3, "+"); }
    | float_expr '-' float_expr { $$ = numeric_expr($1, $3, "-"); }
    | float_expr '*' float_expr { $$ = numeric_expr($1, $3, "*"); }
    | float_expr '/' float_expr { $$ = numeric_expr($1, $3, "/"); }
    | '(' float_expr ')'        { $$ = $2; }
    | IDENTIFIER                { $$ = arguments.varArg($1); }
    | integer_expr              { $$ = $1; }
    | FLOAT                     { $$ = arguments.floatArg($1); }
    ;

float_expr2
    : float_expr '+' float_expr { $$ = numeric_expr($1, $3, "+"); }
    | float_expr '-' float_expr { $$ = numeric_expr($1, $3, "-"); }
    | float_expr '*' float_expr { $$ = numeric_expr($1, $3, "*"); }
    | float_expr '/' float_expr { $$ = numeric_expr($1, $3, "/"); }
    | '(' float_expr ')'        { $$ = $2; }
    | FLOAT                     { $$ = arguments.floatArg($1); }
    ;


number_argument
    : integer_expr { $$ = $1; }
    | float_expr   { $$ = $1; }
    ;

//Constantes booleana
boolean_expr
    : number_argument '<' number_argument                   { $$ = instr("<", InstructionType.LOGIC, ReturnType.BOOLEAN, $1, $3); }
    | number_argument '>' number_argument                   { $$ = instr(">", InstructionType.LOGIC, ReturnType.BOOLEAN, $1, $3); }
    | '(' instr_arg ')' '<' '(' instr_arg ')'     { $$ = instr("<", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $6); }
    | '(' instr_arg ')' '>' '(' instr_arg ')'     { $$ = instr(">", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $6); }
    | instr_arg '<' instr_arg                     { $$ = instr("<", InstructionType.LOGIC, ReturnType.BOOLEAN, $1, $3); }
    | instr_arg '>' instr_arg                     { $$ = instr(">", InstructionType.LOGIC, ReturnType.BOOLEAN, $1, $3); }
    | IGUALES number_argument number_argument     { $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | IGUALES '(' instr_arg ')' '(' instr_arg ')' { $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | IGUALES number_argument '(' instr_arg ')'   { $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $4); }
    | IGUALES '(' instr_arg ')' number_argument   { $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $5); }
    | Y '(' boolean_expr ')' '(' boolean_expr ')'           { $$ = instr("y", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | O '(' boolean_expr ')' '(' boolean_expr ')'           { $$ = instr("o", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | MAYORQUE number_argument number_argument              { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MAYORQUE '(' instr_arg ')' '(' instr_arg ')'              { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | MAYORQUE number_argument '(' instr_arg ')'               { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $4); }
    | MAYORQUE '(' instr_arg ')' number_argument               { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $5); }
    | MENORQUE number_argument number_argument              { $$ = instr("menorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MENORQUE '(' instr_arg ')' '(' instr_arg ')'              { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | MENORQUE number_argument '(' instr_arg ')'               { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $4); }
    | MENORQUE '(' instr_arg ')' number_argument               { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $5); }
    | '(' boolean_expr ')'                                  { $$ = $2; }
    | IDENTIFIER                                            { $$ = arguments.varArg($1); }
    | BOOLEAN                                               { $$ = arguments.boolArg($1); }
    ;

boolean_expr2
    : number_argument '<' number_argument                   { $$ = instr("<", InstructionType.LOGIC, ReturnType.BOOLEAN, $1, $3); }
    | number_argument '>' number_argument                   { $$ = instr(">", InstructionType.LOGIC, ReturnType.BOOLEAN, $1, $3); }
    | '(' instr_arg ')' '<' '(' instr_arg ')'     { $$ = instr("<", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $6); }
    | '(' instr_arg ')' '>' '(' instr_arg ')'     { $$ = instr(">", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $6); }
    | number_argument '>' '(' instr_arg ')'     { $$ = instr(">", InstructionType.LOGIC, ReturnType.BOOLEAN, $1, $4); }
    | '(' instr_arg ')' '>' number_argument     { $$ = instr(">", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $5); }
    | number_argument '<' '(' instr_arg ')'     { $$ = instr(">", InstructionType.LOGIC, ReturnType.BOOLEAN, $1, $4); }
    | '(' instr_arg ')' '<' number_argument     { $$ = instr(">", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $5); }
    | instr_arg '<' instr_arg                     { $$ = instr("<", InstructionType.LOGIC, ReturnType.BOOLEAN, $1, $3); }
    | instr_arg '>' instr_arg                     { $$ = instr(">", InstructionType.LOGIC, ReturnType.BOOLEAN, $1, $3); }
    | IGUALES number_argument number_argument               { $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | IGUALES '(' instr_arg ')' '(' instr_arg ')' { $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | IGUALES number_argument '(' instr_arg ')' { $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $4); }
    | IGUALES '(' instr_arg ')' number_argument { $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $5); }
    | Y '(' boolean_expr ')' '(' boolean_expr ')'           { $$ = instr("y", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | O '(' boolean_expr ')' '(' boolean_expr ')'           { $$ = instr("o", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | MAYORQUE number_argument number_argument              { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MAYORQUE '(' instr_arg ')' '(' instr_arg ')'              { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | MAYORQUE '(' instr_arg ')' number_argument            { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $5); }
    | MAYORQUE number_argument '(' instr_arg ')'            { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $4); }
    | MENORQUE number_argument number_argument              { $$ = instr("menorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MENORQUE '(' instr_arg ')' '(' instr_arg ')'              { $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | MENORQUE '(' instr_arg ')' number_argument            { $$ = instr("menorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $5); }
    | MENORQUE number_argument '(' instr_arg ')'            { $$ = instr("menorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $4); }
    | '(' boolean_expr ')'                                  { $$ = $2; }
    | BOOLEAN                                               { $$ = arguments.boolArg($1); }
    ;

instr_arg
    : int_instr_argument    { $$ = arguments.instrArg($1); }
    | float_instr_argument  { $$ = arguments.instrArg($1); }
    ;

int_instr_argument
    : int_proc1
    | int_proc2
    | int_proc_n
    | int_proc_p
    | int_proc_1p
    ;

float_instr_argument
    : float_proc
    | float_proc1
    | float_proc2
    | float_proc_n
    | float_proc_p
    | float_proc_1p
    ;


//Expresiones
declaration_expr
    : VAR IDENTIFIER { $$ = instr("var", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2));}
    | VAR IDENTIFIER '=' integer_expr2 { $$ = instr("var", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4);}
    | VAR IDENTIFIER '=' float_expr2 { $$ = instr("var", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4);}
    | VAR IDENTIFIER '=' int_instr_argument { $$ = instr("var", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4);}
    | VAR IDENTIFIER '=' float_instr_argument { $$ = instr("var", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4);}
    | VAR IDENTIFIER '=' boolean_expr2    { $$ = instr("var", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4); }
    | VAR IDENTIFIER '=' IDENTIFIER { $$ = instr("var", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), arguments.varArg($4)); }
    ;

redeclaration_expr
    : INIC IDENTIFIER '=' integer_expr2 { $$ = instr("inic", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4); }
    | INIC IDENTIFIER '=' float_expr2 { $$ = instr("inic", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4); }
    | INIC IDENTIFIER '=' int_instr_argument { $$ = instr("inic", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4); }
    | INIC IDENTIFIER '=' float_instr_argument { $$ = instr("inic", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4); }
    | INIC IDENTIFIER '=' boolean_expr2 { $$ = instr("inic", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4); }
    | INIC IDENTIFIER '=' IDENTIFIER { $$ = instr("inic", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), arguments.varArg($4)); }
    ;

proc
    : float_proc
    | OCULTATORTUGA     { $$ = instr("ocultatortuga", InstructionType.NORMAL, ReturnType.VOID); }
    | APARECETORTUGA    { $$ = instr("aparecetortuga", InstructionType.NORMAL, ReturnType.VOID); }
    | BAJALAPIZ         { $$ = instr("bajalapiz", InstructionType.NORMAL, ReturnType.VOID); }
    | SUBELAPIZ         { $$ = instr("subelapiz", InstructionType.NORMAL, ReturnType.VOID); }
    | CENTRO            { $$ = instr("centro", InstructionType.NORMAL, ReturnType.VOID); }
    | BORRAPANTALLA     { $$ = instr("borrapantalla", InstructionType.NORMAL, ReturnType.VOID); }
    ;

float_proc
    : RUMBO { $$ = instr("print", InstructionType.NORMAL, ReturnType.FLOAT, arguments.varArg("rumbo")); }
    ;

proc1
    : AVANZA        number_argument         { $$ = instr("avanza", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | RETROCEDE     number_argument         { $$ = instr("retrocede", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | GIRADERECHA   number_argument         { $$ = instr("giraderecha", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | GIRAIZQUIERDA number_argument         { $$ = instr("giraizquierda", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | PONRUMBO      number_argument         { $$ = instr("ponrumbo", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | PONX          number_argument         { $$ = instr("ponx", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | PONY          number_argument         { $$ = instr("pony", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | PONCOLORLAPIZ COLOR                   { $$ = instr("poncl", InstructionType.NORMAL, ReturnType.VOID, arguments.stringArg($2)); }
    | ESPERA        number_argument         { $$ = instr("espera", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | ESPERA        '(' instr_arg ')'  { $$ = instr("espera", InstructionType.NORMAL, ReturnType.VOID, $3); }
    | AVANZA        '(' instr_arg ')'  { $$ = instr("avanza", InstructionType.NORMAL, ReturnType.VOID, $3); }
    | RETROCEDE     '(' instr_arg ')'  { $$ = instr("retrocede", InstructionType.NORMAL, ReturnType.VOID, $3); }
    | GIRADERECHA   '(' instr_arg ')'  { $$ = instr("giraderecha", InstructionType.NORMAL, ReturnType.VOID, $3); }
    | GIRAIZQUIERDA '(' instr_arg ')'  { $$ = instr("giraizquierda", InstructionType.NORMAL, ReturnType.VOID, $3); }
    | PONRUMBO      '(' instr_arg ')'  { $$ = instr("ponrumbo", InstructionType.NORMAL, ReturnType.VOID, $3); }
    | PONX          '(' instr_arg ')'  { $$ = instr("ponx", InstructionType.NORMAL, ReturnType.VOID, $3); }
    | PONY          '(' instr_arg ')'  { $$ = instr("pony", InstructionType.NORMAL, ReturnType.VOID, $3); }
    | MOSTRAR       number_argument     { $$ = instr("mostrar", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | MOSTRAR       boolean_expr        { $$ = instr("mostrar", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | MOSTRAR       '(' instr_arg ')'   { $$ = instr("mostrar", InstructionType.NORMAL, ReturnType.VOID, $3); }
    | VELOCIDAD     integer_expr        { $$ = instr("velocidad", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | VELOCIDAD     '(' int_instr_argument ')' { $$ = instr("velocidad", InstructionType.NORMAL, ReturnType.VOID, $3); }
    ;

val_proc1
    : int_proc1
    | float_proc1
    ;

int_proc1
    : REDONDEA float_expr           { $$ = instr("redondea", InstructionType.NORMAL, ReturnType.INTEGER, $2); }
    | AZAR     integer_expr { $$ = instr("azar", InstructionType.NORMAL, ReturnType.INTEGER, $2); }
    | MENOS    integer_expr { $$ = instr("menos", InstructionType.NORMAL, ReturnType.INTEGER, $2); }
    | REDONDEA '(' instr_arg ')'    { $$ = instr("redondea", InstructionType.NORMAL, ReturnType.INTEGER, $3); }
    | AZAR     '(' int_instr_argument ')' { $$ = instr("azar", InstructionType.NORMAL, ReturnType.INTEGER, $3); }
    | MENOS    '(' int_instr_argument ')' { $$ = instr("menos", InstructionType.NORMAL, ReturnType.INTEGER, $3); }
    ;

float_proc1
    : AZAR          float_expr              { $$ = instr("azar", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    | MENOS         float_expr              { $$ = instr("menos", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    | COS           number_argument         { $$ = instr("cos", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    | RAIZCUADRADA  number_argument         { $$ = instr("raiz", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    | SEN           number_argument         { $$ = instr("seno", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    | AZAR          '(' float_instr_argument ')' { $$ = instr("azar", InstructionType.NORMAL, ReturnType.FLOAT, $3); }
    | MENOS         '(' float_instr_argument ')' { $$ = instr("menos", InstructionType.NORMAL, ReturnType.FLOAT, $3); }
    | COS           '(' instr_arg ')'  { $$ = instr("cos", InstructionType.NORMAL, ReturnType.FLOAT, $3); }
    | RAIZCUADRADA  '(' instr_arg ')'  { $$ = instr("raiz", InstructionType.NORMAL, ReturnType.FLOAT, $3); }
    | SEN           '(' instr_arg ')'  { $$ = instr("seno", InstructionType.NORMAL, ReturnType.FLOAT, $3); }
    ;

proc2
    : PONXY integer_expr integer_expr { $$ = instr("ponxy", InstructionType.NORMAL, ReturnType.VOID, $2, $3); }
    | PONXY integer_expr '(' int_instr_argument ')' { $$ = instr("ponxy", InstructionType.NORMAL, ReturnType.VOID, $2, $4); }
    | PONXY '(' int_instr_argument ')' integer_expr { $$ = instr("ponxy", InstructionType.NORMAL, ReturnType.VOID, $3, $5); }
    | PONXY '(' int_instr_argument ')' '(' int_instr_argument ')' { $$ = instr("ponxy", InstructionType.NORMAL, ReturnType.VOID, $3, $6); }
    ;

val_proc2
    : int_proc2
    | float_proc2
    ;

int_proc2
    : POTENCIA  integer_expr integer_expr { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.INTEGER, $2, $3); }
    | POTENCIA  '(' int_instr_argument ')' integer_expr { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.INTEGER, $3, $5); }
    | POTENCIA  integer_expr '(' int_instr_argument ')' { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.INTEGER, $2, $4); }
    | POTENCIA  '(' int_instr_argument ')' '(' int_instr_argument ')' { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.INTEGER, $3, $6); }
    | RESTO     number_argument number_argument { $$ = instr("resto", InstructionType.NORMAL, ReturnType.INTEGER, $2, $3); }
    | RESTO  '(' instr_arg ')' '(' instr_arg ')' { $$ = instr("resto", InstructionType.NORMAL, ReturnType.INTEGER, $3, $6); }
    ;
float_proc2
    : POTENCIA  float_expr float_expr   { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.FLOAT, $2, $3); }
    | POTENCIA  integer_expr float_expr { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.FLOAT, $2, $3); }
    | POTENCIA  float_expr integer_expr { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.FLOAT, $2, $3); }
    | POTENCIA  '(' float_instr_argument ')' integer_expr { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.FLOAT, $3, $5); }
    | POTENCIA  '(' float_instr_argument ')' float_expr { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.FLOAT, $3, $5); }
    | POTENCIA  integer_expr '(' float_instr_argument ')' { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.FLOAT, $2, $4); }
    | POTENCIA  float_expr '(' float_instr_argument ')' { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.FLOAT, $2, $4); }
    | POTENCIA '(' float_instr_argument ')' '(' float_instr_argument ')' { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.FLOAT, $3, $6); }
    | DIVISION  number_argument number_argument { $$ = instr("division", InstructionType.NORMAL, ReturnType.FLOAT, $2, $3); }
    | DIVISION '(' instr_arg ')' number_argument { $$ = instr("division", InstructionType.NORMAL, ReturnType.FLOAT, $3, $5); }
    | DIVISION number_argument '(' instr_arg ')' { $$ = instr("division", InstructionType.NORMAL, ReturnType.FLOAT, $2, $4); }
    | DIVISION '(' instr_arg ')' '(' instr_arg ')' { $$ = instr("division", InstructionType.NORMAL, ReturnType.FLOAT, $3, $6); }
    ;


n_int_args
    : integer_expr n_int_args { paramsList.add(0, $1); }
    | integer_expr            { paramsList.add(0, $1); }
    ;

n_float_args
    : float_expr n_float_args { paramsList.add(0, $1); }
    | float_expr              { paramsList.add(0, $1); }
    ;

n_instr
    : expression ';' n_instr { instrList.add(0, $1); }
    | expression ';'         { instrList.add(0, $1); }
    ;

val_proc_n
    : int_proc_n
    | float_proc_n
    ;

int_proc_n
    : DIFERENCIA n_int_args      { $$ = instr("diferencia", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | PRODUCTO   n_int_args      { $$ = instr("producto", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | SUMA       n_int_args      { $$ = instr("suma", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    ;
float_proc_n
    : DIFERENCIA n_float_args    { $$ = instr("diferencia", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | PRODUCTO   n_float_args    { $$ = instr("producto", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | SUMA       n_float_args    { $$ = instr("suma", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    ;

proc_p
    : INC '[' IDENTIFIER ']' { $$ = instr("inc", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($3), arguments.intArg(1)); }
    | INC '[' IDENTIFIER integer_expr ']' { $$ = instr("inc", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($3), $4); }
    | INC '[' IDENTIFIER integer_expr ']' { $$ = instr("inc", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($3), $4); }
    | PONPOS '[' integer_expr integer_expr ']' { $$ = instr("ponpos", InstructionType.NORMAL, ReturnType.VOID, $3, $4); }
    ;

val_proc_p
    : int_proc_p
    | float_proc_p
    ;
int_proc_p
    : ELEGIR '[' n_int_args ']'         { $$ = instr("elegir", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | ULTIMO '[' n_int_args ']'         { $$ = instr("ultimo", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | PRIMERO '[' n_int_args ']'        { $$ = instr("primero", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    ;
float_proc_p
    : ELEGIR '[' n_float_args ']'       { $$ = instr("elegir", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | ULTIMO '[' n_float_args ']'       { $$ = instr("ultimo", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | PRIMERO '[' n_float_args ']'      { $$ = instr("primero", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    ;

val_proc_1p
    : int_proc_1p
    | float_proc_1p
    ;

int_proc_1p
    : ELEMENTO integer_expr '[' n_int_args ']'   {
        var args = new ArrayList<String>();
        args.add($2);
        $$ = instr("elemento", InstructionType.NORMAL, ReturnType.INTEGER, args, paramsList); paramsList.clear(); }
    ;
float_proc_1p
    : ELEMENTO integer_expr '[' n_float_args ']' {
        var args = new ArrayList<String>();
        args.add($2);
        $$ = instr("elemento", InstructionType.NORMAL, ReturnType.FLOAT, args, paramsList); paramsList.clear(); }
    ;

exec_instr
    : expression ';' exec_instr { instrList.add(0, $1); }
    | expression ';'            { instrList.add(0, $1); }
    ;

proc_exec
    : EJECUTA '[' exec_instr ']' { $$ = instr("ejecuta", InstructionType.NORMAL, ReturnType.VOID, null, instrList); instrList.clear(); }
    ;

proc_loop
    : REPITE integer_expr '[' n_instr ']' {
        paramsList.add(0, $2);
        //instrList = reverse(instrList);
        $$ = instr("repite", InstructionType.CYCLE, ReturnType.VOID, paramsList, instrList);
        paramsList.clear();
        instrList.clear();
    }
    ;

proc_cond
    : SI boolean_expr '[' n_instr ']' {
        paramsList.add(0, $2);
        //instrList = reverse(instrList);
        $$ = instr("si", InstructionType.CONDITION, ReturnType.VOID, paramsList, instrList);
        paramsList.clear();
        instrList.clear();
    }
    ;

n_params
    : IDENTIFIER n_params   { procArgs.add(0, $1); }
    | IDENTIFIER            { procArgs.add(0, $1); }
    ;

//Procedimientos del usuario
user_proc
    : PARA IDENTIFIER n_params n_instr FIN    {
        //instrList = reverse(instrList);
        procedures.add($2, procArgs, instrList);
        //paramsList.clear();
        instrList.clear();
        procArgs.clear();
    }
    | PARA IDENTIFIER n_instr FIN           {
        //instrList = reverse(instrList);
        procedures.add($2, instrList);
        instrList.clear();
    }
    ;

n_args
    : integer_expr n_args   { paramsList.add(0, $1); }
    | float_expr n_args     { paramsList.add(0, $1); }
    | integer_expr          { paramsList.add(0, $1); }
    | float_expr            { paramsList.add(0, $1); }
    ;

user_proc_call
    : IDENTIFIER n_args { $$ = instr($1, InstructionType.PROCEDURE, ReturnType.VOID, paramsList); paramsList.clear(); }
    | IDENTIFIER        { $$ = instr($1, InstructionType.PROCEDURE, ReturnType.VOID); }
    ;

%%

    private Lexer lexer;
    private VariableHandler variables; //Manejador de variables
    private ProcedureHandler procedures; //Manejador de procedimientos
    private InstructionHandler instructions;
    private ArgumentHandler arguments;
    private ArrayList<String> procArgs;

    //Estructuras temporales
    private ArrayList<String> paramsList; //Para almacenar parámetros de un procedimiento
    private ArrayList<String> instrList; // Para almacenar instrucciones de un procedimiento
    
    private MessageHandler msgHandler; //Para mostrar mensajes de compilación

    public void d(String msg) {
        System.out.println(msg);
        msgHandler.add(msg, MessageType.INFO);
    }

    public String numeric_expr(String arg1, String arg2, String operation) {
        if (isInstruction(arg1)) {
            arg1 = arguments.instrArg(arg1);
        }
        if (isInstruction(arg2)) {
            arg1 = arguments.instrArg(arg1);
        }
        
        ArgType type1 = arguments.getArgType(arg1);
        ArgType type2 = arguments.getArgType(arg2);

        if (isNumeric(type1) && isNumeric(type2)) { //Simplificar
            if (type1 == ArgType.FLOAT_CONSTANT || type2 == ArgType.FLOAT_CONSTANT) { //Valor flontante
                Float fval1 = arguments.getFloatArg(arg1);
                Float fval2 = arguments.getFloatArg(arg2);
                Float fresult = null;
                switch (operation) {
                    case "+" -> fresult = (fval1 + fval2);
                    case "-" -> fresult = (fval1 - fval2);
                    case "*" -> fresult = (fval1 * fval2);
                    case "/" -> fresult = (fval1 / fval2);
                }
                return arguments.floatArg(fresult);

            } else { //Valor entero
                Integer val1 = arguments.getIntArg(arg1);
                Integer val2 = arguments.getIntArg(arg2); 
                Integer result = null;

                switch (operation) {
                    case "+" -> result = (val1 + val2);
                    case "-" -> result = (val1 - val2);
                    case "*" -> result = (val1 * val2);
                    case "/" -> result = (val1 / val2);
                }
                return arguments.intArg(result);

            }
        } else { //Convertir a expresión
            if (type1 == ArgType.FLOAT_CONSTANT || type2 == ArgType.FLOAT_CONSTANT) {
                return instr(operation, InstructionType.OPERATION, ReturnType.FLOAT, arg1, arg2);
            } else {
                return instr(operation, InstructionType.OPERATION, ReturnType.INTEGER, arg1, arg2);
            }
        }
    }

    public boolean isInstruction(String arg) {
        try {
            InstructionType type = instructions.getType(arg);
            return true;
        } catch (IllegalArgumentException ex) {
            return false;
        }
    }

    public boolean isNumeric(ArgType type) {
        return (type == ArgType.INT_CONSTANT || type == ArgType.FLOAT_CONSTANT);
    }

    public String instr(String name, InstructionType type, ReturnType returnType, String... args) {
      //  return instructions.create(name, type, returnType, new ArrayList<>(Arrays.asList(args)));
        return instr(name, type, returnType, new ArrayList<String>(Arrays.asList(args)), null);
    }

    public String instr(String name, InstructionType type, ReturnType returnType, ArrayList<String> args) {
        //return instructions.create(name, type, returnType, args);
        return instr(name, type, returnType, args, null);
    }

    public String instr(String name, InstructionType type, ReturnType returnType, ArrayList<String> args, ArrayList<String> body) {
        return instructions.create(name, type, returnType, args, body, lexer.getLine()+1);
    }

    public ArrayList<String> reverse(ArrayList<String> _instr) {

            Stack<String> s = new Stack<>();  //create a stack

            //while the queue is not empty
            while(!_instr.isEmpty())
            {  //add the elements of the queue onto a stack
                s.push(_instr.get(0));
                _instr.remove(0);
            }

            //while the stack is not empty
            while(!s.isEmpty())
            { //add the elements in the stack back to the queue
                _instr.add(s.pop());
            }
            return _instr;
        }

    public void yyerror(String msg) {
        if (lexer.isLexerError()) {
            System.err.println(lexer.getErrorMessage());
            msgHandler.add(lexer.getErrorMessage(), MessageType.ERROR);
            return;
        }

        System.err.println(msg);
        msgHandler.add(msg, MessageType.ERROR);

        String onLine = "En " + lexer.getSemantic() + ", línea " + (lexer.getLine() + 1) + ". columna " + (lexer.getColumn() + 1);
        System.out.println(onLine);
        msgHandler.add(onLine, MessageType.ERROR);
    }

    public Parser(String ruta) {
        variables = new VariableHandler();
        procedures = new ProcedureHandler();
        instructions = new InstructionHandler();
        arguments = new ArgumentHandler();

        paramsList = new ArrayList<>();
        instrList = new ArrayList<>();
        procArgs = new ArrayList<>();
        msgHandler = MessageHandler.getInstance();

        try {
            Reader reader = new BufferedReader(new FileReader(ruta));
            lexer = new Lexer(reader);
            lexer.getNextToken();

        } catch (IOException ex) {
            yyerror("No se pudo abrir el archivo especificado");
            msgHandler.add("No se pudo abrir el archivo especificado", MessageType.ERROR);
        }
    }

    /**
     * Función para mostrar un mensaje del compilador en la interfaz.
     */
    public void showMessage(String msg, MessageType type) {
        //TODO: mostrar mensaje del tipo correspondiente en la interfaz.
    }

    public String getRutaCompilado(String filePath) {

        String rutaCompilado = filePath.substring(0, filePath.lastIndexOf(".") + 1) + "cld";
        System.out.println(rutaCompilado);

        ObjectMapper mapper = new ObjectMapper();
        //instructions.reverse();
        CompiledFile cFile = new CompiledFile(instructions, procedures);

        try {
            File file = new File(rutaCompilado);
            file.createNewFile();

            String compilado = mapper.writeValueAsString(cFile);
            System.out.println("File compiled created: " + file.getName());
            msgHandler.add("File compiled created: " + file.getName(), MessageType.INFO);
            FileWriter writer = new FileWriter(rutaCompilado);
            writer.write(compilado);
            writer.close();
            return rutaCompilado;

        } catch (IOException ex) {
            System.out.println("Occurió un error al compilar...");
            msgHandler.add("Occurió un error al compilar...", MessageType.ERROR);
        }

        return null;
    }

    public static String compile(String filePath) {
        String ruta = filePath.replaceAll("\\\\", "/");
        Parser parser = new Parser(ruta);
        parser.parse();
        String rutaCompilado = parser.getRutaCompilado(filePath);

        return rutaCompilado;
    }

    public void parsingDone() {
        System.out.println("Compilación finalizada");
        msgHandler.add("Compilación finalizada con éxito.", MessageType.INFO);

        //TODO: notificar que se finalizó la compilación
        variables.printVars();
        procedures.printProcedures();
        instructions.print();
    }

    public static void main(String[] args) {
        String path = "/src/Compiler/Lex/parse.txt";
        String ruta  = System.getProperty("user.dir").replaceAll("\\\\", "/") + path;
        //Parser parser = new Parser(ruta);
        //parser.parse();
        System.out.println(compile(System.getProperty("user.dir") + path));
    }
