/* The following code was generated by JFlex 1.4.3 on 5/8/20 12:18 */

package Compiler.Lex;

import Compiler.Jacc.ParserTokens;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/8/20 12:18 from the specification file
 * <tt>C:/Users/Marlo/IdeaProjects/Logorduin/src/Compiler/Lex/flexer.jflex</tt>
 */
public class Lexer implements ParserTokens {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\5\0\1\12"+
    "\1\0\1\15\1\15\1\15\1\15\1\0\1\10\1\14\1\4\1\13"+
    "\11\6\1\0\1\15\1\15\1\15\1\15\1\45\1\12\32\7\1\15"+
    "\1\0\1\15\1\11\1\12\1\0\1\17\1\34\1\23\1\40\1\32"+
    "\1\46\1\30\1\41\1\21\1\35\1\5\1\26\1\33\1\22\1\24"+
    "\1\31\1\42\1\20\1\37\1\27\1\25\1\16\1\5\1\43\1\44"+
    "\1\36\1\0\1\12\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\3"+
    "\2\6\1\5\1\3\6\4\1\7\11\4\1\10\1\4"+
    "\1\2\2\11\1\6\1\12\1\5\1\12\1\0\2\13"+
    "\2\14\1\12\2\11\1\15\1\16\4\11\1\17\2\11"+
    "\1\20\10\11\1\21\1\22\2\11\1\23\1\24\12\11"+
    "\1\25\1\26\2\11\1\27\5\11\1\6\2\12\1\5"+
    "\1\30\2\13\2\14\1\12\1\31\16\11\1\32\3\11"+
    "\1\33\27\11\1\34\3\11\1\35\2\11\1\6\2\12"+
    "\1\5\2\13\2\14\1\12\4\11\1\36\1\37\6\11"+
    "\1\40\6\11\1\41\1\11\1\42\5\11\1\43\1\44"+
    "\13\11\1\45\1\11\1\34\5\11\1\6\2\12\1\5"+
    "\2\13\2\14\1\12\1\37\4\11\1\46\2\11\1\47"+
    "\14\11\1\50\1\11\1\51\10\11\1\52\6\11\1\41"+
    "\2\11\1\6\2\12\1\5\2\13\2\14\1\12\1\15"+
    "\4\11\1\53\2\11\1\54\1\55\1\11\1\22\6\11"+
    "\1\56\1\11\1\57\2\11\1\60\1\37\11\11\1\6"+
    "\2\12\1\5\2\13\2\14\1\12\11\11\1\61\5\11"+
    "\1\62\11\11\1\6\2\12\1\5\2\13\2\14\1\12"+
    "\1\11\1\37\2\11\1\63\1\64\3\11\1\65\1\66"+
    "\1\11\1\67\1\70\5\11\1\71\3\11\1\6\2\12"+
    "\1\5\2\13\2\14\1\12\2\11\1\20\4\11\1\72"+
    "\1\73\1\25\1\11\1\27\2\11\1\6\1\12\1\5"+
    "\1\13\1\14\1\12\7\11\1\74\1\4\1\0\4\4"+
    "\1\24\3\4\1\17\5\4\1\21\1\23\1\50\1\75"+
    "\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\47\0\165\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\47\0\u01ad\0\u01d4\0\u01fb"+
    "\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333"+
    "\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\234\0\u041d\0\u0444"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c"+
    "\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u046b"+
    "\0\u06b4\0\u06db\0\u0702\0\u0729\0\u046b\0\u0750\0\u0777\0\u079e"+
    "\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6"+
    "\0\u046b\0\u08fd\0\u0924\0\u094b\0\u0972\0\u046b\0\u0999\0\u09c0"+
    "\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8"+
    "\0\u0b1f\0\u046b\0\u0b46\0\u0b6d\0\u046b\0\u0b94\0\u0bbb\0\u0be2"+
    "\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0555\0\u0cf3"+
    "\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0c09\0\u0db6\0\u0ddd\0\u0e04"+
    "\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c"+
    "\0\u0f63\0\u0f8a\0\u0fb1\0\u0c09\0\u0fd8\0\u0fff\0\u1026\0\u0c09"+
    "\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137\0\u115e"+
    "\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248\0\u126f\0\u1296"+
    "\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380\0\u13a7\0\u13ce"+
    "\0\u13f5\0\u141c\0\u1443\0\u0c09\0\u146a\0\u1491\0\u14b8\0\u14df"+
    "\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617"+
    "\0\u163e\0\u1665\0\u168c\0\u146a\0\u146a\0\u16b3\0\u16da\0\u1701"+
    "\0\u1728\0\u174f\0\u1776\0\u146a\0\u179d\0\u17c4\0\u17eb\0\u1812"+
    "\0\u1839\0\u1860\0\u146a\0\u1887\0\u146a\0\u18ae\0\u18d5\0\u18fc"+
    "\0\u1923\0\u194a\0\u1971\0\u146a\0\u1998\0\u19bf\0\u19e6\0\u1a0d"+
    "\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u146a"+
    "\0\u1b45\0\u146a\0\u1b6c\0\u1b93\0\u1bba\0\u1be1\0\u1c08\0\u1c2f"+
    "\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40\0\u1d67"+
    "\0\u1be1\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03\0\u1be1\0\u1e2a\0\u1e51"+
    "\0\u1be1\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b\0\u1f62"+
    "\0\u1f89\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u1be1\0\u204c\0\u1be1"+
    "\0\u2073\0\u209a\0\u20c1\0\u20e8\0\u210f\0\u2136\0\u215d\0\u2184"+
    "\0\u1be1\0\u21ab\0\u21d2\0\u21f9\0\u2220\0\u2247\0\u226e\0\u1be1"+
    "\0\u2295\0\u22bc\0\u22e3\0\u230a\0\u2331\0\u2358\0\u237f\0\u23a6"+
    "\0\u23cd\0\u23f4\0\u241b\0\u2295\0\u2442\0\u2469\0\u2490\0\u24b7"+
    "\0\u2295\0\u24de\0\u2505\0\u2295\0\u2295\0\u252c\0\u2295\0\u2553"+
    "\0\u257a\0\u25a1\0\u25c8\0\u25ef\0\u2616\0\u2295\0\u263d\0\u2295"+
    "\0\u2664\0\u268b\0\u2295\0\u2295\0\u26b2\0\u26d9\0\u2700\0\u2727"+
    "\0\u274e\0\u2775\0\u279c\0\u27c3\0\u27ea\0\u2811\0\u2838\0\u285f"+
    "\0\u2886\0\u28ad\0\u28d4\0\u28fb\0\u2922\0\u2949\0\u2970\0\u2997"+
    "\0\u29be\0\u29e5\0\u2a0c\0\u2a33\0\u2a5a\0\u2a81\0\u2aa8\0\u27c3"+
    "\0\u2acf\0\u2af6\0\u2b1d\0\u2b44\0\u2b6b\0\u27c3\0\u2b92\0\u2bb9"+
    "\0\u2be0\0\u2c07\0\u2c2e\0\u2c55\0\u2c7c\0\u2ca3\0\u2cca\0\u2cf1"+
    "\0\u2d18\0\u2d3f\0\u2d66\0\u2d8d\0\u2db4\0\u2ddb\0\u2e02\0\u2e29"+
    "\0\u2e50\0\u2ca3\0\u2e77\0\u2e9e\0\u2ca3\0\47\0\u2ec5\0\u2eec"+
    "\0\u2f13\0\u2ca3\0\u2ca3\0\u2f3a\0\u2ca3\0\u2ca3\0\u2f61\0\u2f88"+
    "\0\u2faf\0\u2fd6\0\u2ffd\0\u2ca3\0\u3024\0\u304b\0\u3072\0\u3099"+
    "\0\u30c0\0\u30e7\0\u310e\0\u3135\0\u315c\0\u3183\0\u31aa\0\u31d1"+
    "\0\u31f8\0\u321f\0\u304b\0\u3246\0\u326d\0\u3294\0\u32bb\0\47"+
    "\0\47\0\u304b\0\u32e2\0\u304b\0\u3309\0\u3330\0\47\0\47"+
    "\0\u3357\0\47\0\47\0\u337e\0\u33a5\0\u33cc\0\u33f3\0\u341a"+
    "\0\u3441\0\u3468\0\u348f\0\u3330\0\u3330\0\u337e\0\u34b6\0\u34dd"+
    "\0\u3504\0\u352b\0\u3330\0\u3552\0\u3579\0\u35a0\0\u3330\0\u35c7"+
    "\0\u35ee\0\u3615\0\u363c\0\u3663\0\u3330\0\u3330\0\u3330\0\u3330"+
    "\0\u3330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\2\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\6\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\2\6\1\34\1\35\3\6"+
    "\1\36\1\2\1\37\51\0\1\4\50\0\1\40\47\0"+
    "\3\41\1\42\1\43\2\41\2\0\27\41\1\0\1\41"+
    "\5\0\1\44\1\45\1\44\1\46\1\43\1\44\1\45"+
    "\1\47\1\0\27\44\1\0\1\44\5\0\3\50\1\51"+
    "\1\43\2\50\2\0\27\50\1\0\1\50\5\0\4\52"+
    "\1\0\2\52\2\0\27\52\1\0\1\52\5\0\3\43"+
    "\1\0\3\43\2\0\27\43\1\0\1\43\5\0\3\53"+
    "\1\52\1\43\2\53\2\0\27\53\1\0\1\53\5\0"+
    "\1\44\1\54\1\44\1\46\1\43\1\44\1\54\1\47"+
    "\1\0\27\44\1\0\1\44\5\0\3\41\1\42\1\43"+
    "\2\41\2\0\1\41\1\55\12\41\1\56\12\41\1\0"+
    "\1\41\5\0\3\41\1\42\1\43\2\41\2\0\1\57"+
    "\10\41\1\60\1\41\1\61\1\41\1\62\2\41\1\63"+
    "\6\41\1\0\1\41\5\0\3\41\1\42\1\43\2\41"+
    "\2\0\1\41\1\64\3\41\1\65\1\66\1\67\4\41"+
    "\1\70\12\41\1\0\1\41\5\0\3\41\1\42\1\43"+
    "\2\41\2\0\4\41\1\71\5\41\1\72\14\41\1\0"+
    "\1\41\5\0\3\41\1\42\1\43\2\41\2\0\14\41"+
    "\1\73\12\41\1\0\1\41\5\0\3\41\1\42\1\43"+
    "\2\41\2\0\3\41\1\74\2\41\1\75\1\76\4\41"+
    "\1\77\12\41\1\0\1\41\5\0\3\41\1\42\1\43"+
    "\2\41\2\0\5\41\1\100\3\41\1\101\15\41\1\0"+
    "\1\41\5\0\3\41\1\42\1\43\2\41\2\0\10\41"+
    "\1\102\16\41\1\0\1\41\5\0\3\41\1\42\1\43"+
    "\2\41\2\0\2\41\1\103\24\41\1\0\1\41\5\0"+
    "\3\41\1\42\1\43\2\41\2\0\2\41\1\104\1\105"+
    "\16\41\1\106\4\41\1\0\1\41\5\0\3\41\1\42"+
    "\1\43\2\41\2\0\1\41\1\107\1\110\3\41\1\111"+
    "\20\41\1\0\1\41\5\0\3\41\1\42\1\43\2\41"+
    "\2\0\10\41\1\112\6\41\1\113\1\41\1\114\5\41"+
    "\1\0\1\41\5\0\3\41\1\42\1\43\2\41\2\0"+
    "\1\41\1\115\12\41\1\116\12\41\1\0\1\41\5\0"+
    "\3\41\1\42\1\43\2\41\2\0\1\41\1\117\4\41"+
    "\1\120\1\41\1\121\16\41\1\0\1\41\5\0\3\41"+
    "\1\42\1\43\2\41\2\0\3\41\1\122\3\41\1\123"+
    "\4\41\1\124\1\41\1\125\10\41\1\0\1\41\5\0"+
    "\3\41\1\42\1\43\2\41\2\0\3\41\1\126\23\41"+
    "\1\0\1\41\5\0\3\41\1\42\1\43\2\41\2\0"+
    "\1\41\1\127\1\41\1\130\23\41\1\0\1\41\1\40"+
    "\1\3\1\4\44\40\5\0\3\131\1\132\1\133\2\131"+
    "\2\0\27\131\1\0\1\131\5\0\4\132\1\0\2\132"+
    "\2\0\27\132\1\0\1\132\5\0\3\133\1\0\3\133"+
    "\2\0\27\133\1\0\1\133\5\0\3\134\1\135\1\133"+
    "\2\134\2\0\27\134\1\0\1\134\5\0\1\134\1\136"+
    "\1\134\1\135\1\133\1\134\1\136\1\47\1\0\27\134"+
    "\1\0\1\134\5\0\4\135\1\0\2\135\2\0\27\135"+
    "\1\0\1\135\6\0\1\137\4\0\1\137\40\0\3\140"+
    "\1\141\1\133\2\140\2\0\27\140\1\0\1\140\5\0"+
    "\4\141\1\0\2\141\2\0\27\141\1\0\1\141\5\0"+
    "\4\142\1\0\2\142\2\0\27\142\1\0\1\142\5\0"+
    "\3\143\1\142\1\133\2\143\2\0\27\143\1\0\1\143"+
    "\5\0\1\134\1\144\1\134\1\135\1\133\1\134\1\144"+
    "\1\47\1\0\27\134\1\0\1\134\5\0\3\131\1\132"+
    "\1\133\2\131\2\0\2\131\1\145\24\131\1\0\1\131"+
    "\5\0\3\131\1\132\1\133\2\131\2\0\2\131\1\146"+
    "\24\131\1\0\1\131\5\0\3\131\1\132\1\133\2\131"+
    "\2\0\1\131\1\147\25\131\1\0\1\131\5\0\3\131"+
    "\1\132\1\133\2\131\2\0\1\131\1\150\25\131\1\0"+
    "\1\131\5\0\3\131\1\132\1\133\2\131\2\0\1\131"+
    "\1\151\25\131\1\0\1\131\5\0\3\131\1\132\1\133"+
    "\2\131\2\0\1\131\1\152\5\131\1\153\17\131\1\0"+
    "\1\131\5\0\3\131\1\132\1\133\2\131\2\0\3\131"+
    "\1\154\23\131\1\0\1\131\5\0\3\131\1\132\1\133"+
    "\2\131\2\0\17\131\1\155\7\131\1\0\1\131\5\0"+
    "\3\131\1\132\1\133\2\131\2\0\15\131\1\156\11\131"+
    "\1\0\1\131\5\0\3\131\1\132\1\133\2\131\2\0"+
    "\11\131\1\157\1\131\1\160\5\131\1\161\1\162\4\131"+
    "\1\0\1\131\5\0\3\131\1\132\1\133\2\131\2\0"+
    "\3\131\1\163\1\131\1\164\21\131\1\0\1\131\5\0"+
    "\3\131\1\132\1\133\2\131\2\0\7\131\1\165\17\131"+
    "\1\0\1\131\5\0\3\131\1\132\1\133\2\131\2\0"+
    "\12\131\1\166\14\131\1\0\1\131\5\0\3\131\1\132"+
    "\1\133\2\131\2\0\1\131\1\167\25\131\1\0\1\131"+
    "\5\0\3\131\1\132\1\133\2\131\2\0\21\131\1\170"+
    "\5\131\1\0\1\131\5\0\3\131\1\132\1\133\2\131"+
    "\2\0\14\131\1\171\12\131\1\0\1\131\5\0\3\131"+
    "\1\132\1\133\2\131\2\0\4\131\1\172\22\131\1\0"+
    "\1\131\5\0\3\131\1\132\1\133\2\131\2\0\7\131"+
    "\1\173\17\131\1\0\1\131\5\0\3\131\1\132\1\133"+
    "\2\131\2\0\11\131\1\174\15\131\1\0\1\131\5\0"+
    "\3\131\1\132\1\133\2\131\2\0\7\131\1\175\17\131"+
    "\1\0\1\131\5\0\3\131\1\132\1\133\2\131\2\0"+
    "\3\131\1\176\23\131\1\0\1\131\5\0\3\131\1\132"+
    "\1\133\2\131\2\0\2\131\1\177\24\131\1\0\1\131"+
    "\5\0\3\131\1\132\1\133\2\131\2\0\2\131\1\200"+
    "\24\131\1\0\1\131\5\0\3\131\1\132\1\133\2\131"+
    "\2\0\3\131\1\201\2\131\1\202\20\131\1\0\1\131"+
    "\5\0\3\131\1\132\1\133\2\131\2\0\4\131\1\203"+
    "\4\131\1\204\15\131\1\0\1\131\5\0\3\131\1\132"+
    "\1\133\2\131\2\0\14\131\1\205\12\131\1\0\1\131"+
    "\5\0\3\131\1\132\1\133\2\131\2\0\14\131\1\206"+
    "\12\131\1\0\1\131\5\0\3\131\1\132\1\133\2\131"+
    "\2\0\13\131\1\207\13\131\1\0\1\131\5\0\3\131"+
    "\1\132\1\133\2\131\2\0\2\131\1\210\23\131\1\211"+
    "\1\0\1\131\5\0\3\131\1\132\1\133\2\131\2\0"+
    "\4\131\1\212\22\131\1\0\1\131\5\0\3\131\1\132"+
    "\1\133\2\131\2\0\17\131\1\213\7\131\1\0\1\131"+
    "\5\0\3\131\1\132\1\133\2\131\2\0\2\131\1\214"+
    "\24\131\1\0\1\131\5\0\3\131\1\132\1\133\2\131"+
    "\2\0\1\131\1\215\25\131\1\0\1\131\5\0\3\131"+
    "\1\132\1\133\2\131\2\0\15\131\1\216\1\217\10\131"+
    "\1\0\1\131\5\0\3\131\1\132\1\133\2\131\2\0"+
    "\4\131\1\220\22\131\1\0\1\131\5\0\3\131\1\132"+
    "\1\133\2\131\2\0\1\221\26\131\1\0\1\222\5\0"+
    "\3\131\1\132\1\133\2\131\2\0\10\131\1\223\16\131"+
    "\1\0\1\131\5\0\3\131\1\132\1\133\2\131\2\0"+
    "\4\131\1\224\22\131\1\0\1\131\5\0\3\225\1\226"+
    "\1\227\2\225\2\0\27\225\1\0\1\225\5\0\4\226"+
    "\1\0\2\226\2\0\27\226\1\0\1\226\5\0\3\227"+
    "\1\0\3\227\2\0\27\227\1\0\1\227\5\0\3\230"+
    "\1\231\1\227\2\230\2\0\27\230\1\0\1\230\5\0"+
    "\4\231\1\0\2\231\2\0\27\231\1\0\1\231\5\0"+
    "\1\230\1\232\1\230\1\231\1\227\1\230\1\232\1\47"+
    "\1\0\27\230\1\0\1\230\5\0\3\233\1\234\1\227"+
    "\2\233\2\0\27\233\1\0\1\233\5\0\4\234\1\0"+
    "\2\234\2\0\27\234\1\0\1\234\5\0\4\235\1\0"+
    "\2\235\2\0\27\235\1\0\1\235\5\0\3\236\1\235"+
    "\1\227\2\236\2\0\27\236\1\0\1\236\5\0\1\230"+
    "\1\237\1\230\1\231\1\227\1\230\1\237\1\47\1\0"+
    "\27\230\1\0\1\230\5\0\3\225\1\226\1\227\2\225"+
    "\2\0\22\225\1\240\4\225\1\0\1\225\5\0\3\225"+
    "\1\226\1\227\2\225\2\0\4\225\1\241\22\225\1\0"+
    "\1\225\5\0\3\225\1\226\1\227\2\225\2\0\2\225"+
    "\1\242\24\225\1\0\1\225\5\0\3\225\1\226\1\227"+
    "\2\225\2\0\2\225\1\243\24\225\1\0\1\225\5\0"+
    "\3\225\1\226\1\227\2\225\2\0\2\225\1\244\24\225"+
    "\1\0\1\225\5\0\3\225\1\226\1\227\2\225\2\0"+
    "\10\225\1\245\16\225\1\0\1\225\5\0\3\225\1\226"+
    "\1\227\2\225\2\0\20\225\1\246\6\225\1\0\1\225"+
    "\5\0\3\225\1\226\1\227\2\225\2\0\6\225\1\245"+
    "\20\225\1\0\1\225\5\0\3\225\1\226\1\227\2\225"+
    "\2\0\16\225\1\247\10\225\1\0\1\225\5\0\3\225"+
    "\1\226\1\227\2\225\2\0\2\225\1\250\24\225\1\0"+
    "\1\225\5\0\3\225\1\226\1\227\2\225\2\0\3\225"+
    "\1\251\23\225\1\0\1\225\5\0\3\225\1\226\1\227"+
    "\2\225\2\0\11\225\1\252\15\225\1\0\1\225\5\0"+
    "\3\225\1\226\1\227\2\225\2\0\6\225\1\253\20\225"+
    "\1\0\1\225\5\0\3\225\1\226\1\227\2\225\2\0"+
    "\5\225\1\254\21\225\1\0\1\225\5\0\3\225\1\226"+
    "\1\227\2\225\2\0\1\225\1\255\25\225\1\0\1\225"+
    "\5\0\3\225\1\226\1\227\2\225\2\0\2\225\1\256"+
    "\24\225\1\0\1\225\5\0\3\225\1\226\1\227\2\225"+
    "\2\0\4\225\1\245\22\225\1\0\1\225\5\0\3\225"+
    "\1\226\1\227\2\225\2\0\4\225\1\257\22\225\1\0"+
    "\1\225\5\0\3\225\1\226\1\227\2\225\2\0\11\225"+
    "\1\260\15\225\1\0\1\225\5\0\3\225\1\226\1\227"+
    "\2\225\2\0\10\225\1\261\16\225\1\0\1\225\5\0"+
    "\3\225\1\226\1\227\2\225\2\0\3\225\1\262\23\225"+
    "\1\0\1\225\5\0\3\225\1\226\1\227\2\225\2\0"+
    "\14\225\1\263\12\225\1\0\1\225\5\0\3\225\1\226"+
    "\1\227\2\225\2\0\21\225\1\245\5\225\1\0\1\225"+
    "\5\0\3\225\1\226\1\227\2\225\2\0\1\225\1\264"+
    "\25\225\1\0\1\225\5\0\3\225\1\226\1\227\2\225"+
    "\2\0\1\225\1\265\25\225\1\0\1\225\5\0\3\225"+
    "\1\226\1\227\2\225\2\0\15\225\1\266\11\225\1\0"+
    "\1\225\5\0\3\225\1\226\1\227\2\225\2\0\22\225"+
    "\1\267\4\225\1\0\1\225\5\0\3\225\1\226\1\227"+
    "\2\225\2\0\2\225\1\270\2\225\1\271\5\225\1\272"+
    "\11\225\1\273\1\274\1\0\1\225\5\0\3\225\1\226"+
    "\1\227\2\225\2\0\14\225\1\275\12\225\1\0\1\225"+
    "\5\0\3\225\1\226\1\227\2\225\2\0\12\225\1\276"+
    "\2\225\1\277\11\225\1\0\1\225\5\0\3\225\1\226"+
    "\1\227\2\225\2\0\5\225\1\300\21\225\1\0\1\225"+
    "\5\0\3\225\1\226\1\227\2\225\2\0\14\225\1\301"+
    "\12\225\1\0\1\225\5\0\3\225\1\226\1\227\2\225"+
    "\2\0\2\225\1\302\24\225\1\0\1\225\5\0\3\225"+
    "\1\226\1\227\2\225\2\0\6\225\1\303\20\225\1\0"+
    "\1\225\5\0\3\225\1\226\1\227\2\225\2\0\6\225"+
    "\1\304\20\225\1\0\1\225\5\0\3\225\1\226\1\227"+
    "\2\225\2\0\1\225\1\305\25\225\1\0\1\225\5\0"+
    "\3\225\1\226\1\227\2\225\2\0\2\225\1\306\24\225"+
    "\1\0\1\225\5\0\3\225\1\226\1\227\2\225\2\0"+
    "\4\225\1\307\22\225\1\0\1\225\5\0\3\225\1\226"+
    "\1\227\2\225\2\0\1\225\1\310\25\225\1\0\1\225"+
    "\5\0\3\225\1\226\1\227\2\225\2\0\14\225\1\311"+
    "\12\225\1\0\1\225\5\0\3\225\1\226\1\227\2\225"+
    "\2\0\6\225\1\312\20\225\1\0\1\225\5\0\3\225"+
    "\1\226\1\227\2\225\2\0\3\225\1\313\23\225\1\0"+
    "\1\225\5\0\3\225\1\226\1\227\2\225\2\0\14\225"+
    "\1\314\12\225\1\0\1\225\5\0\3\225\1\226\1\227"+
    "\2\225\2\0\21\225\1\315\5\225\1\0\1\225\5\0"+
    "\3\316\1\317\1\320\2\316\2\0\27\316\1\0\1\316"+
    "\5\0\4\317\1\0\2\317\2\0\27\317\1\0\1\317"+
    "\5\0\3\320\1\0\3\320\2\0\27\320\1\0\1\320"+
    "\5\0\3\321\1\322\1\320\2\321\2\0\27\321\1\0"+
    "\1\321\5\0\4\322\1\0\2\322\2\0\27\322\1\0"+
    "\1\322\5\0\1\321\1\323\1\321\1\322\1\320\1\321"+
    "\1\323\1\47\1\0\27\321\1\0\1\321\5\0\3\324"+
    "\1\325\1\320\2\324\2\0\27\324\1\0\1\324\5\0"+
    "\4\325\1\0\2\325\2\0\27\325\1\0\1\325\5\0"+
    "\4\326\1\0\2\326\2\0\27\326\1\0\1\326\5\0"+
    "\3\327\1\326\1\320\2\327\2\0\27\327\1\0\1\327"+
    "\5\0\1\321\1\330\1\321\1\322\1\320\1\321\1\330"+
    "\1\47\1\0\27\321\1\0\1\321\5\0\3\316\1\317"+
    "\1\320\2\316\2\0\14\316\1\331\12\316\1\0\1\316"+
    "\5\0\3\316\1\317\1\320\2\316\2\0\20\316\1\332"+
    "\6\316\1\0\1\316\5\0\3\316\1\317\1\320\2\316"+
    "\2\0\14\316\1\333\12\316\1\0\1\316\5\0\3\316"+
    "\1\317\1\320\2\316\2\0\3\316\1\334\23\316\1\0"+
    "\1\316\5\0\3\316\1\317\1\320\2\316\2\0\5\316"+
    "\1\335\21\316\1\0\1\316\5\0\3\316\1\317\1\320"+
    "\2\316\2\0\6\316\1\336\20\316\1\0\1\316\5\0"+
    "\3\316\1\317\1\320\2\316\2\0\6\316\1\337\20\316"+
    "\1\0\1\316\5\0\3\316\1\317\1\320\2\316\2\0"+
    "\11\316\1\340\15\316\1\0\1\316\5\0\3\316\1\317"+
    "\1\320\2\316\2\0\6\316\1\341\20\316\1\0\1\316"+
    "\5\0\3\316\1\317\1\320\2\316\2\0\4\316\1\342"+
    "\22\316\1\0\1\316\5\0\3\316\1\317\1\320\2\316"+
    "\2\0\10\316\1\343\16\316\1\0\1\316\5\0\3\316"+
    "\1\317\1\320\2\316\2\0\6\316\1\331\20\316\1\0"+
    "\1\316\5\0\3\316\1\317\1\320\2\316\2\0\11\316"+
    "\1\344\15\316\1\0\1\316\5\0\3\316\1\317\1\320"+
    "\2\316\2\0\2\316\1\345\24\316\1\0\1\316\5\0"+
    "\3\316\1\317\1\320\2\316\2\0\11\316\1\346\15\316"+
    "\1\0\1\316\5\0\3\316\1\317\1\320\2\316\2\0"+
    "\15\316\1\347\11\316\1\0\1\316\5\0\3\316\1\317"+
    "\1\320\2\316\2\0\3\316\1\350\16\316\1\351\4\316"+
    "\1\0\1\316\5\0\3\316\1\317\1\320\2\316\2\0"+
    "\14\316\1\352\12\316\1\0\1\316\5\0\3\316\1\317"+
    "\1\320\2\316\2\0\7\316\1\353\17\316\1\0\1\316"+
    "\5\0\3\316\1\317\1\320\2\316\2\0\7\316\1\354"+
    "\17\316\1\0\1\316\5\0\3\316\1\317\1\320\2\316"+
    "\2\0\6\316\1\355\1\316\1\356\16\316\1\0\1\316"+
    "\5\0\3\316\1\317\1\320\2\316\2\0\6\316\1\357"+
    "\20\316\1\0\1\316\5\0\3\316\1\317\1\320\2\316"+
    "\2\0\26\316\1\360\1\0\1\316\5\0\3\316\1\317"+
    "\1\320\2\316\2\0\4\316\1\361\22\316\1\0\1\316"+
    "\5\0\3\316\1\317\1\320\2\316\2\0\3\316\1\362"+
    "\23\316\1\0\1\316\5\0\3\316\1\317\1\320\2\316"+
    "\2\0\14\316\1\363\12\316\1\0\1\316\5\0\3\316"+
    "\1\317\1\320\2\316\2\0\7\316\1\364\17\316\1\0"+
    "\1\316\5\0\3\316\1\317\1\320\2\316\2\0\2\316"+
    "\1\365\24\316\1\0\1\316\5\0\3\316\1\317\1\320"+
    "\2\316\2\0\6\316\1\366\20\316\1\0\1\316\5\0"+
    "\3\316\1\317\1\320\2\316\2\0\2\316\1\367\24\316"+
    "\1\0\1\316\5\0\3\316\1\317\1\320\2\316\2\0"+
    "\2\316\1\370\16\316\1\371\5\316\1\0\1\316\5\0"+
    "\3\316\1\317\1\320\2\316\2\0\10\316\1\372\16\316"+
    "\1\0\1\316\5\0\3\316\1\317\1\320\2\316\2\0"+
    "\1\316\1\373\25\316\1\0\1\316\5\0\3\316\1\317"+
    "\1\320\2\316\2\0\5\316\1\374\21\316\1\0\1\316"+
    "\5\0\3\316\1\317\1\320\2\316\2\0\10\316\1\375"+
    "\16\316\1\0\1\316\5\0\3\316\1\317\1\320\2\316"+
    "\2\0\21\316\1\376\5\316\1\0\1\316\5\0\3\316"+
    "\1\317\1\320\2\316\2\0\2\316\1\377\24\316\1\0"+
    "\1\316\5\0\3\316\1\317\1\320\2\316\2\0\14\316"+
    "\1\u0100\12\316\1\0\1\316\5\0\3\u0101\1\u0102\1\u0103"+
    "\2\u0101\2\0\27\u0101\1\0\1\u0101\5\0\4\u0102\1\0"+
    "\2\u0102\2\0\27\u0102\1\0\1\u0102\5\0\3\u0103\1\0"+
    "\3\u0103\2\0\27\u0103\1\0\1\u0103\5\0\3\u0104\1\u0105"+
    "\1\u0103\2\u0104\2\0\27\u0104\1\0\1\u0104\5\0\4\u0105"+
    "\1\0\2\u0105\2\0\27\u0105\1\0\1\u0105\5\0\1\u0104"+
    "\1\u0106\1\u0104\1\u0105\1\u0103\1\u0104\1\u0106\1\47\1\0"+
    "\27\u0104\1\0\1\u0104\5\0\3\u0107\1\u0108\1\u0103\2\u0107"+
    "\2\0\27\u0107\1\0\1\u0107\5\0\4\u0108\1\0\2\u0108"+
    "\2\0\27\u0108\1\0\1\u0108\5\0\4\u0109\1\0\2\u0109"+
    "\2\0\27\u0109\1\0\1\u0109\5\0\3\u010a\1\u0109\1\u0103"+
    "\2\u010a\2\0\27\u010a\1\0\1\u010a\5\0\1\u0104\1\u010b"+
    "\1\u0104\1\u0105\1\u0103\1\u0104\1\u010b\1\47\1\0\27\u0104"+
    "\1\0\1\u0104\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0"+
    "\1\u0101\1\u010c\25\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102"+
    "\1\u0103\2\u0101\2\0\5\u0101\1\u010d\21\u0101\1\0\1\u0101"+
    "\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0\10\u0101\1\u010e"+
    "\16\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101"+
    "\2\0\7\u0101\1\u010f\17\u0101\1\0\1\u0101\5\0\3\u0101"+
    "\1\u0102\1\u0103\2\u0101\2\0\5\u0101\1\u0110\21\u0101\1\0"+
    "\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0\14\u0101"+
    "\1\u0111\12\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103"+
    "\2\u0101\2\0\22\u0101\1\u0112\4\u0101\1\0\1\u0101\5\0"+
    "\3\u0101\1\u0102\1\u0103\2\u0101\2\0\14\u0101\1\u0113\12\u0101"+
    "\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0"+
    "\1\u0101\1\u0114\25\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102"+
    "\1\u0103\2\u0101\2\0\6\u0101\1\u0115\20\u0101\1\0\1\u0101"+
    "\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0\1\u0101\1\u0116"+
    "\25\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101"+
    "\2\0\6\u0101\1\u0117\20\u0101\1\0\1\u0101\5\0\3\u0101"+
    "\1\u0102\1\u0103\2\u0101\2\0\20\u0101\1\u0118\6\u0101\1\0"+
    "\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0\14\u0101"+
    "\1\u0119\12\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103"+
    "\2\u0101\2\0\2\u0101\1\u011a\24\u0101\1\0\1\u0101\5\0"+
    "\3\u0101\1\u0102\1\u0103\2\u0101\2\0\5\u0101\1\u011b\21\u0101"+
    "\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0"+
    "\15\u0101\1\u011c\11\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102"+
    "\1\u0103\2\u0101\2\0\10\u0101\1\u011d\16\u0101\1\0\1\u0101"+
    "\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0\21\u0101\1\u011e"+
    "\5\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101"+
    "\2\0\5\u0101\1\u011f\21\u0101\1\0\1\u0101\5\0\3\u0101"+
    "\1\u0102\1\u0103\2\u0101\2\0\2\u0101\1\u0120\24\u0101\1\0"+
    "\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0\4\u0101"+
    "\1\u0121\22\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103"+
    "\2\u0101\2\0\11\u0101\1\u0122\15\u0101\1\0\1\u0101\5\0"+
    "\3\u0101\1\u0102\1\u0103\2\u0101\2\0\1\u0101\1\u0123\25\u0101"+
    "\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0"+
    "\4\u0101\1\u0124\22\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102"+
    "\1\u0103\2\u0101\2\0\24\u0101\1\u0125\2\u0101\1\0\1\u0101"+
    "\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0\24\u0101\1\u0126"+
    "\2\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101"+
    "\2\0\1\u0101\1\u0127\25\u0101\1\0\1\u0101\5\0\3\u0101"+
    "\1\u0102\1\u0103\2\u0101\2\0\13\u0101\1\u0128\13\u0101\1\0"+
    "\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0\6\u0101"+
    "\1\u0124\20\u0101\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103"+
    "\2\u0101\2\0\1\u0101\1\u0129\25\u0101\1\0\1\u0101\5\0"+
    "\3\u0101\1\u0102\1\u0103\2\u0101\2\0\3\u0101\1\u012a\23\u0101"+
    "\1\0\1\u0101\5\0\3\u0101\1\u0102\1\u0103\2\u0101\2\0"+
    "\14\u0101\1\u012b\12\u0101\1\0\1\u0101\5\0\3\u012c\1\u012d"+
    "\1\u012e\2\u012c\2\0\27\u012c\1\0\1\u012c\5\0\4\u012d"+
    "\1\0\2\u012d\2\0\27\u012d\1\0\1\u012d\5\0\3\u012e"+
    "\1\0\3\u012e\2\0\27\u012e\1\0\1\u012e\5\0\3\u012f"+
    "\1\u0130\1\u012e\2\u012f\2\0\27\u012f\1\0\1\u012f\5\0"+
    "\4\u0130\1\0\2\u0130\2\0\27\u0130\1\0\1\u0130\5\0"+
    "\1\u012f\1\u0131\1\u012f\1\u0130\1\u012e\1\u012f\1\u0131\1\47"+
    "\1\0\27\u012f\1\0\1\u012f\5\0\3\u0132\1\u0133\1\u012e"+
    "\2\u0132\2\0\27\u0132\1\0\1\u0132\5\0\4\u0133\1\0"+
    "\2\u0133\2\0\27\u0133\1\0\1\u0133\5\0\4\u0134\1\0"+
    "\2\u0134\2\0\27\u0134\1\0\1\u0134\5\0\3\u0135\1\u0134"+
    "\1\u012e\2\u0135\2\0\27\u0135\1\0\1\u0135\5\0\1\u012f"+
    "\1\u0136\1\u012f\1\u0130\1\u012e\1\u012f\1\u0136\1\47\1\0"+
    "\27\u012f\1\0\1\u012f\5\0\3\u012c\1\u012d\1\u012e\2\u012c"+
    "\2\0\14\u012c\1\u0137\12\u012c\1\0\1\u012c\5\0\3\u012c"+
    "\1\u012d\1\u012e\2\u012c\2\0\10\u012c\1\u0138\16\u012c\1\0"+
    "\1\u012c\5\0\3\u012c\1\u012d\1\u012e\2\u012c\2\0\1\u012c"+
    "\1\u0139\25\u012c\1\0\1\u012c\5\0\3\u012c\1\u012d\1\u012e"+
    "\2\u012c\2\0\14\u012c\1\u013a\12\u012c\1\0\1\u012c\5\0"+
    "\3\u012c\1\u012d\1\u012e\2\u012c\2\0\14\u012c\1\u013b\12\u012c"+
    "\1\0\1\u012c\5\0\3\u012c\1\u012d\1\u012e\2\u012c\2\0"+
    "\21\u012c\1\u013c\5\u012c\1\0\1\u012c\5\0\3\u012c\1\u012d"+
    "\1\u012e\2\u012c\2\0\11\u012c\1\u013d\15\u012c\1\0\1\u012c"+
    "\5\0\3\u012c\1\u012d\1\u012e\2\u012c\2\0\24\u012c\1\u013e"+
    "\2\u012c\1\0\1\u012c\5\0\3\u012c\1\u012d\1\u012e\2\u012c"+
    "\2\0\2\u012c\1\u013f\24\u012c\1\0\1\u012c\5\0\3\u012c"+
    "\1\u012d\1\u012e\2\u012c\2\0\6\u012c\1\u0140\20\u012c\1\0"+
    "\1\u012c\5\0\3\u012c\1\u012d\1\u012e\2\u012c\2\0\11\u012c"+
    "\1\u0141\15\u012c\1\0\1\u012c\5\0\3\u012c\1\u012d\1\u012e"+
    "\2\u012c\2\0\16\u012c\1\u0142\10\u012c\1\0\1\u012c\5\0"+
    "\3\u012c\1\u012d\1\u012e\2\u012c\2\0\6\u012c\1\u0143\20\u012c"+
    "\1\0\1\u012c\5\0\3\u012c\1\u012d\1\u012e\2\u012c\2\0"+
    "\3\u012c\1\u0144\23\u012c\1\0\1\u012c\5\0\3\u012c\1\u012d"+
    "\1\u012e\2\u012c\2\0\11\u012c\1\u0145\15\u012c\1\0\1\u012c"+
    "\5\0\3\u012c\1\u012d\1\u012e\2\u012c\2\0\1\u012c\1\u0146"+
    "\25\u012c\1\0\1\u012c\5\0\3\u012c\1\u012d\1\u012e\2\u012c"+
    "\2\0\7\u012c\1\u0147\17\u012c\1\0\1\u012c\5\0\3\u012c"+
    "\1\u012d\1\u012e\2\u012c\2\0\7\u012c\1\u0148\17\u012c\1\0"+
    "\1\u012c\5\0\3\u012c\1\u012d\1\u012e\2\u012c\2\0\13\u012c"+
    "\1\u0149\13\u012c\1\0\1\u012c\5\0\3\u012c\1\u012d\1\u012e"+
    "\2\u012c\2\0\1\u012c\1\u014a\25\u012c\1\0\1\u012c\5\0"+
    "\3\u012c\1\u012d\1\u012e\2\u012c\2\0\13\u012c\1\u014b\13\u012c"+
    "\1\0\1\u012c\5\0\3\u012c\1\u012d\1\u012e\2\u012c\2\0"+
    "\6\u012c\1\u014c\20\u012c\1\0\1\u012c\5\0\3\u012c\1\u012d"+
    "\1\u012e\2\u012c\2\0\4\u012c\1\u014d\22\u012c\1\0\1\u012c"+
    "\5\0\3\u014e\1\u014f\1\u0150\2\u014e\2\0\27\u014e\1\0"+
    "\1\u014e\5\0\4\u014f\1\0\2\u014f\2\0\27\u014f\1\0"+
    "\1\u014f\5\0\3\u0150\1\0\3\u0150\2\0\27\u0150\1\0"+
    "\1\u0150\5\0\3\u0151\1\u0152\1\u0150\2\u0151\2\0\27\u0151"+
    "\1\0\1\u0151\5\0\4\u0152\1\0\2\u0152\2\0\27\u0152"+
    "\1\0\1\u0152\5\0\1\u0151\1\u0153\1\u0151\1\u0152\1\u0150"+
    "\1\u0151\1\u0153\1\47\1\0\27\u0151\1\0\1\u0151\5\0"+
    "\3\u0154\1\u0155\1\u0150\2\u0154\2\0\27\u0154\1\0\1\u0154"+
    "\5\0\4\u0155\1\0\2\u0155\2\0\27\u0155\1\0\1\u0155"+
    "\5\0\4\u0156\1\0\2\u0156\2\0\27\u0156\1\0\1\u0156"+
    "\5\0\3\u0157\1\u0156\1\u0150\2\u0157\2\0\27\u0157\1\0"+
    "\1\u0157\5\0\1\u0151\1\u0158\1\u0151\1\u0152\1\u0150\1\u0151"+
    "\1\u0158\1\47\1\0\27\u0151\1\0\1\u0151\5\0\3\u014e"+
    "\1\u014f\1\u0150\2\u014e\2\0\11\u014e\1\u0159\15\u014e\1\0"+
    "\1\u014e\5\0\3\u014e\1\u014f\1\u0150\2\u014e\2\0\6\u014e"+
    "\1\u015a\20\u014e\1\0\1\u014e\5\0\3\u014e\1\u014f\1\u0150"+
    "\2\u014e\2\0\22\u014e\1\u015b\4\u014e\1\0\1\u014e\5\0"+
    "\3\u014e\1\u014f\1\u0150\2\u014e\2\0\22\u014e\1\u015c\4\u014e"+
    "\1\0\1\u014e\5\0\3\u014e\1\u014f\1\u0150\2\u014e\2\0"+
    "\1\u014e\1\u015d\25\u014e\1\0\1\u014e\5\0\3\u014e\1\u014f"+
    "\1\u0150\2\u014e\2\0\27\u014e\1\u015e\1\u014e\5\0\3\u014e"+
    "\1\u014f\1\u0150\2\u014e\2\0\6\u014e\1\u015f\20\u014e\1\0"+
    "\1\u014e\5\0\3\u014e\1\u014f\1\u0150\2\u014e\2\0\7\u014e"+
    "\1\u0160\17\u014e\1\0\1\u014e\5\0\3\u014e\1\u014f\1\u0150"+
    "\2\u014e\2\0\14\u014e\1\u0161\12\u014e\1\0\1\u014e\5\0"+
    "\3\u014e\1\u014f\1\u0150\2\u014e\2\0\6\u014e\1\u0162\20\u014e"+
    "\1\0\1\u014e\5\0\3\u014e\1\u014f\1\u0150\2\u014e\2\0"+
    "\6\u014e\1\u0163\20\u014e\1\0\1\u014e\5\0\3\u014e\1\u014f"+
    "\1\u0150\2\u014e\2\0\2\u014e\1\u0164\24\u014e\1\0\1\u014e"+
    "\5\0\3\u014e\1\u014f\1\u0150\2\u014e\2\0\1\u014e\1\u0165"+
    "\25\u014e\1\0\1\u014e\5\0\3\u014e\1\u014f\1\u0150\2\u014e"+
    "\2\0\6\u014e\1\u0166\20\u014e\1\0\1\u014e\5\0\3\u014e"+
    "\1\u014f\1\u0150\2\u014e\2\0\14\u014e\1\u0167\12\u014e\1\0"+
    "\1\u014e\5\0\3\u014e\1\u014f\1\u0150\2\u014e\2\0\14\u014e"+
    "\1\u0168\12\u014e\1\0\1\u014e\5\0\3\u014e\1\u014f\1\u0150"+
    "\2\u014e\2\0\3\u014e\1\u0169\23\u014e\1\0\1\u014e\5\0"+
    "\3\u014e\1\u014f\1\u0150\2\u014e\2\0\4\u014e\1\u016a\22\u014e"+
    "\1\0\1\u014e\5\0\3\u014e\1\u014f\1\u0150\2\u014e\2\0"+
    "\3\u014e\1\u016b\23\u014e\1\0\1\u014e\5\0\3\u014e\1\u014f"+
    "\1\u0150\2\u014e\2\0\4\u014e\1\u016c\22\u014e\1\0\1\u014e"+
    "\5\0\3\u014e\1\u014f\1\u0150\2\u014e\2\0\5\u014e\1\u016d"+
    "\21\u014e\1\0\1\u014e\5\0\3\u016e\1\u016f\1\u0170\2\u016e"+
    "\2\0\27\u016e\1\0\1\u016e\5\0\4\u016f\1\0\2\u016f"+
    "\2\0\27\u016f\1\0\1\u016f\5\0\3\u0170\1\0\3\u0170"+
    "\2\0\27\u0170\1\0\1\u0170\5\0\3\u0171\1\u0172\1\u0170"+
    "\2\u0171\2\0\27\u0171\1\0\1\u0171\5\0\4\u0172\1\0"+
    "\2\u0172\2\0\27\u0172\1\0\1\u0172\5\0\1\u0171\1\u0173"+
    "\1\u0171\1\u0172\1\u0170\1\u0171\1\u0173\1\47\1\0\27\u0171"+
    "\1\0\1\u0171\5\0\3\u0174\1\u0175\1\u0170\2\u0174\2\0"+
    "\27\u0174\1\0\1\u0174\5\0\4\u0175\1\0\2\u0175\2\0"+
    "\27\u0175\1\0\1\u0175\5\0\4\u0176\1\0\2\u0176\2\0"+
    "\27\u0176\1\0\1\u0176\5\0\3\u0177\1\u0176\1\u0170\2\u0177"+
    "\2\0\27\u0177\1\0\1\u0177\5\0\1\u0171\1\u0178\1\u0171"+
    "\1\u0172\1\u0170\1\u0171\1\u0178\1\47\1\0\27\u0171\1\0"+
    "\1\u0171\5\0\3\u016e\1\u016f\1\u0170\2\u016e\2\0\6\u016e"+
    "\1\u0179\20\u016e\1\0\1\u016e\5\0\3\u016e\1\u016f\1\u0170"+
    "\2\u016e\2\0\2\u016e\1\u017a\24\u016e\1\0\1\u016e\5\0"+
    "\3\u016e\1\u016f\1\u0170\2\u016e\2\0\14\u016e\1\u017b\12\u016e"+
    "\1\0\1\u016e\5\0\3\u016e\1\u016f\1\u0170\2\u016e\2\0"+
    "\2\u016e\1\u017c\24\u016e\1\0\1\u016e\5\0\3\u016e\1\u016f"+
    "\1\u0170\2\u016e\2\0\3\u016e\1\u017d\23\u016e\1\0\1\u016e"+
    "\5\0\3\u016e\1\u016f\1\u0170\2\u016e\2\0\5\u016e\1\u017e"+
    "\21\u016e\1\0\1\u016e\5\0\3\u016e\1\u016f\1\u0170\2\u016e"+
    "\2\0\10\u016e\1\u017f\16\u016e\1\0\1\u016e\5\0\3\u016e"+
    "\1\u016f\1\u0170\2\u016e\2\0\27\u016e\1\u0180\1\u016e\5\0"+
    "\3\u016e\1\u016f\1\u0170\2\u016e\2\0\27\u016e\1\u0181\1\u016e"+
    "\5\0\3\u016e\1\u016f\1\u0170\2\u016e\2\0\20\u016e\1\u0182"+
    "\6\u016e\1\0\1\u016e\5\0\3\u016e\1\u016f\1\u0170\2\u016e"+
    "\2\0\11\u016e\1\u0183\15\u016e\1\0\1\u016e\5\0\3\u016e"+
    "\1\u016f\1\u0170\2\u016e\2\0\20\u016e\1\u0184\6\u016e\1\0"+
    "\1\u016e\5\0\3\u016e\1\u016f\1\u0170\2\u016e\2\0\3\u016e"+
    "\1\u0185\23\u016e\1\0\1\u016e\5\0\4\u0186\1\u0187\2\u0186"+
    "\2\0\27\u0186\1\0\1\u0186\5\0\4\u0186\1\0\2\u0186"+
    "\2\0\27\u0186\1\0\1\u0186\5\0\3\u0187\1\0\3\u0187"+
    "\2\0\27\u0187\1\0\1\u0187\5\0\4\u0188\1\u0187\2\u0188"+
    "\2\0\27\u0188\1\0\1\u0188\5\0\4\u0188\1\0\2\u0188"+
    "\2\0\27\u0188\1\0\1\u0188\5\0\1\u0188\1\u0189\2\u0188"+
    "\1\u0187\1\u0188\1\u0189\1\47\1\0\27\u0188\1\0\1\u0188"+
    "\5\0\4\u018a\1\u0187\2\u018a\2\0\27\u018a\1\0\1\u018a"+
    "\5\0\4\u018a\1\0\2\u018a\2\0\27\u018a\1\0\1\u018a"+
    "\5\0\4\u018b\1\0\2\u018b\2\0\27\u018b\1\0\1\u018b"+
    "\5\0\4\u018b\1\u0187\2\u018b\2\0\27\u018b\1\0\1\u018b"+
    "\5\0\1\u0188\1\u018c\2\u0188\1\u0187\1\u0188\1\u018c\1\47"+
    "\1\0\27\u0188\1\0\1\u0188\5\0\4\u0186\1\u0187\2\u0186"+
    "\2\0\2\u0186\1\u018d\24\u0186\1\0\1\u0186\5\0\4\u0186"+
    "\1\u0187\2\u0186\2\0\1\u0186\1\u018e\25\u0186\1\0\1\u0186"+
    "\5\0\4\u0186\1\u0187\2\u0186\2\0\11\u0186\1\u018f\15\u0186"+
    "\1\0\1\u0186\5\0\4\u0186\1\u0187\2\u0186\2\0\14\u0186"+
    "\1\u0190\12\u0186\1\0\1\u0186\5\0\4\u0186\1\u0187\2\u0186"+
    "\2\0\23\u0186\1\u0191\3\u0186\1\0\1\u0186\5\0\4\u0186"+
    "\1\u0187\2\u0186\2\0\1\u0186\1\u0192\25\u0186\1\0\1\u0186"+
    "\5\0\4\u0186\1\u0187\2\u0186\2\0\1\u0186\1\u0193\25\u0186"+
    "\1\0\1\u0186\5\0\4\u0186\1\u0187\2\u0186\2\0\1\u0186"+
    "\1\u0194\25\u0186\1\0\1\u0186\5\0\4\u0195\1\0\2\u0195"+
    "\2\0\27\u0195\1\0\1\u0195\6\0\1\u0189\4\0\1\u0189"+
    "\1\47\40\0\1\u0196\4\0\1\u0196\1\47\37\0\4\u0195"+
    "\1\0\2\u0195\2\0\11\u0195\1\u0197\15\u0195\1\0\1\u0195"+
    "\5\0\4\u0195\1\0\2\u0195\2\0\22\u0195\1\u0198\4\u0195"+
    "\1\0\1\u0195\5\0\4\u0195\1\0\2\u0195\2\0\7\u0195"+
    "\1\u0199\17\u0195\1\0\1\u0195\5\0\4\u0195\1\0\2\u0195"+
    "\2\0\2\u0195\1\u019a\24\u0195\1\0\1\u0195\5\0\4\u0195"+
    "\1\0\2\u0195\2\0\1\u0195\1\u019b\25\u0195\1\0\1\u0195"+
    "\5\0\4\u0195\1\0\2\u0195\2\0\13\u0195\1\u019c\13\u0195"+
    "\1\0\1\u0195\5\0\4\u0195\1\0\2\u0195\2\0\10\u0195"+
    "\1\u019d\16\u0195\1\0\1\u0195\5\0\4\u0195\1\0\2\u0195"+
    "\2\0\7\u0195\1\u019e\17\u0195\1\0\1\u0195\5\0\4\u0195"+
    "\1\0\2\u0195\2\0\1\u0195\1\u019f\25\u0195\1\0\1\u0195"+
    "\5\0\4\u0195\1\0\2\u0195\2\0\12\u0195\1\u01a0\14\u0195"+
    "\1\0\1\u0195\5\0\4\u0195\1\0\2\u0195\2\0\22\u0195"+
    "\1\u01a1\4\u0195\1\0\1\u0195\5\0\4\u0195\1\0\2\u0195"+
    "\2\0\3\u0195\1\u01a2\23\u0195\1\0\1\u0195\5\0\4\u0195"+
    "\1\0\2\u0195\2\0\10\u0195\1\u01a3\16\u0195\1\0\1\u0195"+
    "\5\0\4\u0195\1\0\2\u0195\2\0\12\u0195\1\u01a4\14\u0195"+
    "\1\0\1\u0195\5\0\4\u0195\1\0\2\u0195\2\0\1\u0195"+
    "\1\u01a5\25\u0195\1\0\1\u0195\5\0\4\u0195\1\0\2\u0195"+
    "\2\0\1\u0195\1\u01a6\25\u0195\1\0\1\u0195\5\0\4\u0195"+
    "\1\0\2\u0195\2\0\20\u0195\1\u01a7\6\u0195\1\0\1\u0195"+
    "\5\0\4\u0195\1\0\2\u0195\2\0\1\u0195\1\u01a8\25\u0195"+
    "\1\0\1\u0195\5\0\4\u0195\1\0\2\u0195\2\0\1\u0195"+
    "\1\u01a9\25\u0195\1\0\1\u0195";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13962];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\10\1\1\11\31\1\1\0"+
    "\u0136\1\1\11\41\1\2\11\5\1\2\11\1\1\2\11"+
    "\12\1\1\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public Object lexeme; //Para almacenar tokens de tipo String, Boolean, Integer y Float
    public int currentToken; //Para obtener el token actual sin avanzar el parseo
    public String errorMessage; //Para obtener los errores
    public Boolean lexerError = false; //Para identificar si el error fue léxico

    public String getErrorMessage() {
        return this.errorMessage;
    }

    public Boolean isLexerError() {
        return lexerError;
    }

    public int getCurrentToken() {
        return this.currentToken;
    }

    public Object getSemantic() {
        return this.lexeme;
    }

    public int getNextToken() {
        try {
            Integer token = yylex();
            if (token == null) {
                currentToken = ENDINPUT;
                return currentToken;
            }
            return token;
        } catch(IOException ex) {
            ex.printStackTrace();
            return -1;
        }
    }

    public int getLine() {
        return yyline;
    }

    public int getColumn() {
        return yycolumn;
    }

    public int prepare(int token) {
        lexeme = yytext();
        currentToken = token;
        return token;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Integer yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { return prepare(INIC);
          }
        case 62: break;
        case 14: 
          { return prepare(APARECETORTUGA);
          }
        case 63: break;
        case 29: 
          { return prepare(FIN);
          }
        case 64: break;
        case 31: 
          { return prepare(COLOR);
          }
        case 65: break;
        case 34: 
          { return prepare(PARA);
          }
        case 66: break;
        case 37: 
          { return prepare(SUMA);
          }
        case 67: break;
        case 7: 
          { return prepare(O);
          }
        case 68: break;
        case 48: 
          { return prepare(ESPERA);
          }
        case 69: break;
        case 49: 
          { return prepare(PRIMERO);
          }
        case 70: break;
        case 15: 
          { return prepare(RAIZCUADRADA);
          }
        case 71: break;
        case 12: 
          { lexeme = yytext();
    errorMessage = "El identificador <" + lexeme + "> no puede iniciar con simbolos, linea " + (yyline + 1) + ", columna " + (yycolumn + 1);
    lexerError = true;
    return error;
          }
        case 72: break;
        case 19: 
          { return prepare(GIRAIZQUIERDA);
          }
        case 73: break;
        case 45: 
          { return prepare(CENTRO);
          }
        case 74: break;
        case 42: 
          { return prepare(MENOS);
          }
        case 75: break;
        case 54: 
          { return prepare(PONRUMBO);
          }
        case 76: break;
        case 47: 
          { return prepare(ELEGIR);
          }
        case 77: break;
        case 9: 
          { return prepare(IDENTIFIER);
          }
        case 78: break;
        case 23: 
          { return prepare(SUBELAPIZ);
          }
        case 79: break;
        case 11: 
          { lexeme = yytext();
    errorMessage = "El identificador <" + lexeme + "> no puede iniciar con mayuscula, linea " + (yyline + 1) + ", columna " + (yycolumn + 1);
    lexerError = true;
    return error;
          }
        case 80: break;
        case 33: 
          { String boolString = yytext();
    Boolean boolVal = Boolean.parseBoolean(boolString);
    lexeme = boolVal;
    currentToken = BOOLEAN;
    return currentToken;
          }
        case 81: break;
        case 57: 
          { return prepare(DIVISION);
          }
        case 82: break;
        case 55: 
          { return prepare(POTENCIA);
          }
        case 83: break;
        case 51: 
          { return prepare(REDONDEA);
          }
        case 84: break;
        case 60: 
          { return prepare(DIFERENCIA);
          }
        case 85: break;
        case 17: 
          { return prepare(OCULTATORTUGA);
          }
        case 86: break;
        case 2: 
          { /* Ignore */
          }
        case 87: break;
        case 39: 
          { return prepare(RESTO);
          }
        case 88: break;
        case 43: 
          { return prepare(REPITE);
          }
        case 89: break;
        case 41: 
          { return prepare(PONXY);
          }
        case 90: break;
        case 52: 
          { return prepare(IGUALES);
          }
        case 91: break;
        case 26: 
          { return prepare(INC);
          }
        case 92: break;
        case 6: 
          { lexeme = yytext();
    errorMessage = "Identificador mal definido <" + lexeme + ">, linea " + (yyline + 1) + ", columna " + (yycolumn + 1);
    lexerError = true;
    return error;
          }
        case 93: break;
        case 30: 
          { return prepare(AZAR);
          }
        case 94: break;
        case 40: 
          { return prepare(PONCOLORLAPIZ);
          }
        case 95: break;
        case 61: 
          { return prepare(BORRAPANTALLA);
          }
        case 96: break;
        case 16: 
          { return prepare(RETROCEDE);
          }
        case 97: break;
        case 46: 
          { return prepare(PONPOS);
          }
        case 98: break;
        case 44: 
          { return prepare(CUENTA);
          }
        case 99: break;
        case 59: 
          { return prepare(MENORQUE);
          }
        case 100: break;
        case 4: 
          { lexeme = yytext();
    errorMessage = "El identificador <" + lexeme + "> supera el tamaño máximo de 10 carácteres, linea " + (yyline + 1) + ", columna " + (yycolumn + 1);
    lexerError = true;
    return error;
          }
        case 101: break;
        case 20: 
          { return prepare(GIRADERECHA);
          }
        case 102: break;
        case 53: 
          { return prepare(PRODUCTO);
          }
        case 103: break;
        case 27: 
          { return prepare(COS);
          }
        case 104: break;
        case 18: 
          { return prepare(ULTIMO);
          }
        case 105: break;
        case 50: 
          { return prepare(EJECUTA);
          }
        case 106: break;
        case 22: 
          { return prepare(SI);
          }
        case 107: break;
        case 5: 
          { String value = yytext();
    Integer intValue = Integer.parseInt(value);
    lexeme = intValue;
    currentToken = INTEGER;
    return currentToken;
          }
        case 108: break;
        case 21: 
          { return prepare(BAJALAPIZ);
          }
        case 109: break;
        case 28: 
          { return prepare(SEN);
          }
        case 110: break;
        case 56: 
          { return prepare(ELEMENTO);
          }
        case 111: break;
        case 58: 
          { return prepare(MAYORQUE);
          }
        case 112: break;
        case 1: 
          { // token desconocido
    lexeme = yytext();
    errorMessage = "Simbolo desconocido <" + lexeme + ">, linea " + (yyline + 1) + ", columna " + (yycolumn + 1);
    lexerError = true;
    return error;
          }
        case 113: break;
        case 36: 
          { return prepare(PONY);
          }
        case 114: break;
        case 10: 
          { lexeme = yytext();
    errorMessage = "El identificador <" + lexeme + "> no puede iniciar con numeros, linea " + (yyline + 1) + ", columna " + (yycolumn + 1);
    lexerError = true;
    return error;
          }
        case 115: break;
        case 25: 
          { return prepare(VAR);
          }
        case 116: break;
        case 38: 
          { return prepare(RUMBO);
          }
        case 117: break;
        case 13: 
          { return prepare(AVANZA);
          }
        case 118: break;
        case 24: 
          { String value = yytext();
    Float floatValue = Float.parseFloat(value);
    lexeme = floatValue;
    currentToken = FLOAT;
    return currentToken;
          }
        case 119: break;
        case 35: 
          { return prepare(PONX);
          }
        case 120: break;
        case 3: 
          { String token = yytext();
    lexeme = token;
    char tokenValue = token.charAt(0);
    currentToken = tokenValue;
    return currentToken;
          }
        case 121: break;
        case 8: 
          { return prepare(Y);
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
