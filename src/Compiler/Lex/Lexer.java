/* The following code was generated by JFlex 1.4.3 on 31/7/20 12:21 */

package Compiler.Lex;

import Compiler.Jacc.ParserTokens;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31/7/20 12:21 from the specification file
 * <tt>C:/Users/Marlo/IdeaProjects/Logorduin/src/Compiler/Lex/flexer.jflex</tt>
 */
public class Lexer implements ParserTokens {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\5\0\1\12"+
    "\1\0\1\15\1\15\1\15\1\15\1\0\1\10\1\14\1\4\1\13"+
    "\11\6\1\0\1\15\1\15\1\15\1\15\1\45\1\12\32\7\1\15"+
    "\1\0\1\15\1\11\1\12\1\0\1\17\1\34\1\23\1\40\1\32"+
    "\1\46\1\30\1\41\1\21\1\35\1\5\1\26\1\33\1\22\1\24"+
    "\1\31\1\42\1\20\1\37\1\27\1\25\1\16\1\5\1\43\1\44"+
    "\1\36\1\0\1\12\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\3"+
    "\2\6\1\5\1\3\5\4\1\7\10\4\1\10\1\4"+
    "\1\2\2\11\1\6\1\12\1\5\1\12\1\0\2\13"+
    "\2\14\1\12\1\11\1\15\1\16\3\11\1\17\1\11"+
    "\1\20\6\11\1\21\1\22\1\23\1\24\12\11\1\25"+
    "\1\26\2\11\1\27\4\11\1\6\2\12\1\5\1\30"+
    "\2\13\2\14\1\12\1\31\12\11\1\32\1\11\1\33"+
    "\23\11\1\34\2\11\1\35\2\11\1\6\2\12\1\5"+
    "\2\13\2\14\1\12\2\11\1\36\6\11\1\37\6\11"+
    "\1\40\5\11\1\41\1\42\11\11\1\43\1\11\1\44"+
    "\4\11\1\6\2\12\1\5\2\13\2\14\1\12\3\11"+
    "\1\45\2\11\1\46\14\11\1\47\1\11\1\50\7\11"+
    "\1\51\7\11\1\6\2\12\1\5\2\13\2\14\1\12"+
    "\1\52\3\11\1\53\2\11\1\54\1\55\1\11\1\56"+
    "\6\11\1\57\1\11\1\60\2\11\1\61\11\11\1\6"+
    "\2\12\1\5\2\13\2\14\1\12\10\11\1\62\5\11"+
    "\1\63\11\11\1\6\2\12\1\5\2\13\2\14\1\12"+
    "\3\11\1\64\1\65\3\11\1\66\1\67\1\11\1\70"+
    "\1\71\5\11\1\72\3\11\1\6\2\12\1\5\2\13"+
    "\2\14\1\12\2\11\1\73\4\11\1\74\1\75\1\76"+
    "\1\11\1\77\2\11\1\6\1\12\1\5\1\13\1\14"+
    "\1\12\7\11\1\100\1\4\1\0\4\4\1\101\3\4"+
    "\1\102\5\4\1\103\1\104\1\105\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\47\0\165\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\47\0\u01ad\0\u01d4\0\u01fb"+
    "\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333"+
    "\0\u035a\0\u0381\0\u03a8\0\234\0\u03cf\0\u03f6\0\u041d\0\u0444"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c"+
    "\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u041d\0\u063f\0\u0666\0\u068d"+
    "\0\u041d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e"+
    "\0\u07c5\0\u041d\0\u07ec\0\u0813\0\u041d\0\u083a\0\u0861\0\u0888"+
    "\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u041d"+
    "\0\u041d\0\u09c0\0\u09e7\0\u041d\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83"+
    "\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0507\0\u0b46\0\u0b6d\0\u0b94"+
    "\0\u0bbb\0\u0be2\0\u0a5c\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5"+
    "\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0a5c\0\u0d8f\0\u0a5c"+
    "\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7"+
    "\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff"+
    "\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u0a5c\0\u1110"+
    "\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248"+
    "\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u1110\0\u130b\0\u1332\0\u1359"+
    "\0\u1380\0\u13a7\0\u13ce\0\u1110\0\u13f5\0\u141c\0\u1443\0\u146a"+
    "\0\u1491\0\u14b8\0\u1110\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b"+
    "\0\u15a2\0\u1110\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c"+
    "\0\u16b3\0\u16da\0\u1701\0\u1110\0\u1728\0\u1110\0\u174f\0\u1776"+
    "\0\u179d\0\u17c4\0\u17eb\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae"+
    "\0\u18d5\0\u18fc\0\u1923\0\u194a\0\u1971\0\u1998\0\u179d\0\u19bf"+
    "\0\u19e6\0\u179d\0\u1a0d\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0"+
    "\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93\0\u1bba\0\u179d\0\u1be1"+
    "\0\u179d\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb\0\u1cf2"+
    "\0\u179d\0\u1d19\0\u1d40\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03"+
    "\0\u1e2a\0\u1e51\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b"+
    "\0\u1f62\0\u1ddc\0\u1f89\0\u1fb0\0\u1fd7\0\u1ddc\0\u1ffe\0\u2025"+
    "\0\u1ddc\0\u1ddc\0\u204c\0\u1ddc\0\u2073\0\u209a\0\u20c1\0\u20e8"+
    "\0\u210f\0\u2136\0\u1ddc\0\u215d\0\u1ddc\0\u2184\0\u21ab\0\u1ddc"+
    "\0\u21d2\0\u21f9\0\u2220\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3"+
    "\0\u230a\0\u2331\0\u2358\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b"+
    "\0\u2442\0\u2469\0\u2490\0\u24b7\0\u24de\0\u2505\0\u252c\0\u2553"+
    "\0\u257a\0\u25a1\0\u22e3\0\u25c8\0\u25ef\0\u2616\0\u263d\0\u2664"+
    "\0\u22e3\0\u268b\0\u26b2\0\u26d9\0\u2700\0\u2727\0\u274e\0\u2775"+
    "\0\u279c\0\u27c3\0\u27ea\0\u2811\0\u2838\0\u285f\0\u2886\0\u28ad"+
    "\0\u28d4\0\u28fb\0\u2922\0\u2949\0\u2970\0\u2997\0\u279c\0\47"+
    "\0\u29be\0\u29e5\0\u2a0c\0\u279c\0\u279c\0\u2a33\0\u279c\0\u279c"+
    "\0\u2a5a\0\u2a81\0\u2aa8\0\u2acf\0\u2af6\0\u279c\0\u2b1d\0\u2b44"+
    "\0\u2b6b\0\u2b92\0\u2bb9\0\u2be0\0\u2c07\0\u2c2e\0\u2c55\0\u2c7c"+
    "\0\u2ca3\0\u2cca\0\u2cf1\0\u2d18\0\u2b44\0\u2d3f\0\u2d66\0\u2d8d"+
    "\0\u2db4\0\47\0\47\0\u2b44\0\u2ddb\0\u2b44\0\u2e02\0\u2e29"+
    "\0\47\0\47\0\u2e50\0\47\0\47\0\u2e77\0\u2e9e\0\u2ec5"+
    "\0\u2eec\0\u2f13\0\u2f3a\0\u2f61\0\u2f88\0\u2e29\0\u2e29\0\u2e77"+
    "\0\u2faf\0\u2fd6\0\u2ffd\0\u3024\0\u2e29\0\u304b\0\u3072\0\u3099"+
    "\0\u2e29\0\u30c0\0\u30e7\0\u310e\0\u3135\0\u315c\0\u2e29\0\u2e29"+
    "\0\u2e29\0\u2e29\0\u2e29";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\2\1\15\1\16\1\17\1\20"+
    "\1\21\1\6\1\22\1\23\1\24\2\6\1\25\1\26"+
    "\1\27\1\30\1\31\2\6\1\32\1\33\3\6\1\34"+
    "\1\2\1\35\51\0\1\4\50\0\1\36\47\0\3\37"+
    "\1\40\1\41\2\37\2\0\27\37\1\0\1\37\5\0"+
    "\1\42\1\43\1\42\1\44\1\41\1\42\1\43\1\45"+
    "\1\0\27\42\1\0\1\42\5\0\3\46\1\47\1\41"+
    "\2\46\2\0\27\46\1\0\1\46\5\0\4\50\1\0"+
    "\2\50\2\0\27\50\1\0\1\50\5\0\3\41\1\0"+
    "\3\41\2\0\27\41\1\0\1\41\5\0\3\51\1\50"+
    "\1\41\2\51\2\0\27\51\1\0\1\51\5\0\1\42"+
    "\1\52\1\42\1\44\1\41\1\42\1\52\1\45\1\0"+
    "\27\42\1\0\1\42\5\0\3\37\1\40\1\41\2\37"+
    "\2\0\1\37\1\53\25\37\1\0\1\37\5\0\3\37"+
    "\1\40\1\41\2\37\2\0\1\54\10\37\1\55\1\37"+
    "\1\56\4\37\1\57\6\37\1\0\1\37\5\0\3\37"+
    "\1\40\1\41\2\37\2\0\1\37\1\60\3\37\1\61"+
    "\1\37\1\62\4\37\1\63\12\37\1\0\1\37\5\0"+
    "\3\37\1\40\1\41\2\37\2\0\4\37\1\64\5\37"+
    "\1\65\14\37\1\0\1\37\5\0\3\37\1\40\1\41"+
    "\2\37\2\0\6\37\1\66\1\67\4\37\1\70\12\37"+
    "\1\0\1\37\5\0\3\37\1\40\1\41\2\37\2\0"+
    "\5\37\1\71\3\37\1\72\15\37\1\0\1\37\5\0"+
    "\3\37\1\40\1\41\2\37\2\0\10\37\1\73\16\37"+
    "\1\0\1\37\5\0\3\37\1\40\1\41\2\37\2\0"+
    "\3\37\1\74\16\37\1\75\4\37\1\0\1\37\5\0"+
    "\3\37\1\40\1\41\2\37\2\0\1\37\1\76\1\77"+
    "\3\37\1\100\20\37\1\0\1\37\5\0\3\37\1\40"+
    "\1\41\2\37\2\0\10\37\1\101\6\37\1\102\1\37"+
    "\1\103\5\37\1\0\1\37\5\0\3\37\1\40\1\41"+
    "\2\37\2\0\1\37\1\104\12\37\1\105\12\37\1\0"+
    "\1\37\5\0\3\37\1\40\1\41\2\37\2\0\1\37"+
    "\1\106\4\37\1\107\1\37\1\110\16\37\1\0\1\37"+
    "\5\0\3\37\1\40\1\41\2\37\2\0\3\37\1\111"+
    "\3\37\1\112\4\37\1\113\1\37\1\114\10\37\1\0"+
    "\1\37\5\0\3\37\1\40\1\41\2\37\2\0\3\37"+
    "\1\115\23\37\1\0\1\37\5\0\3\37\1\40\1\41"+
    "\2\37\2\0\3\37\1\116\23\37\1\0\1\37\1\36"+
    "\1\3\1\4\44\36\5\0\3\117\1\120\1\121\2\117"+
    "\2\0\27\117\1\0\1\117\5\0\4\120\1\0\2\120"+
    "\2\0\27\120\1\0\1\120\5\0\3\121\1\0\3\121"+
    "\2\0\27\121\1\0\1\121\5\0\3\122\1\123\1\121"+
    "\2\122\2\0\27\122\1\0\1\122\5\0\1\122\1\124"+
    "\1\122\1\123\1\121\1\122\1\124\1\45\1\0\27\122"+
    "\1\0\1\122\5\0\4\123\1\0\2\123\2\0\27\123"+
    "\1\0\1\123\6\0\1\125\4\0\1\125\40\0\3\126"+
    "\1\127\1\121\2\126\2\0\27\126\1\0\1\126\5\0"+
    "\4\127\1\0\2\127\2\0\27\127\1\0\1\127\5\0"+
    "\4\130\1\0\2\130\2\0\27\130\1\0\1\130\5\0"+
    "\3\131\1\130\1\121\2\131\2\0\27\131\1\0\1\131"+
    "\5\0\1\122\1\132\1\122\1\123\1\121\1\122\1\132"+
    "\1\45\1\0\27\122\1\0\1\122\5\0\3\117\1\120"+
    "\1\121\2\117\2\0\2\117\1\133\24\117\1\0\1\117"+
    "\5\0\3\117\1\120\1\121\2\117\2\0\1\117\1\134"+
    "\25\117\1\0\1\117\5\0\3\117\1\120\1\121\2\117"+
    "\2\0\1\117\1\135\25\117\1\0\1\117\5\0\3\117"+
    "\1\120\1\121\2\117\2\0\1\117\1\136\25\117\1\0"+
    "\1\117\5\0\3\117\1\120\1\121\2\117\2\0\3\117"+
    "\1\137\23\117\1\0\1\117\5\0\3\117\1\120\1\121"+
    "\2\117\2\0\15\117\1\140\11\117\1\0\1\117\5\0"+
    "\3\117\1\120\1\121\2\117\2\0\11\117\1\141\1\117"+
    "\1\142\5\117\1\143\1\144\4\117\1\0\1\117\5\0"+
    "\3\117\1\120\1\121\2\117\2\0\3\117\1\145\1\117"+
    "\1\146\21\117\1\0\1\117\5\0\3\117\1\120\1\121"+
    "\2\117\2\0\7\117\1\147\17\117\1\0\1\117\5\0"+
    "\3\117\1\120\1\121\2\117\2\0\21\117\1\150\5\117"+
    "\1\0\1\117\5\0\3\117\1\120\1\121\2\117\2\0"+
    "\14\117\1\151\12\117\1\0\1\117\5\0\3\117\1\120"+
    "\1\121\2\117\2\0\4\117\1\152\22\117\1\0\1\117"+
    "\5\0\3\117\1\120\1\121\2\117\2\0\7\117\1\153"+
    "\17\117\1\0\1\117\5\0\3\117\1\120\1\121\2\117"+
    "\2\0\11\117\1\154\15\117\1\0\1\117\5\0\3\117"+
    "\1\120\1\121\2\117\2\0\2\117\1\155\24\117\1\0"+
    "\1\117\5\0\3\117\1\120\1\121\2\117\2\0\2\117"+
    "\1\156\24\117\1\0\1\117\5\0\3\117\1\120\1\121"+
    "\2\117\2\0\3\117\1\157\2\117\1\160\20\117\1\0"+
    "\1\117\5\0\3\117\1\120\1\121\2\117\2\0\4\117"+
    "\1\161\4\117\1\162\15\117\1\0\1\117\5\0\3\117"+
    "\1\120\1\121\2\117\2\0\14\117\1\163\12\117\1\0"+
    "\1\117\5\0\3\117\1\120\1\121\2\117\2\0\14\117"+
    "\1\164\12\117\1\0\1\117\5\0\3\117\1\120\1\121"+
    "\2\117\2\0\13\117\1\165\13\117\1\0\1\117\5\0"+
    "\3\117\1\120\1\121\2\117\2\0\26\117\1\166\1\0"+
    "\1\117\5\0\3\117\1\120\1\121\2\117\2\0\4\117"+
    "\1\167\22\117\1\0\1\117\5\0\3\117\1\120\1\121"+
    "\2\117\2\0\17\117\1\170\7\117\1\0\1\117\5\0"+
    "\3\117\1\120\1\121\2\117\2\0\2\117\1\171\24\117"+
    "\1\0\1\117\5\0\3\117\1\120\1\121\2\117\2\0"+
    "\15\117\1\172\1\173\10\117\1\0\1\117\5\0\3\117"+
    "\1\120\1\121\2\117\2\0\4\117\1\174\22\117\1\0"+
    "\1\117\5\0\3\117\1\120\1\121\2\117\2\0\1\175"+
    "\26\117\1\0\1\176\5\0\3\117\1\120\1\121\2\117"+
    "\2\0\4\117\1\177\22\117\1\0\1\117\5\0\3\200"+
    "\1\201\1\202\2\200\2\0\27\200\1\0\1\200\5\0"+
    "\4\201\1\0\2\201\2\0\27\201\1\0\1\201\5\0"+
    "\3\202\1\0\3\202\2\0\27\202\1\0\1\202\5\0"+
    "\3\203\1\204\1\202\2\203\2\0\27\203\1\0\1\203"+
    "\5\0\4\204\1\0\2\204\2\0\27\204\1\0\1\204"+
    "\5\0\1\203\1\205\1\203\1\204\1\202\1\203\1\205"+
    "\1\45\1\0\27\203\1\0\1\203\5\0\3\206\1\207"+
    "\1\202\2\206\2\0\27\206\1\0\1\206\5\0\4\207"+
    "\1\0\2\207\2\0\27\207\1\0\1\207\5\0\4\210"+
    "\1\0\2\210\2\0\27\210\1\0\1\210\5\0\3\211"+
    "\1\210\1\202\2\211\2\0\27\211\1\0\1\211\5\0"+
    "\1\203\1\212\1\203\1\204\1\202\1\203\1\212\1\45"+
    "\1\0\27\203\1\0\1\203\5\0\3\200\1\201\1\202"+
    "\2\200\2\0\4\200\1\213\22\200\1\0\1\200\5\0"+
    "\3\200\1\201\1\202\2\200\2\0\2\200\1\214\24\200"+
    "\1\0\1\200\5\0\3\200\1\201\1\202\2\200\2\0"+
    "\2\200\1\215\24\200\1\0\1\200\5\0\3\200\1\201"+
    "\1\202\2\200\2\0\20\200\1\216\6\200\1\0\1\200"+
    "\5\0\3\200\1\201\1\202\2\200\2\0\16\200\1\217"+
    "\10\200\1\0\1\200\5\0\3\200\1\201\1\202\2\200"+
    "\2\0\2\200\1\220\24\200\1\0\1\200\5\0\3\200"+
    "\1\201\1\202\2\200\2\0\3\200\1\221\23\200\1\0"+
    "\1\200\5\0\3\200\1\201\1\202\2\200\2\0\11\200"+
    "\1\222\15\200\1\0\1\200\5\0\3\200\1\201\1\202"+
    "\2\200\2\0\6\200\1\223\20\200\1\0\1\200\5\0"+
    "\3\200\1\201\1\202\2\200\2\0\5\200\1\224\21\200"+
    "\1\0\1\200\5\0\3\200\1\201\1\202\2\200\2\0"+
    "\1\200\1\225\25\200\1\0\1\200\5\0\3\200\1\201"+
    "\1\202\2\200\2\0\4\200\1\226\22\200\1\0\1\200"+
    "\5\0\3\200\1\201\1\202\2\200\2\0\11\200\1\227"+
    "\15\200\1\0\1\200\5\0\3\200\1\201\1\202\2\200"+
    "\2\0\10\200\1\230\16\200\1\0\1\200\5\0\3\200"+
    "\1\201\1\202\2\200\2\0\3\200\1\231\23\200\1\0"+
    "\1\200\5\0\3\200\1\201\1\202\2\200\2\0\1\200"+
    "\1\232\25\200\1\0\1\200\5\0\3\200\1\201\1\202"+
    "\2\200\2\0\1\200\1\233\25\200\1\0\1\200\5\0"+
    "\3\200\1\201\1\202\2\200\2\0\15\200\1\234\11\200"+
    "\1\0\1\200\5\0\3\200\1\201\1\202\2\200\2\0"+
    "\22\200\1\235\4\200\1\0\1\200\5\0\3\200\1\201"+
    "\1\202\2\200\2\0\2\200\1\236\2\200\1\237\5\200"+
    "\1\240\11\200\1\241\1\242\1\0\1\200\5\0\3\200"+
    "\1\201\1\202\2\200\2\0\14\200\1\243\12\200\1\0"+
    "\1\200\5\0\3\200\1\201\1\202\2\200\2\0\12\200"+
    "\1\244\2\200\1\245\11\200\1\0\1\200\5\0\3\200"+
    "\1\201\1\202\2\200\2\0\5\200\1\246\21\200\1\0"+
    "\1\200\5\0\3\200\1\201\1\202\2\200\2\0\14\200"+
    "\1\247\12\200\1\0\1\200\5\0\3\200\1\201\1\202"+
    "\2\200\2\0\6\200\1\250\20\200\1\0\1\200\5\0"+
    "\3\200\1\201\1\202\2\200\2\0\6\200\1\251\20\200"+
    "\1\0\1\200\5\0\3\200\1\201\1\202\2\200\2\0"+
    "\1\200\1\252\25\200\1\0\1\200\5\0\3\200\1\201"+
    "\1\202\2\200\2\0\2\200\1\253\24\200\1\0\1\200"+
    "\5\0\3\200\1\201\1\202\2\200\2\0\1\200\1\254"+
    "\25\200\1\0\1\200\5\0\3\200\1\201\1\202\2\200"+
    "\2\0\14\200\1\255\12\200\1\0\1\200\5\0\3\200"+
    "\1\201\1\202\2\200\2\0\6\200\1\256\20\200\1\0"+
    "\1\200\5\0\3\200\1\201\1\202\2\200\2\0\3\200"+
    "\1\257\23\200\1\0\1\200\5\0\3\200\1\201\1\202"+
    "\2\200\2\0\14\200\1\260\12\200\1\0\1\200\5\0"+
    "\3\261\1\262\1\263\2\261\2\0\27\261\1\0\1\261"+
    "\5\0\4\262\1\0\2\262\2\0\27\262\1\0\1\262"+
    "\5\0\3\263\1\0\3\263\2\0\27\263\1\0\1\263"+
    "\5\0\3\264\1\265\1\263\2\264\2\0\27\264\1\0"+
    "\1\264\5\0\4\265\1\0\2\265\2\0\27\265\1\0"+
    "\1\265\5\0\1\264\1\266\1\264\1\265\1\263\1\264"+
    "\1\266\1\45\1\0\27\264\1\0\1\264\5\0\3\267"+
    "\1\270\1\263\2\267\2\0\27\267\1\0\1\267\5\0"+
    "\4\270\1\0\2\270\2\0\27\270\1\0\1\270\5\0"+
    "\4\271\1\0\2\271\2\0\27\271\1\0\1\271\5\0"+
    "\3\272\1\271\1\263\2\272\2\0\27\272\1\0\1\272"+
    "\5\0\1\264\1\273\1\264\1\265\1\263\1\264\1\273"+
    "\1\45\1\0\27\264\1\0\1\264\5\0\3\261\1\262"+
    "\1\263\2\261\2\0\20\261\1\274\6\261\1\0\1\261"+
    "\5\0\3\261\1\262\1\263\2\261\2\0\14\261\1\275"+
    "\12\261\1\0\1\261\5\0\3\261\1\262\1\263\2\261"+
    "\2\0\5\261\1\276\21\261\1\0\1\261\5\0\3\261"+
    "\1\262\1\263\2\261\2\0\6\261\1\277\20\261\1\0"+
    "\1\261\5\0\3\261\1\262\1\263\2\261\2\0\6\261"+
    "\1\300\20\261\1\0\1\261\5\0\3\261\1\262\1\263"+
    "\2\261\2\0\11\261\1\301\15\261\1\0\1\261\5\0"+
    "\3\261\1\262\1\263\2\261\2\0\6\261\1\302\20\261"+
    "\1\0\1\261\5\0\3\261\1\262\1\263\2\261\2\0"+
    "\4\261\1\303\22\261\1\0\1\261\5\0\3\261\1\262"+
    "\1\263\2\261\2\0\10\261\1\304\16\261\1\0\1\261"+
    "\5\0\3\261\1\262\1\263\2\261\2\0\11\261\1\305"+
    "\15\261\1\0\1\261\5\0\3\261\1\262\1\263\2\261"+
    "\2\0\2\261\1\306\24\261\1\0\1\261\5\0\3\261"+
    "\1\262\1\263\2\261\2\0\11\261\1\307\15\261\1\0"+
    "\1\261\5\0\3\261\1\262\1\263\2\261\2\0\15\261"+
    "\1\310\11\261\1\0\1\261\5\0\3\261\1\262\1\263"+
    "\2\261\2\0\3\261\1\311\16\261\1\312\4\261\1\0"+
    "\1\261\5\0\3\261\1\262\1\263\2\261\2\0\14\261"+
    "\1\313\12\261\1\0\1\261\5\0\3\261\1\262\1\263"+
    "\2\261\2\0\7\261\1\314\17\261\1\0\1\261\5\0"+
    "\3\261\1\262\1\263\2\261\2\0\7\261\1\315\17\261"+
    "\1\0\1\261\5\0\3\261\1\262\1\263\2\261\2\0"+
    "\6\261\1\316\1\261\1\317\16\261\1\0\1\261\5\0"+
    "\3\261\1\262\1\263\2\261\2\0\6\261\1\320\20\261"+
    "\1\0\1\261\5\0\3\261\1\262\1\263\2\261\2\0"+
    "\26\261\1\321\1\0\1\261\5\0\3\261\1\262\1\263"+
    "\2\261\2\0\4\261\1\322\22\261\1\0\1\261\5\0"+
    "\3\261\1\262\1\263\2\261\2\0\3\261\1\323\23\261"+
    "\1\0\1\261\5\0\3\261\1\262\1\263\2\261\2\0"+
    "\14\261\1\324\12\261\1\0\1\261\5\0\3\261\1\262"+
    "\1\263\2\261\2\0\7\261\1\325\17\261\1\0\1\261"+
    "\5\0\3\261\1\262\1\263\2\261\2\0\2\261\1\326"+
    "\24\261\1\0\1\261\5\0\3\261\1\262\1\263\2\261"+
    "\2\0\2\261\1\327\24\261\1\0\1\261\5\0\3\261"+
    "\1\262\1\263\2\261\2\0\2\261\1\330\16\261\1\331"+
    "\5\261\1\0\1\261\5\0\3\261\1\262\1\263\2\261"+
    "\2\0\10\261\1\332\16\261\1\0\1\261\5\0\3\261"+
    "\1\262\1\263\2\261\2\0\1\261\1\333\25\261\1\0"+
    "\1\261\5\0\3\261\1\262\1\263\2\261\2\0\10\261"+
    "\1\334\16\261\1\0\1\261\5\0\3\261\1\262\1\263"+
    "\2\261\2\0\21\261\1\335\5\261\1\0\1\261\5\0"+
    "\3\261\1\262\1\263\2\261\2\0\2\261\1\336\24\261"+
    "\1\0\1\261\5\0\3\337\1\340\1\341\2\337\2\0"+
    "\27\337\1\0\1\337\5\0\4\340\1\0\2\340\2\0"+
    "\27\340\1\0\1\340\5\0\3\341\1\0\3\341\2\0"+
    "\27\341\1\0\1\341\5\0\3\342\1\343\1\341\2\342"+
    "\2\0\27\342\1\0\1\342\5\0\4\343\1\0\2\343"+
    "\2\0\27\343\1\0\1\343\5\0\1\342\1\344\1\342"+
    "\1\343\1\341\1\342\1\344\1\45\1\0\27\342\1\0"+
    "\1\342\5\0\3\345\1\346\1\341\2\345\2\0\27\345"+
    "\1\0\1\345\5\0\4\346\1\0\2\346\2\0\27\346"+
    "\1\0\1\346\5\0\4\347\1\0\2\347\2\0\27\347"+
    "\1\0\1\347\5\0\3\350\1\347\1\341\2\350\2\0"+
    "\27\350\1\0\1\350\5\0\1\342\1\351\1\342\1\343"+
    "\1\341\1\342\1\351\1\45\1\0\27\342\1\0\1\342"+
    "\5\0\3\337\1\340\1\341\2\337\2\0\1\337\1\352"+
    "\25\337\1\0\1\337\5\0\3\337\1\340\1\341\2\337"+
    "\2\0\5\337\1\353\21\337\1\0\1\337\5\0\3\337"+
    "\1\340\1\341\2\337\2\0\7\337\1\354\17\337\1\0"+
    "\1\337\5\0\3\337\1\340\1\341\2\337\2\0\5\337"+
    "\1\355\21\337\1\0\1\337\5\0\3\337\1\340\1\341"+
    "\2\337\2\0\14\337\1\356\12\337\1\0\1\337\5\0"+
    "\3\337\1\340\1\341\2\337\2\0\22\337\1\357\4\337"+
    "\1\0\1\337\5\0\3\337\1\340\1\341\2\337\2\0"+
    "\14\337\1\360\12\337\1\0\1\337\5\0\3\337\1\340"+
    "\1\341\2\337\2\0\1\337\1\361\25\337\1\0\1\337"+
    "\5\0\3\337\1\340\1\341\2\337\2\0\6\337\1\362"+
    "\20\337\1\0\1\337\5\0\3\337\1\340\1\341\2\337"+
    "\2\0\1\337\1\363\25\337\1\0\1\337\5\0\3\337"+
    "\1\340\1\341\2\337\2\0\6\337\1\364\20\337\1\0"+
    "\1\337\5\0\3\337\1\340\1\341\2\337\2\0\20\337"+
    "\1\365\6\337\1\0\1\337\5\0\3\337\1\340\1\341"+
    "\2\337\2\0\14\337\1\366\12\337\1\0\1\337\5\0"+
    "\3\337\1\340\1\341\2\337\2\0\2\337\1\367\24\337"+
    "\1\0\1\337\5\0\3\337\1\340\1\341\2\337\2\0"+
    "\5\337\1\370\21\337\1\0\1\337\5\0\3\337\1\340"+
    "\1\341\2\337\2\0\15\337\1\371\11\337\1\0\1\337"+
    "\5\0\3\337\1\340\1\341\2\337\2\0\10\337\1\372"+
    "\16\337\1\0\1\337\5\0\3\337\1\340\1\341\2\337"+
    "\2\0\21\337\1\373\5\337\1\0\1\337\5\0\3\337"+
    "\1\340\1\341\2\337\2\0\5\337\1\374\21\337\1\0"+
    "\1\337\5\0\3\337\1\340\1\341\2\337\2\0\2\337"+
    "\1\375\24\337\1\0\1\337\5\0\3\337\1\340\1\341"+
    "\2\337\2\0\4\337\1\376\22\337\1\0\1\337\5\0"+
    "\3\337\1\340\1\341\2\337\2\0\11\337\1\377\15\337"+
    "\1\0\1\337\5\0\3\337\1\340\1\341\2\337\2\0"+
    "\1\337\1\u0100\25\337\1\0\1\337\5\0\3\337\1\340"+
    "\1\341\2\337\2\0\24\337\1\u0101\2\337\1\0\1\337"+
    "\5\0\3\337\1\340\1\341\2\337\2\0\24\337\1\u0102"+
    "\2\337\1\0\1\337\5\0\3\337\1\340\1\341\2\337"+
    "\2\0\1\337\1\u0103\25\337\1\0\1\337\5\0\3\337"+
    "\1\340\1\341\2\337\2\0\13\337\1\u0104\13\337\1\0"+
    "\1\337\5\0\3\337\1\340\1\341\2\337\2\0\1\337"+
    "\1\u0105\25\337\1\0\1\337\5\0\3\337\1\340\1\341"+
    "\2\337\2\0\3\337\1\u0106\23\337\1\0\1\337\5\0"+
    "\3\337\1\340\1\341\2\337\2\0\14\337\1\u0107\12\337"+
    "\1\0\1\337\5\0\3\u0108\1\u0109\1\u010a\2\u0108\2\0"+
    "\27\u0108\1\0\1\u0108\5\0\4\u0109\1\0\2\u0109\2\0"+
    "\27\u0109\1\0\1\u0109\5\0\3\u010a\1\0\3\u010a\2\0"+
    "\27\u010a\1\0\1\u010a\5\0\3\u010b\1\u010c\1\u010a\2\u010b"+
    "\2\0\27\u010b\1\0\1\u010b\5\0\4\u010c\1\0\2\u010c"+
    "\2\0\27\u010c\1\0\1\u010c\5\0\1\u010b\1\u010d\1\u010b"+
    "\1\u010c\1\u010a\1\u010b\1\u010d\1\45\1\0\27\u010b\1\0"+
    "\1\u010b\5\0\3\u010e\1\u010f\1\u010a\2\u010e\2\0\27\u010e"+
    "\1\0\1\u010e\5\0\4\u010f\1\0\2\u010f\2\0\27\u010f"+
    "\1\0\1\u010f\5\0\4\u0110\1\0\2\u0110\2\0\27\u0110"+
    "\1\0\1\u0110\5\0\3\u0111\1\u0110\1\u010a\2\u0111\2\0"+
    "\27\u0111\1\0\1\u0111\5\0\1\u010b\1\u0112\1\u010b\1\u010c"+
    "\1\u010a\1\u010b\1\u0112\1\45\1\0\27\u010b\1\0\1\u010b"+
    "\5\0\3\u0108\1\u0109\1\u010a\2\u0108\2\0\14\u0108\1\u0113"+
    "\12\u0108\1\0\1\u0108\5\0\3\u0108\1\u0109\1\u010a\2\u0108"+
    "\2\0\1\u0108\1\u0114\25\u0108\1\0\1\u0108\5\0\3\u0108"+
    "\1\u0109\1\u010a\2\u0108\2\0\14\u0108\1\u0115\12\u0108\1\0"+
    "\1\u0108\5\0\3\u0108\1\u0109\1\u010a\2\u0108\2\0\14\u0108"+
    "\1\u0116\12\u0108\1\0\1\u0108\5\0\3\u0108\1\u0109\1\u010a"+
    "\2\u0108\2\0\21\u0108\1\u0117\5\u0108\1\0\1\u0108\5\0"+
    "\3\u0108\1\u0109\1\u010a\2\u0108\2\0\11\u0108\1\u0118\15\u0108"+
    "\1\0\1\u0108\5\0\3\u0108\1\u0109\1\u010a\2\u0108\2\0"+
    "\24\u0108\1\u0119\2\u0108\1\0\1\u0108\5\0\3\u0108\1\u0109"+
    "\1\u010a\2\u0108\2\0\2\u0108\1\u011a\24\u0108\1\0\1\u0108"+
    "\5\0\3\u0108\1\u0109\1\u010a\2\u0108\2\0\6\u0108\1\u011b"+
    "\20\u0108\1\0\1\u0108\5\0\3\u0108\1\u0109\1\u010a\2\u0108"+
    "\2\0\11\u0108\1\u011c\15\u0108\1\0\1\u0108\5\0\3\u0108"+
    "\1\u0109\1\u010a\2\u0108\2\0\16\u0108\1\u011d\10\u0108\1\0"+
    "\1\u0108\5\0\3\u0108\1\u0109\1\u010a\2\u0108\2\0\6\u0108"+
    "\1\u011e\20\u0108\1\0\1\u0108\5\0\3\u0108\1\u0109\1\u010a"+
    "\2\u0108\2\0\3\u0108\1\u011f\23\u0108\1\0\1\u0108\5\0"+
    "\3\u0108\1\u0109\1\u010a\2\u0108\2\0\11\u0108\1\u0120\15\u0108"+
    "\1\0\1\u0108\5\0\3\u0108\1\u0109\1\u010a\2\u0108\2\0"+
    "\1\u0108\1\u0121\25\u0108\1\0\1\u0108\5\0\3\u0108\1\u0109"+
    "\1\u010a\2\u0108\2\0\7\u0108\1\u0122\17\u0108\1\0\1\u0108"+
    "\5\0\3\u0108\1\u0109\1\u010a\2\u0108\2\0\7\u0108\1\u0123"+
    "\17\u0108\1\0\1\u0108\5\0\3\u0108\1\u0109\1\u010a\2\u0108"+
    "\2\0\13\u0108\1\u0124\13\u0108\1\0\1\u0108\5\0\3\u0108"+
    "\1\u0109\1\u010a\2\u0108\2\0\1\u0108\1\u0125\25\u0108\1\0"+
    "\1\u0108\5\0\3\u0108\1\u0109\1\u010a\2\u0108\2\0\13\u0108"+
    "\1\u0126\13\u0108\1\0\1\u0108\5\0\3\u0108\1\u0109\1\u010a"+
    "\2\u0108\2\0\6\u0108\1\u0127\20\u0108\1\0\1\u0108\5\0"+
    "\3\u0108\1\u0109\1\u010a\2\u0108\2\0\4\u0108\1\u0128\22\u0108"+
    "\1\0\1\u0108\5\0\3\u0129\1\u012a\1\u012b\2\u0129\2\0"+
    "\27\u0129\1\0\1\u0129\5\0\4\u012a\1\0\2\u012a\2\0"+
    "\27\u012a\1\0\1\u012a\5\0\3\u012b\1\0\3\u012b\2\0"+
    "\27\u012b\1\0\1\u012b\5\0\3\u012c\1\u012d\1\u012b\2\u012c"+
    "\2\0\27\u012c\1\0\1\u012c\5\0\4\u012d\1\0\2\u012d"+
    "\2\0\27\u012d\1\0\1\u012d\5\0\1\u012c\1\u012e\1\u012c"+
    "\1\u012d\1\u012b\1\u012c\1\u012e\1\45\1\0\27\u012c\1\0"+
    "\1\u012c\5\0\3\u012f\1\u0130\1\u012b\2\u012f\2\0\27\u012f"+
    "\1\0\1\u012f\5\0\4\u0130\1\0\2\u0130\2\0\27\u0130"+
    "\1\0\1\u0130\5\0\4\u0131\1\0\2\u0131\2\0\27\u0131"+
    "\1\0\1\u0131\5\0\3\u0132\1\u0131\1\u012b\2\u0132\2\0"+
    "\27\u0132\1\0\1\u0132\5\0\1\u012c\1\u0133\1\u012c\1\u012d"+
    "\1\u012b\1\u012c\1\u0133\1\45\1\0\27\u012c\1\0\1\u012c"+
    "\5\0\3\u0129\1\u012a\1\u012b\2\u0129\2\0\11\u0129\1\u0134"+
    "\15\u0129\1\0\1\u0129\5\0\3\u0129\1\u012a\1\u012b\2\u0129"+
    "\2\0\22\u0129\1\u0135\4\u0129\1\0\1\u0129\5\0\3\u0129"+
    "\1\u012a\1\u012b\2\u0129\2\0\22\u0129\1\u0136\4\u0129\1\0"+
    "\1\u0129\5\0\3\u0129\1\u012a\1\u012b\2\u0129\2\0\1\u0129"+
    "\1\u0137\25\u0129\1\0\1\u0129\5\0\3\u0129\1\u012a\1\u012b"+
    "\2\u0129\2\0\27\u0129\1\u0138\1\u0129\5\0\3\u0129\1\u012a"+
    "\1\u012b\2\u0129\2\0\6\u0129\1\u0139\20\u0129\1\0\1\u0129"+
    "\5\0\3\u0129\1\u012a\1\u012b\2\u0129\2\0\7\u0129\1\u013a"+
    "\17\u0129\1\0\1\u0129\5\0\3\u0129\1\u012a\1\u012b\2\u0129"+
    "\2\0\14\u0129\1\u013b\12\u0129\1\0\1\u0129\5\0\3\u0129"+
    "\1\u012a\1\u012b\2\u0129\2\0\6\u0129\1\u013c\20\u0129\1\0"+
    "\1\u0129\5\0\3\u0129\1\u012a\1\u012b\2\u0129\2\0\6\u0129"+
    "\1\u013d\20\u0129\1\0\1\u0129\5\0\3\u0129\1\u012a\1\u012b"+
    "\2\u0129\2\0\2\u0129\1\u013e\24\u0129\1\0\1\u0129\5\0"+
    "\3\u0129\1\u012a\1\u012b\2\u0129\2\0\1\u0129\1\u013f\25\u0129"+
    "\1\0\1\u0129\5\0\3\u0129\1\u012a\1\u012b\2\u0129\2\0"+
    "\6\u0129\1\u0140\20\u0129\1\0\1\u0129\5\0\3\u0129\1\u012a"+
    "\1\u012b\2\u0129\2\0\14\u0129\1\u0141\12\u0129\1\0\1\u0129"+
    "\5\0\3\u0129\1\u012a\1\u012b\2\u0129\2\0\14\u0129\1\u0142"+
    "\12\u0129\1\0\1\u0129\5\0\3\u0129\1\u012a\1\u012b\2\u0129"+
    "\2\0\3\u0129\1\u0143\23\u0129\1\0\1\u0129\5\0\3\u0129"+
    "\1\u012a\1\u012b\2\u0129\2\0\4\u0129\1\u0144\22\u0129\1\0"+
    "\1\u0129\5\0\3\u0129\1\u012a\1\u012b\2\u0129\2\0\3\u0129"+
    "\1\u0145\23\u0129\1\0\1\u0129\5\0\3\u0129\1\u012a\1\u012b"+
    "\2\u0129\2\0\4\u0129\1\u0146\22\u0129\1\0\1\u0129\5\0"+
    "\3\u0129\1\u012a\1\u012b\2\u0129\2\0\5\u0129\1\u0147\21\u0129"+
    "\1\0\1\u0129\5\0\3\u0148\1\u0149\1\u014a\2\u0148\2\0"+
    "\27\u0148\1\0\1\u0148\5\0\4\u0149\1\0\2\u0149\2\0"+
    "\27\u0149\1\0\1\u0149\5\0\3\u014a\1\0\3\u014a\2\0"+
    "\27\u014a\1\0\1\u014a\5\0\3\u014b\1\u014c\1\u014a\2\u014b"+
    "\2\0\27\u014b\1\0\1\u014b\5\0\4\u014c\1\0\2\u014c"+
    "\2\0\27\u014c\1\0\1\u014c\5\0\1\u014b\1\u014d\1\u014b"+
    "\1\u014c\1\u014a\1\u014b\1\u014d\1\45\1\0\27\u014b\1\0"+
    "\1\u014b\5\0\3\u014e\1\u014f\1\u014a\2\u014e\2\0\27\u014e"+
    "\1\0\1\u014e\5\0\4\u014f\1\0\2\u014f\2\0\27\u014f"+
    "\1\0\1\u014f\5\0\4\u0150\1\0\2\u0150\2\0\27\u0150"+
    "\1\0\1\u0150\5\0\3\u0151\1\u0150\1\u014a\2\u0151\2\0"+
    "\27\u0151\1\0\1\u0151\5\0\1\u014b\1\u0152\1\u014b\1\u014c"+
    "\1\u014a\1\u014b\1\u0152\1\45\1\0\27\u014b\1\0\1\u014b"+
    "\5\0\3\u0148\1\u0149\1\u014a\2\u0148\2\0\6\u0148\1\u0153"+
    "\20\u0148\1\0\1\u0148\5\0\3\u0148\1\u0149\1\u014a\2\u0148"+
    "\2\0\2\u0148\1\u0154\24\u0148\1\0\1\u0148\5\0\3\u0148"+
    "\1\u0149\1\u014a\2\u0148\2\0\14\u0148\1\u0155\12\u0148\1\0"+
    "\1\u0148\5\0\3\u0148\1\u0149\1\u014a\2\u0148\2\0\2\u0148"+
    "\1\u0156\24\u0148\1\0\1\u0148\5\0\3\u0148\1\u0149\1\u014a"+
    "\2\u0148\2\0\3\u0148\1\u0157\23\u0148\1\0\1\u0148\5\0"+
    "\3\u0148\1\u0149\1\u014a\2\u0148\2\0\5\u0148\1\u0158\21\u0148"+
    "\1\0\1\u0148\5\0\3\u0148\1\u0149\1\u014a\2\u0148\2\0"+
    "\10\u0148\1\u0159\16\u0148\1\0\1\u0148\5\0\3\u0148\1\u0149"+
    "\1\u014a\2\u0148\2\0\27\u0148\1\u015a\1\u0148\5\0\3\u0148"+
    "\1\u0149\1\u014a\2\u0148\2\0\27\u0148\1\u015b\1\u0148\5\0"+
    "\3\u0148\1\u0149\1\u014a\2\u0148\2\0\20\u0148\1\u015c\6\u0148"+
    "\1\0\1\u0148\5\0\3\u0148\1\u0149\1\u014a\2\u0148\2\0"+
    "\11\u0148\1\u015d\15\u0148\1\0\1\u0148\5\0\3\u0148\1\u0149"+
    "\1\u014a\2\u0148\2\0\20\u0148\1\u015e\6\u0148\1\0\1\u0148"+
    "\5\0\3\u0148\1\u0149\1\u014a\2\u0148\2\0\3\u0148\1\u015f"+
    "\23\u0148\1\0\1\u0148\5\0\4\u0160\1\u0161\2\u0160\2\0"+
    "\27\u0160\1\0\1\u0160\5\0\4\u0160\1\0\2\u0160\2\0"+
    "\27\u0160\1\0\1\u0160\5\0\3\u0161\1\0\3\u0161\2\0"+
    "\27\u0161\1\0\1\u0161\5\0\4\u0162\1\u0161\2\u0162\2\0"+
    "\27\u0162\1\0\1\u0162\5\0\4\u0162\1\0\2\u0162\2\0"+
    "\27\u0162\1\0\1\u0162\5\0\1\u0162\1\u0163\2\u0162\1\u0161"+
    "\1\u0162\1\u0163\1\45\1\0\27\u0162\1\0\1\u0162\5\0"+
    "\4\u0164\1\u0161\2\u0164\2\0\27\u0164\1\0\1\u0164\5\0"+
    "\4\u0164\1\0\2\u0164\2\0\27\u0164\1\0\1\u0164\5\0"+
    "\4\u0165\1\0\2\u0165\2\0\27\u0165\1\0\1\u0165\5\0"+
    "\4\u0165\1\u0161\2\u0165\2\0\27\u0165\1\0\1\u0165\5\0"+
    "\1\u0162\1\u0166\2\u0162\1\u0161\1\u0162\1\u0166\1\45\1\0"+
    "\27\u0162\1\0\1\u0162\5\0\4\u0160\1\u0161\2\u0160\2\0"+
    "\2\u0160\1\u0167\24\u0160\1\0\1\u0160\5\0\4\u0160\1\u0161"+
    "\2\u0160\2\0\1\u0160\1\u0168\25\u0160\1\0\1\u0160\5\0"+
    "\4\u0160\1\u0161\2\u0160\2\0\11\u0160\1\u0169\15\u0160\1\0"+
    "\1\u0160\5\0\4\u0160\1\u0161\2\u0160\2\0\14\u0160\1\u016a"+
    "\12\u0160\1\0\1\u0160\5\0\4\u0160\1\u0161\2\u0160\2\0"+
    "\23\u0160\1\u016b\3\u0160\1\0\1\u0160\5\0\4\u0160\1\u0161"+
    "\2\u0160\2\0\1\u0160\1\u016c\25\u0160\1\0\1\u0160\5\0"+
    "\4\u0160\1\u0161\2\u0160\2\0\1\u0160\1\u016d\25\u0160\1\0"+
    "\1\u0160\5\0\4\u0160\1\u0161\2\u0160\2\0\1\u0160\1\u016e"+
    "\25\u0160\1\0\1\u0160\5\0\4\u016f\1\0\2\u016f\2\0"+
    "\27\u016f\1\0\1\u016f\6\0\1\u0163\4\0\1\u0163\1\45"+
    "\40\0\1\u0170\4\0\1\u0170\1\45\37\0\4\u016f\1\0"+
    "\2\u016f\2\0\11\u016f\1\u0171\15\u016f\1\0\1\u016f\5\0"+
    "\4\u016f\1\0\2\u016f\2\0\22\u016f\1\u0172\4\u016f\1\0"+
    "\1\u016f\5\0\4\u016f\1\0\2\u016f\2\0\7\u016f\1\u0173"+
    "\17\u016f\1\0\1\u016f\5\0\4\u016f\1\0\2\u016f\2\0"+
    "\2\u016f\1\u0174\24\u016f\1\0\1\u016f\5\0\4\u016f\1\0"+
    "\2\u016f\2\0\1\u016f\1\u0175\25\u016f\1\0\1\u016f\5\0"+
    "\4\u016f\1\0\2\u016f\2\0\13\u016f\1\u0176\13\u016f\1\0"+
    "\1\u016f\5\0\4\u016f\1\0\2\u016f\2\0\10\u016f\1\u0177"+
    "\16\u016f\1\0\1\u016f\5\0\4\u016f\1\0\2\u016f\2\0"+
    "\7\u016f\1\u0178\17\u016f\1\0\1\u016f\5\0\4\u016f\1\0"+
    "\2\u016f\2\0\1\u016f\1\u0179\25\u016f\1\0\1\u016f\5\0"+
    "\4\u016f\1\0\2\u016f\2\0\12\u016f\1\u017a\14\u016f\1\0"+
    "\1\u016f\5\0\4\u016f\1\0\2\u016f\2\0\22\u016f\1\u017b"+
    "\4\u016f\1\0\1\u016f\5\0\4\u016f\1\0\2\u016f\2\0"+
    "\3\u016f\1\u017c\23\u016f\1\0\1\u016f\5\0\4\u016f\1\0"+
    "\2\u016f\2\0\10\u016f\1\u017d\16\u016f\1\0\1\u016f\5\0"+
    "\4\u016f\1\0\2\u016f\2\0\12\u016f\1\u017e\14\u016f\1\0"+
    "\1\u016f\5\0\4\u016f\1\0\2\u016f\2\0\1\u016f\1\u017f"+
    "\25\u016f\1\0\1\u016f\5\0\4\u016f\1\0\2\u016f\2\0"+
    "\1\u016f\1\u0180\25\u016f\1\0\1\u016f\5\0\4\u016f\1\0"+
    "\2\u016f\2\0\20\u016f\1\u0181\6\u016f\1\0\1\u016f\5\0"+
    "\4\u016f\1\0\2\u016f\2\0\1\u016f\1\u0182\25\u016f\1\0"+
    "\1\u016f\5\0\4\u016f\1\0\2\u016f\2\0\1\u016f\1\u0183"+
    "\25\u016f\1\0\1\u016f";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12675];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\10\1\1\11\27\1\1\0"+
    "\u0112\1\1\11\41\1\2\11\5\1\2\11\1\1\2\11"+
    "\12\1\1\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public Object lexeme; //Para almacenar tokens de tipo String, Boolean, Integer y Float
    public int currentToken; //Para obtener el token actual sin avanzar el parseo
    public String errorMessage; //Para obtener los errores
    public Boolean lexerError = false; //Para identificar si el error fue léxico

    public String getErrorMessage() {
        return this.errorMessage;
    }

    public Boolean isLexerError() {
        return lexerError;
    }

    public int getCurrentToken() {
        return this.currentToken;
    }

    public Object getSemantic() {
        return this.lexeme;
    }

    public int getNextToken() {
        try {
            Integer token = yylex();
            if (token == null) {
                currentToken = ENDINPUT;
                return currentToken;
            }
            return token;
        } catch(IOException ex) {
            ex.printStackTrace();
            return -1;
        }
    }

    public int getCurrentLine() {
        return yyline;
    }

    public int getCurrentColumn() {
        return yycolumn;
    }

    public int getLine() {
        return yyline;
    }

    public int getColumn() {
        return yycolumn;
    }

    public int prepare(int token) {
        lexeme = yytext();
        currentToken = token;
        return token;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Integer yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 71: 
          { return prepare(APARECETORTUGA);
          }
        case 72: break;
        case 31: 
          { return prepare(INIC);
          }
        case 73: break;
        case 29: 
          { return prepare(FIN);
          }
        case 74: break;
        case 15: 
          { return prepare(RC);
          }
        case 75: break;
        case 1: 
          { // token desconocido
    lexeme = yytext();
    errorMessage = "Simbolo desconocido <" + lexeme + ">";
    lexerError = true;
    return error;
          }
        case 76: break;
        case 32: 
          { return prepare(PARA);
          }
        case 77: break;
        case 14: 
          { return prepare(AT);
          }
        case 78: break;
        case 35: 
          { return prepare(SUMA);
          }
        case 79: break;
        case 7: 
          { return prepare(O);
          }
        case 80: break;
        case 49: 
          { return prepare(ESPERA);
          }
        case 81: break;
        case 66: 
          { return prepare(RAIZCUADRADA);
          }
        case 82: break;
        case 50: 
          { return prepare(PRIMERO);
          }
        case 83: break;
        case 68: 
          { return prepare(GIRAIZQUIERDA);
          }
        case 84: break;
        case 45: 
          { return prepare(CENTRO);
          }
        case 85: break;
        case 41: 
          { return prepare(MENOS);
          }
        case 86: break;
        case 18: 
          { return prepare(UL);
          }
        case 87: break;
        case 55: 
          { return prepare(PONRUMBO);
          }
        case 88: break;
        case 48: 
          { return prepare(ELEGIR);
          }
        case 89: break;
        case 9: 
          { return prepare(IDENTIFIER);
          }
        case 90: break;
        case 63: 
          { return prepare(SUBELAPIZ);
          }
        case 91: break;
        case 39: 
          { return prepare(PONCL);
          }
        case 92: break;
        case 36: 
          { return prepare(SENO);
          }
        case 93: break;
        case 58: 
          { return prepare(DIVISION);
          }
        case 94: break;
        case 56: 
          { return prepare(POTENCIA);
          }
        case 95: break;
        case 52: 
          { return prepare(REDONDEA);
          }
        case 96: break;
        case 4: 
          { lexeme = yytext();
    errorMessage = "El identificador <" + lexeme + "> supera el tamaño máximo de 10 carácteres" ;
    lexerError = true;
    return error;
          }
        case 97: break;
        case 64: 
          { return prepare(DIFERENCIA);
          }
        case 98: break;
        case 67: 
          { return prepare(OCULTATORTUGA);
          }
        case 99: break;
        case 2: 
          { /* Ignore */
          }
        case 100: break;
        case 38: 
          { return prepare(RESTO);
          }
        case 101: break;
        case 11: 
          { lexeme = yytext();
    errorMessage = "El identificador <" + lexeme + "> no puede iniciar con mayuscula";
    lexerError = true;
    return error;
          }
        case 102: break;
        case 43: 
          { return prepare(REPITE);
          }
        case 103: break;
        case 40: 
          { return prepare(PONXY);
          }
        case 104: break;
        case 20: 
          { return prepare(GD);
          }
        case 105: break;
        case 21: 
          { return prepare(BL);
          }
        case 106: break;
        case 53: 
          { return prepare(IGUALES);
          }
        case 107: break;
        case 6: 
          { lexeme = yytext();
    errorMessage = "Identificador mal definido <" + lexeme + ">";
    lexerError = true;
    return error;
          }
        case 108: break;
        case 26: 
          { return prepare(INC);
          }
        case 109: break;
        case 10: 
          { lexeme = yytext();
    errorMessage = "El identificador <" + lexeme + "> no puede iniciar con numeros";
    lexerError = true;
    return error;
          }
        case 110: break;
        case 30: 
          { return prepare(AZAR);
          }
        case 111: break;
        case 23: 
          { return prepare(SB);
          }
        case 112: break;
        case 69: 
          { return prepare(PONCOLORLAPIZ);
          }
        case 113: break;
        case 70: 
          { return prepare(BORRAPANTALLA);
          }
        case 114: break;
        case 59: 
          { return prepare(RETROCEDE);
          }
        case 115: break;
        case 47: 
          { return prepare(PONPOS);
          }
        case 116: break;
        case 44: 
          { return prepare(CUENTA);
          }
        case 117: break;
        case 61: 
          { return prepare(MENORQUE);
          }
        case 118: break;
        case 65: 
          { return prepare(GIRADERECHA);
          }
        case 119: break;
        case 54: 
          { return prepare(PRODUCTO);
          }
        case 120: break;
        case 46: 
          { return prepare(ULTIMO);
          }
        case 121: break;
        case 27: 
          { return prepare(COS);
          }
        case 122: break;
        case 51: 
          { return prepare(EJECUTA);
          }
        case 123: break;
        case 22: 
          { return prepare(SI);
          }
        case 124: break;
        case 5: 
          { String value = yytext();
    Integer intValue = Integer.parseInt(value);
    lexeme = intValue;
    currentToken = INTEGER;
    return currentToken;
          }
        case 125: break;
        case 12: 
          { lexeme = yytext();
    errorMessage = "El identificador <" + lexeme + "> no puede iniciar con simbolos";
    lexerError = true;
    return error;
          }
        case 126: break;
        case 62: 
          { return prepare(BAJALAPIZ);
          }
        case 127: break;
        case 28: 
          { return prepare(SEN);
          }
        case 128: break;
        case 16: 
          { return prepare(RE);
          }
        case 129: break;
        case 57: 
          { return prepare(ELEMENTO);
          }
        case 130: break;
        case 60: 
          { return prepare(MAYORQUE);
          }
        case 131: break;
        case 19: 
          { return prepare(GI);
          }
        case 132: break;
        case 34: 
          { return prepare(PONY);
          }
        case 133: break;
        case 17: 
          { return prepare(OT);
          }
        case 134: break;
        case 13: 
          { return prepare(AV);
          }
        case 135: break;
        case 25: 
          { return prepare(VAR);
          }
        case 136: break;
        case 37: 
          { return prepare(RUMBO);
          }
        case 137: break;
        case 42: 
          { return prepare(AVANZA);
          }
        case 138: break;
        case 24: 
          { String value = yytext();
    Float floatValue = Float.parseFloat(value);
    lexeme = floatValue;
    currentToken = FLOAT;
    return currentToken;
          }
        case 139: break;
        case 33: 
          { return prepare(PONX);
          }
        case 140: break;
        case 3: 
          { String token = yytext();
    lexeme = token;
    char tokenValue = token.charAt(0);
    currentToken = tokenValue;
    return currentToken;
          }
        case 141: break;
        case 8: 
          { return prepare(Y);
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
