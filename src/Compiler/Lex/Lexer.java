/* The following code was generated by JFlex 1.4.3 on 12/7/20 18:10 */

package Compiler.Lex;
import static Compiler.Lex.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/7/20 18:10 from the specification file
 * <tt>C:/Users/pvill/Documents/Compiladores/Logorduin/src/Compiler/Lex/lexical.jflex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\40\2\0\1\3\22\0\1\3\5\0\1\5\1\0"+
    "\1\42\1\42\1\41\1\0\1\3\2\0\1\37\12\2\1\0\1\42"+
    "\1\41\1\41\1\41\1\36\1\5\32\1\1\42\1\0\1\42\1\0"+
    "\1\5\1\0\1\7\1\25\1\15\1\31\1\23\1\11\1\22\1\32"+
    "\1\12\1\26\1\4\1\20\1\24\1\13\1\16\1\6\1\33\1\10"+
    "\1\30\1\21\1\17\1\14\1\4\1\34\1\35\1\27\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\3\1\4\1\3\1\1\7\3\1\5"+
    "\7\3\1\5\2\6\1\7\1\3\1\10\4\3\1\11"+
    "\1\12\2\3\1\11\1\3\1\11\10\3\1\13\1\11"+
    "\7\3\1\14\3\3\1\4\1\3\1\10\16\3\1\15"+
    "\1\3\1\13\1\3\1\11\16\3\1\11\3\3\1\10"+
    "\1\15\5\3\2\11\27\3\1\16\3\3\1\10\5\3"+
    "\1\11\1\5\4\3\1\12\23\3\1\10\2\3\1\13"+
    "\4\3\1\11\1\3\1\14\3\3\1\12\13\3\1\10"+
    "\1\13\23\3\1\10\1\16\1\11\1\3\1\5\3\3"+
    "\1\5\3\3\1\14\5\3\1\10\3\3\1\11\3\3"+
    "\1\12\2\3\1\10\7\3\1\16\2\3\1\11\4\3"+
    "\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\257\0\u0302"+
    "\0\43\0\43\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4"+
    "\0\u03f7\0\u0325\0\u041a\0\u043d\0\u0325\0\u0460\0\u0483\0\u04a6"+
    "\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be"+
    "\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6"+
    "\0\u0325\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb"+
    "\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3"+
    "\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992\0\u0785\0\u09b5\0\u0785"+
    "\0\u09d8\0\u0785\0\u09fb\0\u0a1e\0\u0a41\0\u0a64\0\u0a87\0\u0aaa"+
    "\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2"+
    "\0\u0be5\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71\0\u0c4e\0\u0c94\0\u0cb7"+
    "\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0c4e\0\u0d66\0\u0d89\0\u0dac"+
    "\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4"+
    "\0\u0ee7\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc"+
    "\0\u0fff\0\u1022\0\u1045\0\u1068\0\u0c4e\0\u108b\0\u10ae\0\u10d1"+
    "\0\u10f4\0\u1117\0\u113a\0\u115d\0\u1180\0\u11a3\0\u10d1\0\u10d1"+
    "\0\u11c6\0\u11e9\0\u120c\0\u122f\0\u10d1\0\u1252\0\u1275\0\u1298"+
    "\0\u12bb\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d\0\u13b0"+
    "\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5\0\u14c8"+
    "\0\u14eb\0\u150e\0\u1531\0\u14c8\0\u1554\0\u1577\0\u159a\0\u15bd"+
    "\0\u14c8\0\u15e0\0\u14c8\0\u1603\0\u1626\0\u1649\0\u14c8\0\u166c"+
    "\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u171b\0\u173e\0\u1761\0\u1784"+
    "\0\u17a7\0\u17ca\0\u17ed\0\u17ca\0\u1810\0\u1833\0\u1856\0\u1879"+
    "\0\u189c\0\u18bf\0\u18e2\0\u1905\0\u1928\0\u194b\0\u196e\0\u1991"+
    "\0\u19b4\0\u19d7\0\u19fa\0\u1a1d\0\u1a40\0\u1a63\0\u1a86\0\u1aa9"+
    "\0\u1a86\0\u1a86\0\u1acc\0\u1a86\0\u1aef\0\u1b12\0\u1b35\0\43"+
    "\0\u1b58\0\u1b7b\0\u1b9e\0\u1a86\0\u1bc1\0\u1be4\0\u1c07\0\u1c2a"+
    "\0\u1c4d\0\u1c70\0\u1c93\0\u1cb6\0\u1cd9\0\u1c4d\0\u1cfc\0\u1d1f"+
    "\0\u1d42\0\u1c4d\0\u1d65\0\u1d88\0\322\0\u1dab\0\u1dce\0\u1df1"+
    "\0\u1e14\0\u1e37\0\u1e5a\0\u1e7d\0\106\0\u1ea0\0\u1ec3\0\106"+
    "\0\u1ee6\0\u1f09\0\u1f2c\0\u1f4f\0\106";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\6\1\15\1\16\1\17\1\20"+
    "\2\6\1\21\1\22\1\23\1\24\2\6\1\25\1\26"+
    "\3\6\1\27\1\2\1\30\1\5\1\31\1\32\44\0"+
    "\1\3\1\7\1\0\1\3\1\7\30\3\6\0\1\7"+
    "\1\4\1\0\32\7\10\0\1\5\34\0\1\5\3\0"+
    "\1\33\1\34\1\0\1\33\1\34\30\33\6\0\2\7"+
    "\1\0\32\7\6\0\1\33\1\34\1\0\1\33\1\34"+
    "\1\33\1\35\1\36\5\33\1\37\17\33\6\0\1\33"+
    "\1\34\1\0\1\33\1\34\1\40\5\33\1\41\4\33"+
    "\1\42\5\33\1\43\6\33\6\0\1\33\1\34\1\0"+
    "\1\33\1\34\1\33\1\44\5\33\1\45\1\33\1\46"+
    "\3\33\1\47\12\33\6\0\1\33\1\34\1\0\1\33"+
    "\1\34\4\33\1\50\23\33\6\0\1\33\1\34\1\0"+
    "\1\33\1\34\5\33\1\51\6\33\1\52\13\33\6\0"+
    "\1\33\1\34\1\0\1\33\1\34\1\33\1\53\26\33"+
    "\6\0\1\33\1\34\1\0\1\33\1\34\10\33\1\54"+
    "\1\55\3\33\1\56\12\33\6\0\1\33\1\34\1\0"+
    "\1\33\1\34\7\33\1\57\3\33\1\42\14\33\6\0"+
    "\1\33\1\34\1\0\1\33\1\34\12\33\1\60\15\33"+
    "\6\0\1\33\1\34\1\0\1\33\1\34\4\33\1\61"+
    "\16\33\1\45\4\33\6\0\1\33\1\34\1\0\1\33"+
    "\1\34\12\33\1\62\5\33\1\63\1\33\1\64\5\33"+
    "\6\0\1\33\1\34\1\0\1\33\1\34\1\33\1\65"+
    "\13\33\1\66\12\33\6\0\1\33\1\34\1\0\1\33"+
    "\1\34\1\33\1\67\6\33\1\70\1\33\1\42\15\33"+
    "\6\0\1\33\1\34\1\0\1\33\1\34\4\33\1\71"+
    "\4\33\1\72\3\33\1\73\1\33\1\42\10\33\6\0"+
    "\1\33\1\34\1\0\1\33\1\34\4\33\1\74\23\33"+
    "\44\0\1\75\4\0\1\76\1\77\1\0\1\76\1\77"+
    "\30\76\6\0\2\77\1\0\32\77\6\0\1\76\1\77"+
    "\1\0\1\76\1\77\2\76\1\100\25\76\6\0\1\76"+
    "\1\77\1\0\1\76\1\77\4\76\1\101\3\76\1\102"+
    "\17\76\6\0\1\76\1\77\1\0\1\76\1\77\5\76"+
    "\1\103\5\76\1\104\14\76\6\0\1\76\1\77\1\0"+
    "\1\76\1\77\1\76\1\105\26\76\6\0\1\76\1\77"+
    "\1\0\1\76\1\77\1\76\1\106\26\76\6\0\1\76"+
    "\1\77\1\0\1\76\1\77\1\76\1\107\26\76\6\0"+
    "\1\76\1\77\1\0\1\76\1\77\4\76\1\110\23\76"+
    "\6\0\1\76\1\77\1\0\1\76\1\77\16\76\1\111"+
    "\11\76\6\0\1\76\1\77\1\0\1\76\1\77\1\112"+
    "\12\76\1\113\6\76\1\114\1\115\4\76\6\0\1\76"+
    "\1\77\1\0\1\76\1\77\5\76\1\116\22\76\6\0"+
    "\1\76\1\77\1\0\1\76\1\77\4\76\1\117\2\76"+
    "\1\120\20\76\6\0\1\76\1\77\1\0\1\76\1\77"+
    "\11\76\1\121\16\76\6\0\1\76\1\77\1\0\1\76"+
    "\1\77\2\76\1\116\25\76\6\0\1\76\1\77\1\0"+
    "\1\76\1\77\22\76\1\122\5\76\6\0\1\76\1\77"+
    "\1\0\1\76\1\77\15\76\1\123\12\76\6\0\1\76"+
    "\1\77\1\0\1\76\1\77\5\76\1\124\22\76\6\0"+
    "\1\76\1\77\1\0\1\76\1\77\11\76\1\125\16\76"+
    "\6\0\1\76\1\77\1\0\1\76\1\77\13\76\1\126"+
    "\14\76\6\0\1\76\1\77\1\0\1\76\1\77\2\76"+
    "\1\127\25\76\6\0\1\76\1\77\1\0\1\76\1\77"+
    "\15\76\1\130\12\76\6\0\1\76\1\77\1\0\1\76"+
    "\1\77\15\76\1\131\12\76\6\0\1\76\1\77\1\0"+
    "\1\76\1\77\1\132\27\76\6\0\1\76\1\77\1\0"+
    "\1\76\1\77\27\76\1\133\6\0\1\76\1\77\1\0"+
    "\1\76\1\77\5\76\1\134\22\76\6\0\1\76\1\77"+
    "\1\0\1\76\1\77\20\76\1\135\7\76\6\0\1\76"+
    "\1\77\1\0\1\76\1\77\2\76\1\136\25\76\6\0"+
    "\1\76\1\77\1\0\1\76\1\77\16\76\1\137\1\140"+
    "\10\76\6\0\1\76\1\77\1\0\1\76\1\77\5\76"+
    "\1\141\22\76\6\0\1\76\1\77\1\0\1\76\1\77"+
    "\3\76\1\142\2\76\1\143\21\76\5\0\40\75\1\0"+
    "\2\75\1\0\1\144\1\145\1\0\1\144\1\145\30\144"+
    "\6\0\2\145\1\0\32\145\6\0\1\144\1\145\1\0"+
    "\1\144\1\145\1\144\1\146\26\144\6\0\1\144\1\145"+
    "\1\0\1\144\1\145\16\144\1\147\11\144\6\0\1\144"+
    "\1\145\1\0\1\144\1\145\23\144\1\150\4\144\6\0"+
    "\1\144\1\145\1\0\1\144\1\145\1\151\1\144\1\152"+
    "\4\144\1\153\16\144\1\154\1\155\6\0\1\144\1\145"+
    "\1\0\1\144\1\145\15\144\1\156\12\144\6\0\1\144"+
    "\1\145\1\0\1\144\1\145\2\144\1\157\25\144\6\0"+
    "\1\144\1\145\1\0\1\144\1\145\5\144\1\160\22\144"+
    "\6\0\1\144\1\145\1\0\1\144\1\145\2\144\1\155"+
    "\25\144\6\0\1\144\1\145\1\0\1\144\1\145\21\144"+
    "\1\161\6\144\6\0\1\144\1\145\1\0\1\144\1\145"+
    "\17\144\1\162\10\144\6\0\1\144\1\145\1\0\1\144"+
    "\1\145\4\144\1\163\23\144\6\0\1\144\1\145\1\0"+
    "\1\144\1\145\2\144\1\164\25\144\6\0\1\144\1\145"+
    "\1\0\1\144\1\145\13\144\1\165\14\144\6\0\1\144"+
    "\1\145\1\0\1\144\1\145\10\144\1\166\17\144\6\0"+
    "\1\144\1\145\1\0\1\144\1\145\7\144\1\146\20\144"+
    "\6\0\1\144\1\145\1\0\1\144\1\145\1\144\1\167"+
    "\26\144\6\0\1\144\1\145\1\0\1\144\1\145\5\144"+
    "\1\170\22\144\6\0\1\144\1\145\1\0\1\144\1\145"+
    "\13\144\1\171\14\144\6\0\1\144\1\145\1\0\1\144"+
    "\1\145\12\144\1\172\15\144\6\0\1\144\1\145\1\0"+
    "\1\144\1\145\4\144\1\173\23\144\6\0\1\144\1\145"+
    "\1\0\1\144\1\145\1\144\1\174\26\144\6\0\1\144"+
    "\1\145\1\0\1\144\1\145\14\144\1\175\1\144\1\176"+
    "\11\144\6\0\1\144\1\145\1\0\1\144\1\145\7\144"+
    "\1\177\20\144\6\0\1\144\1\145\1\0\1\144\1\145"+
    "\15\144\1\200\12\144\6\0\1\144\1\145\1\0\1\144"+
    "\1\145\10\144\1\201\17\144\6\0\1\144\1\145\1\0"+
    "\1\144\1\145\10\144\1\202\17\144\6\0\1\144\1\145"+
    "\1\0\1\144\1\145\1\144\1\203\26\144\6\0\1\144"+
    "\1\145\1\0\1\144\1\145\2\144\1\204\25\144\6\0"+
    "\1\144\1\145\1\0\1\144\1\145\1\144\1\205\26\144"+
    "\6\0\1\144\1\145\1\0\1\144\1\145\15\144\1\203"+
    "\12\144\6\0\1\144\1\145\1\0\1\144\1\145\10\144"+
    "\1\155\17\144\6\0\1\144\1\145\1\0\1\144\1\145"+
    "\15\144\1\206\12\144\6\0\1\144\1\145\1\0\1\144"+
    "\1\145\4\144\1\207\23\144\6\0\1\210\1\211\1\0"+
    "\1\210\1\211\30\210\6\0\2\211\1\0\32\211\6\0"+
    "\1\210\1\211\1\0\1\210\1\211\15\210\1\212\12\210"+
    "\6\0\1\210\1\211\1\0\1\210\1\211\11\210\1\213"+
    "\16\210\6\0\1\210\1\211\1\0\1\210\1\211\10\210"+
    "\1\214\17\210\6\0\1\210\1\211\1\0\1\210\1\211"+
    "\11\210\1\215\16\210\6\0\1\210\1\211\1\0\1\210"+
    "\1\211\10\210\1\216\1\210\1\217\15\210\6\0\1\210"+
    "\1\211\1\0\1\210\1\211\27\210\1\220\6\0\1\210"+
    "\1\211\1\0\1\210\1\211\5\210\1\221\22\210\6\0"+
    "\1\210\1\211\1\0\1\210\1\211\15\210\1\222\12\210"+
    "\6\0\1\210\1\211\1\0\1\210\1\211\21\210\1\223"+
    "\6\210\6\0\1\210\1\211\1\0\1\210\1\211\7\210"+
    "\1\224\20\210\6\0\1\210\1\211\1\0\1\210\1\211"+
    "\10\210\1\225\17\210\6\0\1\210\1\211\1\0\1\210"+
    "\1\211\13\210\1\226\14\210\6\0\1\210\1\211\1\0"+
    "\1\210\1\211\10\210\1\227\17\210\6\0\1\210\1\211"+
    "\1\0\1\210\1\211\10\210\1\220\17\210\6\0\1\210"+
    "\1\211\1\0\1\210\1\211\5\210\1\230\22\210\6\0"+
    "\1\210\1\211\1\0\1\210\1\211\12\210\1\231\15\210"+
    "\6\0\1\210\1\211\1\0\1\210\1\211\13\210\1\232"+
    "\14\210\6\0\1\210\1\211\1\0\1\210\1\211\2\210"+
    "\1\233\25\210\6\0\1\210\1\211\1\0\1\210\1\211"+
    "\13\210\1\234\14\210\6\0\1\210\1\211\1\0\1\210"+
    "\1\211\16\210\1\235\11\210\6\0\1\210\1\211\1\0"+
    "\1\210\1\211\4\210\1\236\16\210\1\237\4\210\6\0"+
    "\1\210\1\211\1\0\1\210\1\211\4\210\1\240\23\210"+
    "\6\0\1\210\1\211\1\0\1\210\1\211\15\210\1\241"+
    "\12\210\6\0\1\210\1\211\1\0\1\210\1\211\11\210"+
    "\1\242\16\210\6\0\1\210\1\211\1\0\1\210\1\211"+
    "\2\210\1\223\25\210\6\0\1\210\1\211\1\0\1\210"+
    "\1\211\2\210\1\243\25\210\6\0\1\210\1\211\1\0"+
    "\1\210\1\211\2\210\1\243\17\210\1\217\5\210\6\0"+
    "\1\210\1\211\1\0\1\210\1\211\12\210\1\244\15\210"+
    "\6\0\1\210\1\211\1\0\1\210\1\211\1\210\1\245"+
    "\26\210\6\0\1\210\1\211\1\0\1\210\1\211\2\210"+
    "\1\246\25\210\6\0\1\210\1\211\1\0\1\210\1\211"+
    "\22\210\1\247\5\210\6\0\1\250\1\251\1\0\1\250"+
    "\1\251\30\250\6\0\2\251\1\0\32\251\6\0\1\250"+
    "\1\251\1\0\1\250\1\251\2\250\1\252\25\250\6\0"+
    "\1\250\1\251\1\0\1\250\1\251\7\250\1\253\20\250"+
    "\6\0\1\250\1\251\1\0\1\250\1\251\22\250\1\254"+
    "\5\250\6\0\1\250\1\251\1\0\1\250\1\251\16\250"+
    "\1\255\11\250\6\0\1\250\1\251\1\0\1\250\1\251"+
    "\12\250\1\256\15\250\6\0\1\250\1\251\1\0\1\250"+
    "\1\251\7\250\1\257\20\250\6\0\1\250\1\251\1\0"+
    "\1\250\1\251\7\250\1\260\20\250\6\0\1\250\1\251"+
    "\1\0\1\250\1\251\1\250\1\261\26\250\6\0\1\250"+
    "\1\251\1\0\1\250\1\251\11\250\1\262\16\250\6\0"+
    "\1\250\1\251\1\0\1\250\1\251\15\250\1\263\12\250"+
    "\6\0\1\250\1\251\1\0\1\250\1\251\7\250\1\264"+
    "\20\250\6\0\1\250\1\251\1\0\1\250\1\251\23\250"+
    "\1\265\4\250\6\0\1\250\1\251\1\0\1\250\1\251"+
    "\15\250\1\266\12\250\6\0\1\250\1\251\1\0\1\250"+
    "\1\251\1\250\1\254\26\250\6\0\1\250\1\251\1\0"+
    "\1\250\1\251\10\250\1\267\17\250\6\0\1\250\1\251"+
    "\1\0\1\250\1\251\1\250\1\270\26\250\6\0\1\250"+
    "\1\251\1\0\1\250\1\251\10\250\1\254\17\250\6\0"+
    "\1\250\1\251\1\0\1\250\1\251\21\250\1\271\6\250"+
    "\6\0\1\250\1\251\1\0\1\250\1\251\15\250\1\272"+
    "\12\250\6\0\1\250\1\251\1\0\1\250\1\251\2\250"+
    "\1\254\25\250\6\0\1\250\1\251\1\0\1\250\1\251"+
    "\5\250\1\273\22\250\6\0\1\250\1\251\1\0\1\250"+
    "\1\251\13\250\1\274\14\250\6\0\1\250\1\251\1\0"+
    "\1\250\1\251\25\250\1\275\2\250\6\0\1\250\1\251"+
    "\1\0\1\250\1\251\1\250\1\276\26\250\6\0\1\250"+
    "\1\251\1\0\1\250\1\251\2\250\1\277\25\250\6\0"+
    "\1\250\1\251\1\0\1\250\1\251\15\250\1\300\12\250"+
    "\6\0\1\250\1\251\1\0\1\250\1\251\4\250\1\301"+
    "\23\250\6\0\1\302\1\303\1\0\1\302\1\303\30\302"+
    "\6\0\2\303\1\0\32\303\6\0\1\302\1\303\1\0"+
    "\1\302\1\303\10\302\1\304\17\302\6\0\1\302\1\303"+
    "\1\0\1\302\1\303\13\302\1\305\14\302\6\0\1\302"+
    "\1\303\1\0\1\302\1\303\17\302\1\306\10\302\6\0"+
    "\1\302\1\303\1\0\1\302\1\303\10\302\1\307\17\302"+
    "\6\0\1\302\1\303\1\0\1\302\1\303\4\302\1\310"+
    "\23\302\6\0\1\302\1\303\1\0\1\302\1\303\15\302"+
    "\1\311\12\302\6\0\1\302\1\303\1\0\1\302\1\303"+
    "\1\302\1\312\26\302\6\0\1\302\1\303\1\0\1\302"+
    "\1\303\15\302\1\313\12\302\6\0\1\302\1\303\1\0"+
    "\1\302\1\303\15\302\1\314\12\302\6\0\1\302\1\303"+
    "\1\0\1\302\1\303\22\302\1\315\5\302\6\0\1\302"+
    "\1\303\1\0\1\302\1\303\13\302\1\316\14\302\6\0"+
    "\1\302\1\303\1\0\1\302\1\303\25\302\1\317\2\302"+
    "\6\0\1\302\1\303\1\0\1\302\1\303\2\302\1\320"+
    "\25\302\6\0\1\302\1\303\1\0\1\302\1\303\13\302"+
    "\1\321\14\302\6\0\1\302\1\303\1\0\1\302\1\303"+
    "\1\302\1\304\26\302\6\0\1\302\1\303\1\0\1\302"+
    "\1\303\11\302\1\322\16\302\6\0\1\302\1\303\1\0"+
    "\1\302\1\303\1\323\27\302\6\0\1\302\1\303\1\0"+
    "\1\302\1\303\1\324\27\302\6\0\1\302\1\303\1\0"+
    "\1\302\1\303\5\302\1\325\22\302\6\0\1\302\1\303"+
    "\1\0\1\302\1\303\10\302\1\326\17\302\6\0\1\327"+
    "\1\330\1\0\1\327\1\330\30\327\6\0\2\330\1\0"+
    "\32\330\6\0\1\327\1\330\1\0\1\327\1\330\10\327"+
    "\1\331\17\327\6\0\1\327\1\330\1\0\1\327\1\330"+
    "\10\327\1\332\17\327\6\0\1\327\1\330\1\0\1\327"+
    "\1\330\2\327\1\333\25\327\6\0\1\327\1\330\1\0"+
    "\1\327\1\330\1\327\1\334\26\327\6\0\1\327\1\330"+
    "\1\0\1\327\1\330\13\327\1\335\14\327\6\0\1\327"+
    "\1\330\1\0\1\327\1\330\23\327\1\336\4\327\6\0"+
    "\1\327\1\330\1\0\1\327\1\330\23\327\1\337\4\327"+
    "\6\0\1\327\1\330\1\0\1\327\1\330\1\327\1\332"+
    "\26\327\6\0\1\327\1\330\1\0\1\327\1\330\30\327"+
    "\1\340\5\0\1\327\1\330\1\0\1\327\1\330\10\327"+
    "\1\341\17\327\6\0\1\327\1\330\1\0\1\327\1\330"+
    "\11\327\1\342\16\327\6\0\1\327\1\330\1\0\1\327"+
    "\1\330\15\327\1\343\12\327\6\0\1\327\1\330\1\0"+
    "\1\327\1\330\10\327\1\344\17\327\6\0\1\327\1\330"+
    "\1\0\1\327\1\330\15\327\1\345\12\327\6\0\1\327"+
    "\1\330\1\0\1\327\1\330\4\327\1\346\23\327\6\0"+
    "\1\327\1\330\1\0\1\327\1\330\1\327\1\347\26\327"+
    "\6\0\1\327\1\330\1\0\1\327\1\330\7\327\1\350"+
    "\20\327\6\0\1\327\1\330\1\0\1\327\1\330\5\327"+
    "\1\334\22\327\6\0\1\351\1\352\1\0\1\351\1\352"+
    "\30\351\6\0\2\352\1\0\32\352\6\0\1\351\1\352"+
    "\1\0\1\351\1\352\12\351\1\353\15\351\6\0\1\351"+
    "\1\352\1\0\1\351\1\352\10\351\1\354\17\351\6\0"+
    "\1\351\1\352\1\0\1\351\1\352\2\351\1\355\25\351"+
    "\6\0\1\351\1\352\1\0\1\351\1\352\15\351\1\356"+
    "\12\351\6\0\1\351\1\352\1\0\1\351\1\352\2\351"+
    "\1\357\25\351\6\0\1\351\1\352\1\0\1\351\1\352"+
    "\4\351\1\360\23\351\6\0\1\351\1\352\1\0\1\351"+
    "\1\352\7\351\1\361\20\351\6\0\1\351\1\352\1\0"+
    "\1\351\1\352\30\351\1\340\5\0\1\351\1\352\1\0"+
    "\1\351\1\352\21\351\1\362\6\351\6\0\1\351\1\352"+
    "\1\0\1\351\1\352\5\351\1\363\22\351\6\0\1\351"+
    "\1\352\1\0\1\351\1\352\4\351\1\364\23\351\6\0"+
    "\1\3\1\365\1\0\1\3\1\365\30\3\6\0\2\365"+
    "\1\0\32\365\6\0\1\3\1\365\1\0\1\3\1\365"+
    "\1\3\1\366\26\3\6\0\1\3\1\365\1\0\1\3"+
    "\1\365\2\3\1\367\25\3\6\0\1\3\1\365\1\0"+
    "\1\3\1\365\1\3\1\370\26\3\6\0\1\3\1\365"+
    "\1\0\1\3\1\365\13\3\1\371\14\3\6\0\1\3"+
    "\1\365\1\0\1\3\1\365\15\3\1\372\12\3\6\0"+
    "\1\3\1\365\1\0\1\3\1\365\24\3\1\373\3\3"+
    "\6\0\1\3\1\365\1\0\1\3\1\365\13\3\1\374"+
    "\14\3\6\0\1\3\1\365\1\0\1\3\1\365\1\3"+
    "\1\375\26\3\6\0\1\3\1\7\1\0\1\3\1\7"+
    "\1\376\27\3\6\0\1\3\1\7\1\0\1\3\1\7"+
    "\13\3\1\371\14\3\6\0\1\3\1\7\1\0\1\3"+
    "\1\7\23\3\1\373\4\3\6\0\1\3\1\7\1\0"+
    "\1\3\1\7\11\3\1\377\16\3\6\0\1\3\1\7"+
    "\1\0\1\3\1\7\2\3\1\370\25\3\6\0\1\3"+
    "\1\7\1\0\1\3\1\7\1\3\1\u0100\26\3\6\0"+
    "\1\3\1\7\1\0\1\3\1\7\1\3\1\u0101\26\3"+
    "\6\0\1\3\1\7\1\0\1\3\1\7\4\3\1\u0102"+
    "\23\3\6\0\1\3\1\7\1\0\1\3\1\7\14\3"+
    "\1\u0103\13\3\6\0\1\3\1\7\1\0\1\3\1\7"+
    "\12\3\1\u0104\15\3\6\0\1\3\1\7\1\0\1\3"+
    "\1\7\21\3\1\u0100\6\3\6\0\1\3\1\7\1\0"+
    "\1\3\1\7\1\3\1\u0105\26\3\6\0\1\3\1\7"+
    "\1\0\1\3\1\7\12\3\1\u0103\15\3\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\26\1\2\11\305\1\1\11\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int line;
    public int column;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { // token desconocido
    lexeme = yytext();
    line = yyline;
    column = yycolumn;
    return Error;
          }
        case 15: break;
        case 9: 
          { lexeme = yytext(); return Procedimiento1;
          }
        case 16: break;
        case 11: 
          { lexeme = yytext(); return ProcedimientoP;
          }
        case 17: break;
        case 13: 
          { lexeme = yytext(); return Reservadas;
          }
        case 18: break;
        case 12: 
          { lexeme = yytext(); return Procedimiento1P;
          }
        case 19: break;
        case 6: 
          { lexeme = yytext(); return Operador;
          }
        case 20: break;
        case 1: 
          { lexeme = yytext(); 
    line = yyline;
    column = yycolumn;
    return Error;
          }
        case 21: break;
        case 7: 
          { lexeme = yytext(); return SimboloEspecial;
          }
        case 22: break;
        case 8: 
          { lexeme = yytext(); return Identificador;
          }
        case 23: break;
        case 5: 
          { lexeme = yytext(); return Procedimiento2;
          }
        case 24: break;
        case 4: 
          { /*Ignore*/
          }
        case 25: break;
        case 10: 
          { lexeme = yytext(); return Procedimiento;
          }
        case 26: break;
        case 3: 
          { lexeme = yytext(); return Constante;
          }
        case 27: break;
        case 14: 
          { lexeme = yytext(); return ProcedimientoN;
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
