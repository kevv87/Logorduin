/* The following code was generated by JFlex 1.4.3 on 17/7/20 09:24 */

package Compiler.Lex;

import Compiler.Jacc.ParserTokens;

import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/7/20 09:24 from the specification file
 * <tt>C:/Users/pvill/Documents/Compiladores/Logorduin/src/Compiler/Lex/flexer.jflex</tt>
 */
public class Lexer implements ParserTokens {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\5\0\1\7"+
    "\1\0\1\13\1\13\1\13\1\13\1\0\1\13\1\12\1\4\1\10"+
    "\11\11\1\0\1\13\1\13\1\13\1\13\1\43\33\7\1\13\1\0"+
    "\1\13\1\0\1\7\1\0\1\15\1\32\1\21\1\36\1\30\1\44"+
    "\1\26\1\37\1\17\1\33\1\5\1\24\1\31\1\20\1\22\1\27"+
    "\1\40\1\16\1\35\1\25\1\23\1\14\1\5\1\41\1\42\1\34"+
    "\1\0\1\6\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\3\1\4\2\1\2\5\1\4\5\1"+
    "\1\6\10\1\1\7\1\3\2\10\1\1\1\0\1\10"+
    "\1\11\1\12\3\10\1\13\1\10\1\14\6\10\1\15"+
    "\1\16\1\17\1\20\11\10\1\21\1\22\2\10\1\23"+
    "\3\10\1\24\1\25\12\10\1\26\1\10\1\27\22\10"+
    "\1\30\6\10\1\31\6\10\1\32\13\10\1\33\1\34"+
    "\11\10\1\35\1\10\1\36\7\10\1\37\2\10\1\40"+
    "\14\10\1\41\1\10\1\42\7\10\1\43\7\10\1\44"+
    "\3\10\1\45\2\10\1\46\1\47\1\10\1\50\6\10"+
    "\1\51\1\10\1\52\2\10\1\53\21\10\1\54\5\10"+
    "\1\55\14\10\1\56\1\57\3\10\1\60\1\61\1\10"+
    "\1\62\1\63\5\10\1\64\5\10\1\65\4\10\1\66"+
    "\1\67\1\70\1\10\1\71\12\10\1\72\4\1\1\73"+
    "\3\1\1\74\5\1\1\75\1\76\1\77\1\100\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\45\0\157\0\224\0\271\0\336"+
    "\0\u0103\0\45\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1"+
    "\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309"+
    "\0\224\0\u032e\0\u0353\0\u0378\0\336\0\u039d\0\u03c2\0\u03e7"+
    "\0\u0353\0\u040c\0\u0431\0\u0456\0\u0353\0\u047b\0\u04a0\0\u04c5"+
    "\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e\0\u0353\0\u05a3\0\u05c8"+
    "\0\u0353\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb"+
    "\0\u06f0\0\u0715\0\u0353\0\u0353\0\u073a\0\u075f\0\u0353\0\u0784"+
    "\0\u07a9\0\u07ce\0\u039d\0\u07a9\0\u07f3\0\u0818\0\u083d\0\u0862"+
    "\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u07a9\0\u0965"+
    "\0\u07a9\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43\0\u0a68"+
    "\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b\0\u0b90"+
    "\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8"+
    "\0\u0cdd\0\u0d02\0\u0c93\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb"+
    "\0\u0de0\0\u0c93\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe"+
    "\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c\0\u0c93\0\u0fc1"+
    "\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a\0\u109f\0\u10c4\0\u10e9"+
    "\0\u0c93\0\u110e\0\u0c93\0\u1133\0\u1158\0\u117d\0\u11a2\0\u11c7"+
    "\0\u11ec\0\u1211\0\u117d\0\u1236\0\u125b\0\u117d\0\u1280\0\u12a5"+
    "\0\u12ca\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383\0\u13a8\0\u13cd"+
    "\0\u13f2\0\u1417\0\u117d\0\u143c\0\u117d\0\u1461\0\u1486\0\u14ab"+
    "\0\u14d0\0\u14f5\0\u151a\0\u153f\0\u117d\0\u1564\0\u1589\0\u15ae"+
    "\0\u15d3\0\u15f8\0\u161d\0\u1642\0\u161d\0\u1667\0\u168c\0\u16b1"+
    "\0\u161d\0\u16d6\0\u16fb\0\u161d\0\u161d\0\u1720\0\u161d\0\u1745"+
    "\0\u176a\0\u178f\0\u17b4\0\u17d9\0\u17fe\0\u161d\0\u1823\0\u161d"+
    "\0\u1848\0\u186d\0\u161d\0\u1892\0\u18b7\0\u18dc\0\u1901\0\u1926"+
    "\0\u194b\0\u1970\0\u1995\0\u19ba\0\u19df\0\u1a04\0\u1a29\0\u1a4e"+
    "\0\u1a73\0\u1a98\0\u1abd\0\u1ae2\0\u1995\0\u1b07\0\u1b2c\0\u1b51"+
    "\0\u1b76\0\u1b9b\0\u1995\0\u1bc0\0\u1be5\0\u1c0a\0\u1c2f\0\u1c54"+
    "\0\u1c79\0\u1c9e\0\u1cc3\0\u1ce8\0\u1d0d\0\u1d32\0\u1d57\0\u1cc3"+
    "\0\45\0\u1d7c\0\u1da1\0\u1dc6\0\u1cc3\0\u1cc3\0\u1deb\0\u1cc3"+
    "\0\u1cc3\0\u1e10\0\u1e35\0\u1e5a\0\u1e7f\0\u1ea4\0\u1cc3\0\u1ec9"+
    "\0\u1eee\0\u1f13\0\u1f38\0\u1f5d\0\u1eee\0\u1f82\0\u1fa7\0\u1fcc"+
    "\0\u1ff1\0\45\0\45\0\u1eee\0\u2016\0\u1eee\0\u203b\0\271"+
    "\0\45\0\u2060\0\u2085\0\u20aa\0\u20cf\0\u20f4\0\u2119\0\u213e"+
    "\0\271\0\u2163\0\u2188\0\u21ad\0\u21d2\0\271\0\u21f7\0\u221c"+
    "\0\u2241\0\271\0\u2266\0\u228b\0\u22b0\0\u22d5\0\u22fa\0\271"+
    "\0\271\0\271\0\271\0\271";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\1\6"+
    "\1\17\1\20\1\21\2\6\1\22\1\23\1\24\1\25"+
    "\1\26\2\6\1\27\1\30\3\6\1\31\1\2\1\6"+
    "\47\0\1\4\46\0\1\32\45\0\1\33\1\34\3\33"+
    "\2\0\27\33\1\0\1\33\5\0\1\7\1\0\3\7"+
    "\2\0\27\7\1\0\1\7\5\0\1\7\1\0\1\7"+
    "\2\35\1\36\1\0\27\7\1\0\1\7\5\0\1\7"+
    "\1\0\1\7\2\11\1\36\1\0\27\7\1\0\1\7"+
    "\5\0\1\33\1\34\3\33\2\0\1\33\1\37\25\33"+
    "\1\0\1\33\5\0\1\33\1\34\3\33\2\0\1\40"+
    "\10\33\1\41\1\33\1\42\4\33\1\43\6\33\1\0"+
    "\1\33\5\0\1\33\1\34\3\33\2\0\1\33\1\44"+
    "\3\33\1\45\1\33\1\46\4\33\1\47\12\33\1\0"+
    "\1\33\5\0\1\33\1\34\3\33\2\0\4\33\1\50"+
    "\5\33\1\51\14\33\1\0\1\33\5\0\1\33\1\34"+
    "\3\33\2\0\6\33\1\52\1\53\4\33\1\54\12\33"+
    "\1\0\1\33\5\0\1\33\1\34\3\33\2\0\5\33"+
    "\1\55\3\33\1\56\15\33\1\0\1\33\5\0\1\33"+
    "\1\34\3\33\2\0\10\33\1\57\16\33\1\0\1\33"+
    "\5\0\1\33\1\34\3\33\2\0\3\33\1\60\16\33"+
    "\1\61\4\33\1\0\1\33\5\0\1\33\1\34\3\33"+
    "\2\0\2\33\1\62\3\33\1\63\20\33\1\0\1\33"+
    "\5\0\1\33\1\34\3\33\2\0\10\33\1\64\6\33"+
    "\1\65\1\33\1\66\5\33\1\0\1\33\5\0\1\33"+
    "\1\34\3\33\2\0\1\33\1\67\12\33\1\70\12\33"+
    "\1\0\1\33\5\0\1\33\1\34\3\33\2\0\1\33"+
    "\1\71\4\33\1\72\1\33\1\73\16\33\1\0\1\33"+
    "\5\0\1\33\1\34\3\33\2\0\3\33\1\74\3\33"+
    "\1\75\4\33\1\76\1\33\1\77\10\33\1\0\1\33"+
    "\5\0\1\33\1\34\3\33\2\0\3\33\1\100\23\33"+
    "\1\0\1\33\1\32\1\3\1\4\42\32\5\0\1\101"+
    "\1\102\3\101\2\0\27\101\1\0\1\101\5\0\5\102"+
    "\2\0\27\102\1\0\1\102\10\0\2\103\40\0\1\101"+
    "\1\102\3\101\2\0\2\101\1\104\24\101\1\0\1\101"+
    "\5\0\1\101\1\102\3\101\2\0\1\101\1\105\25\101"+
    "\1\0\1\101\5\0\1\101\1\102\3\101\2\0\1\101"+
    "\1\106\25\101\1\0\1\101\5\0\1\101\1\102\3\101"+
    "\2\0\1\101\1\107\25\101\1\0\1\101\5\0\1\101"+
    "\1\102\3\101\2\0\3\101\1\110\23\101\1\0\1\101"+
    "\5\0\1\101\1\102\3\101\2\0\15\101\1\111\11\101"+
    "\1\0\1\101\5\0\1\101\1\102\3\101\2\0\11\101"+
    "\1\112\1\101\1\113\5\101\1\114\1\115\4\101\1\0"+
    "\1\101\5\0\1\101\1\102\3\101\2\0\3\101\1\116"+
    "\1\101\1\117\21\101\1\0\1\101\5\0\1\101\1\102"+
    "\3\101\2\0\7\101\1\120\17\101\1\0\1\101\5\0"+
    "\1\101\1\102\3\101\2\0\21\101\1\121\5\101\1\0"+
    "\1\101\5\0\1\101\1\102\3\101\2\0\14\101\1\122"+
    "\12\101\1\0\1\101\5\0\1\101\1\102\3\101\2\0"+
    "\4\101\1\123\22\101\1\0\1\101\5\0\1\101\1\102"+
    "\3\101\2\0\7\101\1\124\17\101\1\0\1\101\5\0"+
    "\1\101\1\102\3\101\2\0\11\101\1\125\15\101\1\0"+
    "\1\101\5\0\1\101\1\102\3\101\2\0\2\101\1\126"+
    "\24\101\1\0\1\101\5\0\1\101\1\102\3\101\2\0"+
    "\3\101\1\127\2\101\1\130\20\101\1\0\1\101\5\0"+
    "\1\101\1\102\3\101\2\0\4\101\1\131\4\101\1\132"+
    "\15\101\1\0\1\101\5\0\1\101\1\102\3\101\2\0"+
    "\14\101\1\133\12\101\1\0\1\101\5\0\1\101\1\102"+
    "\3\101\2\0\14\101\1\134\12\101\1\0\1\101\5\0"+
    "\1\101\1\102\3\101\2\0\13\101\1\135\13\101\1\0"+
    "\1\101\5\0\1\101\1\102\3\101\2\0\26\101\1\136"+
    "\1\0\1\101\5\0\1\101\1\102\3\101\2\0\4\101"+
    "\1\137\22\101\1\0\1\101\5\0\1\101\1\102\3\101"+
    "\2\0\17\101\1\140\7\101\1\0\1\101\5\0\1\101"+
    "\1\102\3\101\2\0\2\101\1\141\24\101\1\0\1\101"+
    "\5\0\1\101\1\102\3\101\2\0\15\101\1\142\1\143"+
    "\10\101\1\0\1\101\5\0\1\101\1\102\3\101\2\0"+
    "\4\101\1\144\22\101\1\0\1\101\5\0\1\101\1\102"+
    "\3\101\2\0\1\145\26\101\1\0\1\146\5\0\1\147"+
    "\1\150\3\147\2\0\27\147\1\0\1\147\5\0\5\150"+
    "\2\0\27\150\1\0\1\150\5\0\1\147\1\150\3\147"+
    "\2\0\4\147\1\151\22\147\1\0\1\147\5\0\1\147"+
    "\1\150\3\147\2\0\2\147\1\152\24\147\1\0\1\147"+
    "\5\0\1\147\1\150\3\147\2\0\2\147\1\153\24\147"+
    "\1\0\1\147\5\0\1\147\1\150\3\147\2\0\20\147"+
    "\1\154\6\147\1\0\1\147\5\0\1\147\1\150\3\147"+
    "\2\0\16\147\1\155\10\147\1\0\1\147\5\0\1\147"+
    "\1\150\3\147\2\0\2\147\1\156\24\147\1\0\1\147"+
    "\5\0\1\147\1\150\3\147\2\0\3\147\1\157\23\147"+
    "\1\0\1\147\5\0\1\147\1\150\3\147\2\0\11\147"+
    "\1\160\15\147\1\0\1\147\5\0\1\147\1\150\3\147"+
    "\2\0\6\147\1\161\20\147\1\0\1\147\5\0\1\147"+
    "\1\150\3\147\2\0\5\147\1\162\21\147\1\0\1\147"+
    "\5\0\1\147\1\150\3\147\2\0\1\147\1\163\25\147"+
    "\1\0\1\147\5\0\1\147\1\150\3\147\2\0\4\147"+
    "\1\164\22\147\1\0\1\147\5\0\1\147\1\150\3\147"+
    "\2\0\11\147\1\165\15\147\1\0\1\147\5\0\1\147"+
    "\1\150\3\147\2\0\10\147\1\166\16\147\1\0\1\147"+
    "\5\0\1\147\1\150\3\147\2\0\3\147\1\167\23\147"+
    "\1\0\1\147\5\0\1\147\1\150\3\147\2\0\1\147"+
    "\1\170\25\147\1\0\1\147\5\0\1\147\1\150\3\147"+
    "\2\0\15\147\1\171\11\147\1\0\1\147\5\0\1\147"+
    "\1\150\3\147\2\0\22\147\1\172\4\147\1\0\1\147"+
    "\5\0\1\147\1\150\3\147\2\0\2\147\1\173\2\147"+
    "\1\174\5\147\1\175\11\147\1\176\1\177\1\0\1\147"+
    "\5\0\1\147\1\150\3\147\2\0\14\147\1\200\12\147"+
    "\1\0\1\147\5\0\1\147\1\150\3\147\2\0\12\147"+
    "\1\201\2\147\1\202\11\147\1\0\1\147\5\0\1\147"+
    "\1\150\3\147\2\0\5\147\1\203\21\147\1\0\1\147"+
    "\5\0\1\147\1\150\3\147\2\0\14\147\1\204\12\147"+
    "\1\0\1\147\5\0\1\147\1\150\3\147\2\0\6\147"+
    "\1\205\20\147\1\0\1\147\5\0\1\147\1\150\3\147"+
    "\2\0\6\147\1\206\20\147\1\0\1\147\5\0\1\147"+
    "\1\150\3\147\2\0\1\147\1\207\25\147\1\0\1\147"+
    "\5\0\1\147\1\150\3\147\2\0\2\147\1\210\24\147"+
    "\1\0\1\147\5\0\1\147\1\150\3\147\2\0\1\147"+
    "\1\211\25\147\1\0\1\147\5\0\1\147\1\150\3\147"+
    "\2\0\14\147\1\212\12\147\1\0\1\147\5\0\1\147"+
    "\1\150\3\147\2\0\6\147\1\213\20\147\1\0\1\147"+
    "\5\0\1\147\1\150\3\147\2\0\3\147\1\214\23\147"+
    "\1\0\1\147\5\0\1\147\1\150\3\147\2\0\14\147"+
    "\1\215\12\147\1\0\1\147\5\0\1\216\1\217\3\216"+
    "\2\0\27\216\1\0\1\216\5\0\5\217\2\0\27\217"+
    "\1\0\1\217\5\0\1\216\1\217\3\216\2\0\20\216"+
    "\1\220\6\216\1\0\1\216\5\0\1\216\1\217\3\216"+
    "\2\0\14\216\1\221\12\216\1\0\1\216\5\0\1\216"+
    "\1\217\3\216\2\0\5\216\1\222\21\216\1\0\1\216"+
    "\5\0\1\216\1\217\3\216\2\0\6\216\1\223\20\216"+
    "\1\0\1\216\5\0\1\216\1\217\3\216\2\0\6\216"+
    "\1\224\20\216\1\0\1\216\5\0\1\216\1\217\3\216"+
    "\2\0\11\216\1\225\15\216\1\0\1\216\5\0\1\216"+
    "\1\217\3\216\2\0\6\216\1\226\20\216\1\0\1\216"+
    "\5\0\1\216\1\217\3\216\2\0\4\216\1\227\22\216"+
    "\1\0\1\216\5\0\1\216\1\217\3\216\2\0\10\216"+
    "\1\230\16\216\1\0\1\216\5\0\1\216\1\217\3\216"+
    "\2\0\11\216\1\231\15\216\1\0\1\216\5\0\1\216"+
    "\1\217\3\216\2\0\2\216\1\232\24\216\1\0\1\216"+
    "\5\0\1\216\1\217\3\216\2\0\11\216\1\233\15\216"+
    "\1\0\1\216\5\0\1\216\1\217\3\216\2\0\15\216"+
    "\1\234\11\216\1\0\1\216\5\0\1\216\1\217\3\216"+
    "\2\0\3\216\1\235\16\216\1\236\4\216\1\0\1\216"+
    "\5\0\1\216\1\217\3\216\2\0\14\216\1\237\12\216"+
    "\1\0\1\216\5\0\1\216\1\217\3\216\2\0\7\216"+
    "\1\240\17\216\1\0\1\216\5\0\1\216\1\217\3\216"+
    "\2\0\7\216\1\241\17\216\1\0\1\216\5\0\1\216"+
    "\1\217\3\216\2\0\6\216\1\242\1\216\1\243\16\216"+
    "\1\0\1\216\5\0\1\216\1\217\3\216\2\0\6\216"+
    "\1\244\20\216\1\0\1\216\5\0\1\216\1\217\3\216"+
    "\2\0\26\216\1\245\1\0\1\216\5\0\1\216\1\217"+
    "\3\216\2\0\4\216\1\246\22\216\1\0\1\216\5\0"+
    "\1\216\1\217\3\216\2\0\3\216\1\247\23\216\1\0"+
    "\1\216\5\0\1\216\1\217\3\216\2\0\14\216\1\250"+
    "\12\216\1\0\1\216\5\0\1\216\1\217\3\216\2\0"+
    "\7\216\1\251\17\216\1\0\1\216\5\0\1\216\1\217"+
    "\3\216\2\0\2\216\1\252\24\216\1\0\1\216\5\0"+
    "\1\216\1\217\3\216\2\0\2\216\1\253\24\216\1\0"+
    "\1\216\5\0\1\216\1\217\3\216\2\0\2\216\1\254"+
    "\16\216\1\255\5\216\1\0\1\216\5\0\1\216\1\217"+
    "\3\216\2\0\10\216\1\256\16\216\1\0\1\216\5\0"+
    "\1\216\1\217\3\216\2\0\1\216\1\257\25\216\1\0"+
    "\1\216\5\0\1\216\1\217\3\216\2\0\10\216\1\260"+
    "\16\216\1\0\1\216\5\0\1\216\1\217\3\216\2\0"+
    "\21\216\1\261\5\216\1\0\1\216\5\0\1\216\1\217"+
    "\3\216\2\0\2\216\1\262\24\216\1\0\1\216\5\0"+
    "\1\263\1\264\3\263\2\0\27\263\1\0\1\263\5\0"+
    "\5\264\2\0\27\264\1\0\1\264\5\0\1\263\1\264"+
    "\3\263\2\0\1\263\1\265\25\263\1\0\1\263\5\0"+
    "\1\263\1\264\3\263\2\0\5\263\1\266\21\263\1\0"+
    "\1\263\5\0\1\263\1\264\3\263\2\0\7\263\1\267"+
    "\17\263\1\0\1\263\5\0\1\263\1\264\3\263\2\0"+
    "\5\263\1\270\21\263\1\0\1\263\5\0\1\263\1\264"+
    "\3\263\2\0\14\263\1\271\12\263\1\0\1\263\5\0"+
    "\1\263\1\264\3\263\2\0\22\263\1\272\4\263\1\0"+
    "\1\263\5\0\1\263\1\264\3\263\2\0\14\263\1\273"+
    "\12\263\1\0\1\263\5\0\1\263\1\264\3\263\2\0"+
    "\1\263\1\274\25\263\1\0\1\263\5\0\1\263\1\264"+
    "\3\263\2\0\6\263\1\275\20\263\1\0\1\263\5\0"+
    "\1\263\1\264\3\263\2\0\1\263\1\276\25\263\1\0"+
    "\1\263\5\0\1\263\1\264\3\263\2\0\6\263\1\277"+
    "\20\263\1\0\1\263\5\0\1\263\1\264\3\263\2\0"+
    "\20\263\1\300\6\263\1\0\1\263\5\0\1\263\1\264"+
    "\3\263\2\0\14\263\1\301\12\263\1\0\1\263\5\0"+
    "\1\263\1\264\3\263\2\0\2\263\1\302\24\263\1\0"+
    "\1\263\5\0\1\263\1\264\3\263\2\0\5\263\1\303"+
    "\21\263\1\0\1\263\5\0\1\263\1\264\3\263\2\0"+
    "\15\263\1\304\11\263\1\0\1\263\5\0\1\263\1\264"+
    "\3\263\2\0\10\263\1\305\16\263\1\0\1\263\5\0"+
    "\1\263\1\264\3\263\2\0\21\263\1\306\5\263\1\0"+
    "\1\263\5\0\1\263\1\264\3\263\2\0\5\263\1\307"+
    "\21\263\1\0\1\263\5\0\1\263\1\264\3\263\2\0"+
    "\2\263\1\310\24\263\1\0\1\263\5\0\1\263\1\264"+
    "\3\263\2\0\4\263\1\311\22\263\1\0\1\263\5\0"+
    "\1\263\1\264\3\263\2\0\11\263\1\312\15\263\1\0"+
    "\1\263\5\0\1\263\1\264\3\263\2\0\1\263\1\313"+
    "\25\263\1\0\1\263\5\0\1\263\1\264\3\263\2\0"+
    "\24\263\1\314\2\263\1\0\1\263\5\0\1\263\1\264"+
    "\3\263\2\0\24\263\1\315\2\263\1\0\1\263\5\0"+
    "\1\263\1\264\3\263\2\0\1\263\1\316\25\263\1\0"+
    "\1\263\5\0\1\263\1\264\3\263\2\0\13\263\1\317"+
    "\13\263\1\0\1\263\5\0\1\263\1\264\3\263\2\0"+
    "\1\263\1\320\25\263\1\0\1\263\5\0\1\263\1\264"+
    "\3\263\2\0\3\263\1\321\23\263\1\0\1\263\5\0"+
    "\1\263\1\264\3\263\2\0\14\263\1\322\12\263\1\0"+
    "\1\263\5\0\1\323\1\324\3\323\2\0\27\323\1\0"+
    "\1\323\5\0\5\324\2\0\27\324\1\0\1\324\5\0"+
    "\1\323\1\324\3\323\2\0\14\323\1\325\12\323\1\0"+
    "\1\323\5\0\1\323\1\324\3\323\2\0\1\323\1\326"+
    "\25\323\1\0\1\323\5\0\1\323\1\324\3\323\2\0"+
    "\14\323\1\327\12\323\1\0\1\323\5\0\1\323\1\324"+
    "\3\323\2\0\14\323\1\330\12\323\1\0\1\323\5\0"+
    "\1\323\1\324\3\323\2\0\21\323\1\331\5\323\1\0"+
    "\1\323\5\0\1\323\1\324\3\323\2\0\11\323\1\332"+
    "\15\323\1\0\1\323\5\0\1\323\1\324\3\323\2\0"+
    "\24\323\1\333\2\323\1\0\1\323\5\0\1\323\1\324"+
    "\3\323\2\0\2\323\1\334\24\323\1\0\1\323\5\0"+
    "\1\323\1\324\3\323\2\0\6\323\1\335\20\323\1\0"+
    "\1\323\5\0\1\323\1\324\3\323\2\0\11\323\1\336"+
    "\15\323\1\0\1\323\5\0\1\323\1\324\3\323\2\0"+
    "\16\323\1\337\10\323\1\0\1\323\5\0\1\323\1\324"+
    "\3\323\2\0\6\323\1\340\20\323\1\0\1\323\5\0"+
    "\1\323\1\324\3\323\2\0\3\323\1\341\23\323\1\0"+
    "\1\323\5\0\1\323\1\324\3\323\2\0\11\323\1\342"+
    "\15\323\1\0\1\323\5\0\1\323\1\324\3\323\2\0"+
    "\1\323\1\343\25\323\1\0\1\323\5\0\1\323\1\324"+
    "\3\323\2\0\7\323\1\344\17\323\1\0\1\323\5\0"+
    "\1\323\1\324\3\323\2\0\7\323\1\345\17\323\1\0"+
    "\1\323\5\0\1\323\1\324\3\323\2\0\13\323\1\346"+
    "\13\323\1\0\1\323\5\0\1\323\1\324\3\323\2\0"+
    "\1\323\1\347\25\323\1\0\1\323\5\0\1\323\1\324"+
    "\3\323\2\0\13\323\1\350\13\323\1\0\1\323\5\0"+
    "\1\323\1\324\3\323\2\0\6\323\1\351\20\323\1\0"+
    "\1\323\5\0\1\323\1\324\3\323\2\0\4\323\1\352"+
    "\22\323\1\0\1\323\5\0\1\353\1\354\3\353\2\0"+
    "\27\353\1\0\1\353\5\0\5\354\2\0\27\354\1\0"+
    "\1\354\5\0\1\353\1\354\3\353\2\0\11\353\1\355"+
    "\15\353\1\0\1\353\5\0\1\353\1\354\3\353\2\0"+
    "\22\353\1\356\4\353\1\0\1\353\5\0\1\353\1\354"+
    "\3\353\2\0\22\353\1\357\4\353\1\0\1\353\5\0"+
    "\1\353\1\354\3\353\2\0\1\353\1\360\25\353\1\0"+
    "\1\353\5\0\1\353\1\354\3\353\2\0\27\353\1\361"+
    "\1\353\5\0\1\353\1\354\3\353\2\0\6\353\1\362"+
    "\20\353\1\0\1\353\5\0\1\353\1\354\3\353\2\0"+
    "\7\353\1\363\17\353\1\0\1\353\5\0\1\353\1\354"+
    "\3\353\2\0\14\353\1\364\12\353\1\0\1\353\5\0"+
    "\1\353\1\354\3\353\2\0\6\353\1\365\20\353\1\0"+
    "\1\353\5\0\1\353\1\354\3\353\2\0\6\353\1\366"+
    "\20\353\1\0\1\353\5\0\1\353\1\354\3\353\2\0"+
    "\2\353\1\367\24\353\1\0\1\353\5\0\1\353\1\354"+
    "\3\353\2\0\1\353\1\370\25\353\1\0\1\353\5\0"+
    "\1\353\1\354\3\353\2\0\6\353\1\371\20\353\1\0"+
    "\1\353\5\0\1\353\1\354\3\353\2\0\14\353\1\372"+
    "\12\353\1\0\1\353\5\0\1\353\1\354\3\353\2\0"+
    "\14\353\1\373\12\353\1\0\1\353\5\0\1\353\1\354"+
    "\3\353\2\0\3\353\1\374\23\353\1\0\1\353\5\0"+
    "\1\353\1\354\3\353\2\0\4\353\1\375\22\353\1\0"+
    "\1\353\5\0\1\353\1\354\3\353\2\0\3\353\1\376"+
    "\23\353\1\0\1\353\5\0\1\353\1\354\3\353\2\0"+
    "\4\353\1\377\22\353\1\0\1\353\5\0\1\353\1\354"+
    "\3\353\2\0\5\353\1\u0100\21\353\1\0\1\353\5\0"+
    "\1\u0101\1\u0102\3\u0101\2\0\27\u0101\1\0\1\u0101\5\0"+
    "\5\u0102\2\0\27\u0102\1\0\1\u0102\5\0\1\u0101\1\u0102"+
    "\3\u0101\2\0\6\u0101\1\u0103\20\u0101\1\0\1\u0101\5\0"+
    "\1\u0101\1\u0102\3\u0101\2\0\2\u0101\1\u0104\24\u0101\1\0"+
    "\1\u0101\5\0\1\u0101\1\u0102\3\u0101\2\0\14\u0101\1\u0105"+
    "\12\u0101\1\0\1\u0101\5\0\1\u0101\1\u0102\3\u0101\2\0"+
    "\2\u0101\1\u0106\24\u0101\1\0\1\u0101\5\0\1\u0101\1\u0102"+
    "\3\u0101\2\0\3\u0101\1\u0107\23\u0101\1\0\1\u0101\5\0"+
    "\1\u0101\1\u0102\3\u0101\2\0\5\u0101\1\u0108\21\u0101\1\0"+
    "\1\u0101\5\0\1\u0101\1\u0102\3\u0101\2\0\10\u0101\1\u0109"+
    "\16\u0101\1\0\1\u0101\5\0\1\u0101\1\u0102\3\u0101\2\0"+
    "\27\u0101\1\u010a\1\u0101\5\0\1\u0101\1\u0102\3\u0101\2\0"+
    "\27\u0101\1\u010b\1\u0101\5\0\1\u0101\1\u0102\3\u0101\2\0"+
    "\20\u0101\1\u010c\6\u0101\1\0\1\u0101\5\0\1\u0101\1\u0102"+
    "\3\u0101\2\0\11\u0101\1\u010d\15\u0101\1\0\1\u0101\5\0"+
    "\1\u0101\1\u0102\3\u0101\2\0\20\u0101\1\u010e\6\u0101\1\0"+
    "\1\u0101\5\0\1\u0101\1\u0102\3\u0101\2\0\3\u0101\1\u010f"+
    "\23\u0101\1\0\1\u0101\5\0\1\u0110\1\u0111\3\u0110\2\0"+
    "\27\u0110\1\0\1\u0110\5\0\5\u0111\2\0\27\u0111\1\0"+
    "\1\u0111\5\0\1\u0110\1\u0111\3\u0110\2\0\2\u0110\1\u0112"+
    "\24\u0110\1\0\1\u0110\5\0\1\u0110\1\u0111\3\u0110\2\0"+
    "\1\u0110\1\u0113\25\u0110\1\0\1\u0110\5\0\1\u0110\1\u0111"+
    "\3\u0110\2\0\11\u0110\1\u0114\15\u0110\1\0\1\u0110\5\0"+
    "\1\u0110\1\u0111\3\u0110\2\0\14\u0110\1\u0115\12\u0110\1\0"+
    "\1\u0110\5\0\1\u0110\1\u0111\3\u0110\2\0\23\u0110\1\u0116"+
    "\3\u0110\1\0\1\u0110\5\0\1\u0110\1\u0111\3\u0110\2\0"+
    "\1\u0110\1\u0117\25\u0110\1\0\1\u0110\5\0\1\u0110\1\u0111"+
    "\3\u0110\2\0\1\u0110\1\u0118\25\u0110\1\0\1\u0110\5\0"+
    "\1\u0110\1\u0111\3\u0110\2\0\1\u0110\1\u0119\25\u0110\1\0"+
    "\1\u0110\5\0\1\7\1\0\3\7\2\0\11\7\1\u011a"+
    "\15\7\1\0\1\7\5\0\1\7\1\0\3\7\2\0"+
    "\22\7\1\u011b\4\7\1\0\1\7\5\0\1\7\1\0"+
    "\3\7\2\0\7\7\1\u011c\17\7\1\0\1\7\5\0"+
    "\1\7\1\0\3\7\2\0\2\7\1\u011d\24\7\1\0"+
    "\1\7\5\0\1\7\1\0\3\7\2\0\1\7\1\u011e"+
    "\25\7\1\0\1\7\5\0\1\7\1\0\3\7\2\0"+
    "\13\7\1\u011f\13\7\1\0\1\7\5\0\1\7\1\0"+
    "\3\7\2\0\10\7\1\u0120\16\7\1\0\1\7\5\0"+
    "\1\7\1\0\3\7\2\0\7\7\1\u0121\17\7\1\0"+
    "\1\7\5\0\1\7\1\0\3\7\2\0\1\7\1\u0122"+
    "\25\7\1\0\1\7\5\0\1\7\1\0\3\7\2\0"+
    "\12\7\1\u0123\14\7\1\0\1\7\5\0\1\7\1\0"+
    "\3\7\2\0\22\7\1\u0124\4\7\1\0\1\7\5\0"+
    "\1\7\1\0\3\7\2\0\3\7\1\u0125\23\7\1\0"+
    "\1\7\5\0\1\7\1\0\3\7\2\0\10\7\1\u0126"+
    "\16\7\1\0\1\7\5\0\1\7\1\0\3\7\2\0"+
    "\12\7\1\u0127\14\7\1\0\1\7\5\0\1\7\1\0"+
    "\3\7\2\0\1\7\1\u0128\25\7\1\0\1\7\5\0"+
    "\1\7\1\0\3\7\2\0\1\7\1\u0129\25\7\1\0"+
    "\1\7\5\0\1\7\1\0\3\7\2\0\20\7\1\u012a"+
    "\6\7\1\0\1\7\5\0\1\7\1\0\3\7\2\0"+
    "\1\7\1\u012b\25\7\1\0\1\7\5\0\1\7\1\0"+
    "\3\7\2\0\1\7\1\u012c\25\7\1\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8991];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\5\1\1\11\23\1\1\0"+
    "\322\1\1\11\30\1\2\11\5\1\1\11\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int line;
    public int column;
    public int intValue;
    public float floatValue;
    public int currentToken; //Para obtener el token actual sin avanzar el parseo

    public int getCurrentToken() {
        return this.currentToken;
    }

    public String getSemantic() {
        return this.lexeme;
    }

    public int getNextToken() {
        try {
            Integer token = yylex();
            if (token == null) {
                currentToken = ENDINPUT;
                return currentToken;
            }
            return token;
        } catch(IOException ex) {
            ex.printStackTrace();
            return -1;
        }
    }

    public int getCurrentLine() {
        return this.line;
    }

    public int getCurrentColumn() {
        return this.column;
    }

    public int prepare(int token) {
        lexeme = yytext();
        line = yyline;
        column = yycolumn;
        currentToken = token;
        return token;
    }

    public int getIntValue() {
        return this.intValue;
    }

    public float getFloatValue() {
        return this.floatValue;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Integer yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 65: 
          { return prepare(APARECETORTUGA);
          }
        case 66: break;
        case 26: 
          { return prepare(INIC);
          }
        case 67: break;
        case 5: 
          { lexeme = yytext();
    line = yyline;
    column = yycolumn;
    intValue = Integer.parseInt(lexeme);
    currentToken = INTEGER;
    return currentToken;
          }
        case 68: break;
        case 11: 
          { return prepare(RC);
          }
        case 69: break;
        case 10: 
          { return prepare(AT);
          }
        case 70: break;
        case 29: 
          { return prepare(SUMA);
          }
        case 71: break;
        case 6: 
          { return prepare(O);
          }
        case 72: break;
        case 43: 
          { return prepare(ESPERA);
          }
        case 73: break;
        case 60: 
          { return prepare(RAIZCUADRADA);
          }
        case 74: break;
        case 44: 
          { return prepare(PRIMERO);
          }
        case 75: break;
        case 20: 
          { lexeme = yytext();
    line = yyline;
    column = yycolumn;
    floatValue = Float.parseFloat(lexeme);
    currentToken = FLOAT;
    return currentToken;
          }
        case 76: break;
        case 62: 
          { return prepare(GIRAIZQUIERDA);
          }
        case 77: break;
        case 39: 
          { return prepare(CENTRO);
          }
        case 78: break;
        case 35: 
          { return prepare(MENOS);
          }
        case 79: break;
        case 14: 
          { return prepare(UL);
          }
        case 80: break;
        case 49: 
          { return prepare(PONRUMBO);
          }
        case 81: break;
        case 42: 
          { return prepare(ELEGIR);
          }
        case 82: break;
        case 8: 
          { return prepare(IDENTIFIER);
          }
        case 83: break;
        case 57: 
          { return prepare(SUBELAPIZ);
          }
        case 84: break;
        case 30: 
          { return prepare(SENO);
          }
        case 85: break;
        case 33: 
          { return prepare(PONCL);
          }
        case 86: break;
        case 1: 
          { lexeme = yytext();
    line = yyline;
    column = yycolumn;
    return error;
          }
        case 87: break;
        case 52: 
          { return prepare(DIVISION);
          }
        case 88: break;
        case 50: 
          { return prepare(POTENCIA);
          }
        case 89: break;
        case 46: 
          { return prepare(REDONDEA);
          }
        case 90: break;
        case 58: 
          { return prepare(DIFERENCIA);
          }
        case 91: break;
        case 61: 
          { return prepare(OCULTATORTUGA);
          }
        case 92: break;
        case 3: 
          { /* Ignore */
          }
        case 93: break;
        case 32: 
          { return prepare(RESTO);
          }
        case 94: break;
        case 37: 
          { return prepare(REPITE);
          }
        case 95: break;
        case 34: 
          { return prepare(PONXY);
          }
        case 96: break;
        case 16: 
          { return prepare(GD);
          }
        case 97: break;
        case 17: 
          { return prepare(BL);
          }
        case 98: break;
        case 47: 
          { return prepare(IGUALES);
          }
        case 99: break;
        case 22: 
          { return prepare(INC);
          }
        case 100: break;
        case 25: 
          { return prepare(AZAR);
          }
        case 101: break;
        case 19: 
          { return prepare(SB);
          }
        case 102: break;
        case 63: 
          { return prepare(PONCOLORLAPIZ);
          }
        case 103: break;
        case 64: 
          { return prepare(BORRAPANTALLA);
          }
        case 104: break;
        case 53: 
          { return prepare(RETROCEDE);
          }
        case 105: break;
        case 4: 
          { String token = yytext();
    lexeme = token;
    line = yyline;
    column = yycolumn;
    char tokenValue = token.charAt(0);
    currentToken = tokenValue;
    return currentToken;
          }
        case 106: break;
        case 41: 
          { return prepare(PONPOS);
          }
        case 107: break;
        case 38: 
          { return prepare(CUENTA);
          }
        case 108: break;
        case 55: 
          { return prepare(MENORQUE);
          }
        case 109: break;
        case 59: 
          { return prepare(GIRADERECHA);
          }
        case 110: break;
        case 48: 
          { return prepare(PRODUCTO);
          }
        case 111: break;
        case 40: 
          { return prepare(ULTIMO);
          }
        case 112: break;
        case 23: 
          { return prepare(COS);
          }
        case 113: break;
        case 45: 
          { return prepare(EJECUTA);
          }
        case 114: break;
        case 18: 
          { return prepare(SI);
          }
        case 115: break;
        case 56: 
          { return prepare(BAJALAPIZ);
          }
        case 116: break;
        case 24: 
          { return prepare(SEN);
          }
        case 117: break;
        case 2: 
          { // token desconocido
    lexeme = yytext();
    line = yyline;
    column = yycolumn;
    return error;
          }
        case 118: break;
        case 12: 
          { return prepare(RE);
          }
        case 119: break;
        case 51: 
          { return prepare(ELEMENTO);
          }
        case 120: break;
        case 54: 
          { return prepare(MAYORQUE);
          }
        case 121: break;
        case 15: 
          { return prepare(GI);
          }
        case 122: break;
        case 28: 
          { return prepare(PONY);
          }
        case 123: break;
        case 13: 
          { return prepare(OT);
          }
        case 124: break;
        case 9: 
          { return prepare(AV);
          }
        case 125: break;
        case 21: 
          { return prepare(VAR);
          }
        case 126: break;
        case 31: 
          { return prepare(RUMBO);
          }
        case 127: break;
        case 36: 
          { return prepare(AVANZA);
          }
        case 128: break;
        case 27: 
          { return prepare(PONX);
          }
        case 129: break;
        case 7: 
          { return prepare(Y);
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
