%package Tests.Jacc
%class Parser
%interface ParserTokens
%get lexer.getCurrentToken()
%next lexer.getNextToken()

%{
import Compiler.Lex.Lexer;
import java.io.*;
import Logic.MessageType;
import java.util.ArrayList;
import java.util.Arrays;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import Compiler.Helpers.*;

%}

%token '+' '-' '*' '/' '(' ')' '[' ']' '<' '>' ';' '='
%token <Integer> INTEGER
%token <Float> FLOAT
%token <String> IDENTIFIER VAR INIC PARA FIN
%token <String> BLANCO AZUL MARRON CIAN GRIS AMARILLO NEGRO ROJO VERDE
%token <String> OCULTATORTUGA OT APARECETORTUGA AT RUMBO BAJALAPIZ BL SUBELAPIZ SB CENTRO BORRAPANTALLA
%token <String> AVANZA AV RETROCEDE RE GIRADERECHA GD GIRAIZQUIERDA GI PONRUMBO PONX PONY PONCOLORLAPIZ PONCL ESPERA REDONDEA COS AZAR MENOS RAIZCUADRADA RC SENO SEN
%token <String> PONXY IGUALES Y O MAYORQUE MENORQUE POTENCIA DIVISION RESTO
%token <String> DIFERENCIA PRODUCTO SUMA
%token <String> INC PONPOS EJECUTA ELEGIR CUENTA ULTIMO UL PRIMERO
%token <String> REPITE SI ELEMENTO

%left '+' '-'
%left '*' '/'

%type <Integer> integer_value
%type <Float> float_value
%type <Boolean> boolean_value
%type <String> color

%type <String> variable argument integer_expr float_expr integer integer_arg float float_arg instr_arg

//Expresiones
%type <String> expression declaration_expr redeclaration_expr proc proc1 proc2 proc_p proc_loop proc_cond user_proc_call

//Expresiones con valor de retorno
%type <String> val_proc1 val_proc2 val_proc_1p val_proc_n val_proc_p proc_exec

%%

program_end
    : program { parsingDone(); }
    ;

program
    : expression ';' program    { instructions.add($1); }
    | expression ';'            { instructions.add($1); }
    | special_expr ';' program  { /* No hacer nada */ }
    | special_expr ';'          { /* No hacer nada */ }
    ;

special_expr
    : user_proc
    | proc_exec { for (String instr: instrList) { instructions.add(instr); } instrList.clear(); }
    ;

expression
    : declaration_expr
    | redeclaration_expr
    | proc
    | proc1
    | val_proc1
    | proc2
    | val_proc2
    | val_proc_n
    | proc_p
    | val_proc_p
    | val_proc_1p
    | proc_loop
    | proc_cond
//    | user_proc
    | user_proc_call
//    | proc_exec
    ;

//Variables
variable
    : IDENTIFIER { $$ = arguments.varArg($1); }
    ;

integer
    : integer_value { $$ = arguments.intArg($1); }
    ;

integer_arg
    : integer
    | integer_expr
    ;

//Constante entera 
integer_value
    : integer_value '+' integer_value   { $$ = $1 + $3; }
    | integer_value '-' integer_value   { $$ = $1 - $3; }
    | integer_value '*' integer_value   { $$ = $1 * $3; }
    | integer_value '/' integer_value   { $$ = ($1 / $3); }
    | '(' integer_value ')'             { $$ = $2; }
    | INTEGER                           { $$ = $1; }
    ;

//Expresión entera
/*
integer_expr
    : integer_expr '+' integer_expr { $$ = instr("+", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer_expr '-' integer_expr { $$ = instr("-", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer_expr '*' integer_expr { $$ = instr("*", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer_expr '/' integer_expr { $$ = instr("/", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer_value                 { $$ = $1; }
    | variable                      { $$ = $1; }
*/
integer_expr
    : integer_expr  '+' integer         { $$ = instr("+", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer       '+' integer_expr    { $$ = instr("+", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer_expr  '+' integer_expr    { $$ = instr("+", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer_expr  '-' integer         { $$ = instr("-", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer       '-' integer_expr    { $$ = instr("-", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer_expr  '-' integer_expr    { $$ = instr("-", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer_expr  '*' integer         { $$ = instr("*", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer       '*' integer_expr    { $$ = instr("*", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer_expr  '*' integer_expr    { $$ = instr("*", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer_expr  '/' integer         { $$ = instr("/", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer       '/' integer_expr    { $$ = instr("/", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | integer_expr  '/' integer_expr    { $$ = instr("/", InstructionType.OPERATION, ReturnType.INTEGER, $1, $3); }
    | '(' integer_expr ')'              { $$ = $2; }
    | variable                          { $$ = $1; }
    ;

float
    : float_value { $$ = arguments.floatArg($1); }
    ;

float_arg
    : float
    | float_expr
    ;

//Constante flotante
float_value
    : float_value   '+' integer_value   { $$ = $1 + $3; }
    | integer_value '+' float_value     { $$ = $1 + $3; }
    | float_value   '+' float_value     { $$ = $1 + $3; }
    | float_value   '-' integer_value   { $$ = $1 - $3; }
    | integer_value '-' float_value     { $$ = $1 - $3; }
    | float_value   '-' float_value     { $$ = $1 - $3; }
    | float_value   '*' integer_value   { $$ = $1 * $3; }
    | integer_value '*' float_value     { $$ = $1 * $3; }
    | float_value   '*' float_value     { $$ = $1 * $3; }
    | float_value   '/' integer_value   { $$ = $1 / $3; }
    | integer_value '/' float_value     { $$ = $1 / $3; }
    | float_value   '/' float_value     { $$ = $1 / $3; }
    | '(' float_value ')'               { $$ = $2; }
    | FLOAT                             { $$ = $1; }
    ;

//Expresión flotante
/*
float_expr
    : float_expr '+' float_expr { $$ = instr("+", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr '-' float_expr { $$ = instr("-", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr '*' float_expr { $$ = instr("*", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr '/' float_expr { $$ = instr("/", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | '(' float_expr ')'        { $$ = $2; }
    | float_value               { $$ = $1; }
    | variable                  { $$ = $1; }
*/
float_expr
    : float_expr    '+' float           { $$ = instr("+", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr    '+' integer         { $$ = instr("+", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float         '+' float_expr      { $$ = instr("+", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | integer       '+' float_expr      { $$ = instr("+", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr    '+' float_expr      { $$ = instr("+", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr    '-' float           { $$ = instr("-", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr    '-' integer         { $$ = instr("-", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float         '-' float_expr      { $$ = instr("-", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | integer       '-' float_expr      { $$ = instr("-", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr    '-' float_expr      { $$ = instr("-", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr    '*' float           { $$ = instr("*", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr    '*' integer         { $$ = instr("*", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float         '*' float_expr      { $$ = instr("*", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | integer       '*' float_expr      { $$ = instr("*", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr    '*' float_expr      { $$ = instr("*", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr    '/' float           { $$ = instr("/", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr    '/' integer         { $$ = instr("/", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float         '/' float_expr      { $$ = instr("/", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | integer       '/' float_expr      { $$ = instr("/", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | float_expr    '/' float_expr      { $$ = instr("/", InstructionType.OPERATION, ReturnType.FLOAT, $1, $3); }
    | '(' float_expr ')'                { $$ = $2; }
    | variable                          { $$ = $1; }
    ;

//Constantes booleana
boolean_value
    : integer_value '<' integer_value   { $$ = ($1 < $3); }
    | float_value   '<' integer_value   { $$ = ($1 < $3); }
    | integer_value '<' float_value     { $$ = ($1 < $3); }
    | float_value   '<' float_value     { $$ = ($1 < $3); }
    | integer_value '>' integer_value   { $$ = ($1 > $3); }
    | float_value   '>' integer_value   { $$ = ($1 > $3); }
    | integer_value '>' float_value     { $$ = ($1 > $3); }
    | float_value   '>' float_value     { $$ = ($1 > $3); }
    | IGUALES integer_value integer_value   { $$ = $2.equals($3); }
    | IGUALES float_value float_value   { $$ = $2.equals($3); }
    | IGUALES integer_value float_value { $$ = false; }
    | IGUALES float_value integer_value { $$ = false; }
    | Y boolean_value boolean_value 
    | O boolean_value boolean_value
    | MAYORQUE integer_value integer_value  { $$ = ($2 > $3); }
    | MAYORQUE float_value integer_value    { $$ = ($2 > $3); }
    | MAYORQUE integer_value float_value    { $$ = ($2 > $3); }
    | MAYORQUE float_value float_value      { $$ = ($2 > $3); }
    | MENORQUE integer_value integer_value  { $$ = ($2 < $3); }
    | MENORQUE float_value integer_value    { $$ = ($2 < $3); }
    | MENORQUE integer_value float_value    { $$ = ($2 < $3); }
    | MENORQUE float_value float_value      { $$ = ($2 < $3); }
    ;

//TODO: manejar casos de variables
/*
boolean_expr
    : IGUALES variable integer {
        $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | IGUALES  variable float {
        $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | IGUALES  integer variable {
        $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | IGUALES  float variable {
        $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | IGUALES  variable variable {
        $$ = instr("iguales", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MAYORQUE variable integer {
        $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MAYORQUE variable float {
        $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MAYORQUE integer variable {
        $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MAYORQUE float variable {
        $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MAYORQUE variable variable {
        $$ = instr("mayorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MENORQUE variable integer {
        $$ = instr("menorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MENORQUE variable float {
        $$ = instr("menorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MENORQUE integer variable {
        $$ = instr("menorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MENORQUE float variable {
        $$ = instr("menorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | MENORQUE variable variable {
        $$ = instr("menorque", InstructionType.LOGIC, ReturnType.BOOLEAN, $2, $3); }
    | Y '(' boolean_expr ')' '(' boolean_expr ')' {
        $$ = instr("y", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | O '(' boolean_expr ')' '(' boolean_expr ')' {
        $$ = instr("o", InstructionType.LOGIC, ReturnType.BOOLEAN, $3, $6); }
    | '(' boolean_expr ')' { $$ = $2; }
    ;
*/

instr_arg
    : val_proc1     { $$ = arguments.instrArg($1); }
    | val_proc2     { $$ = arguments.instrArg($1); }
    | val_proc_p    { $$ = arguments.instrArg($1); }
    | val_proc_1p   { $$ = arguments.instrArg($1); }
    | val_proc_n    { $$ = arguments.instrArg($1); }
    ;

argument
    : integer_arg
    | float_arg
    | '(' instr_arg ')'
    ;

//Expresiones
declaration_expr
    : VAR IDENTIFIER                { $$ = instr("var", InstructionType.VARIABLE, ReturnType.VOID, $2); }
    | VAR IDENTIFIER '=' argument   { $$ = instr("var", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4); }
    ;

redeclaration_expr
    : INIC IDENTIFIER '=' argument { $$ = instr("inic", InstructionType.VARIABLE, ReturnType.VOID, arguments.stringArg($2), $4); }
    ;

color
    : BLANCO    { $$ = "blanco"; }
    | AZUL      { $$ = "azul"; }
    | MARRON    { $$ = "marron"; }
    | CIAN      { $$ = "cian"; }
    | GRIS      { $$ = "gris"; }
    | AMARILLO  { $$ = "amarillo"; }
    | NEGRO     { $$ = "negro"; }
    | ROJO      { $$ = "rojo"; }
    | VERDE     { $$ = "verde"; }
    ;

proc
    : OCULTATORTUGA     { $$ = instr("ocultatortuga", InstructionType.NORMAL, ReturnType.VOID); }
    | OT                { $$ = instr("ocultatortuga", InstructionType.NORMAL, ReturnType.VOID); }
    | APARECETORTUGA    { $$ = instr("aparecetoruga", InstructionType.NORMAL, ReturnType.VOID); }
    | AT                { $$ = instr("aparecetoruga", InstructionType.NORMAL, ReturnType.VOID); }
    | BAJALAPIZ         { $$ = instr("bajalapiz", InstructionType.NORMAL, ReturnType.VOID); }
    | BL                { $$ = instr("bajalapiz", InstructionType.NORMAL, ReturnType.VOID); }
    | SUBELAPIZ         { $$ = instr("subelapiz", InstructionType.NORMAL, ReturnType.VOID); }
    | SB                { $$ = instr("subelapiz", InstructionType.NORMAL, ReturnType.VOID); }
    | CENTRO            { $$ = instr("centro", InstructionType.NORMAL, ReturnType.VOID); }
    | BORRAPANTALLA     { $$ = instr("borrapantalla", InstructionType.NORMAL, ReturnType.VOID); }
    | RUMBO             { $$ = instr("print", InstructionType.NORMAL, ReturnType.VOID, arguments.varArg("rumbo")); }
    ;

proc1
    : AVANZA        integer_arg { $$ = instr("avanza", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | AV            integer_arg { $$ = instr("avanza", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | RETROCEDE     integer_arg { $$ = instr("retrocede", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | RE            integer_arg { $$ = instr("retrocede", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | GIRADERECHA   argument    { $$ = instr("giraderecha", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | GD            argument    { $$ = instr("giraderecha", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | GIRAIZQUIERDA argument    { $$ = instr("giraizquierda", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | GI            argument    { $$ = instr("giraizquierda", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | PONRUMBO      argument    { $$ = instr("ponrumbo", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | PONX          argument    { $$ = instr("ponx", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | PONY          argument    { $$ = instr("pony", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | PONCOLORLAPIZ color       { $$ = instr("poncl", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | PONCL         color       { $$ = instr("poncl", InstructionType.NORMAL, ReturnType.VOID, $2); }
    | ESPERA        argument    { $$ = instr("espera", InstructionType.NORMAL, ReturnType.VOID, $2); }
    ;

val_proc1
    : REDONDEA      float_arg   { $$ = instr("redondea", InstructionType.NORMAL, ReturnType.INTEGER, $2); }
    | AZAR          integer_arg { $$ = instr("azar", InstructionType.NORMAL, ReturnType.INTEGER, $2); }
    | AZAR          float_arg   { $$ = instr("azar", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    | MENOS         integer_arg { $$ = instr("menos", InstructionType.NORMAL, ReturnType.INTEGER, $2); }
    | MENOS         float_arg   { $$ = instr("menos", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    | COS           argument    { $$ = instr("cos", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    | RAIZCUADRADA  argument    { $$ = instr("raiz", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    | RC            argument    { $$ = instr("raiz", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    | SENO          argument    { $$ = instr("seno", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    | SEN           argument    { $$ = instr("seno", InstructionType.NORMAL, ReturnType.FLOAT, $2); }
    ;

proc2
    : PONXY     integer_arg integer_arg { $$ = instr("ponxy", InstructionType.NORMAL, ReturnType.VOID, $2, $3); }
    ;

val_proc2
    : POTENCIA  integer_arg integer_arg { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.INTEGER, $2, $3); }
    | POTENCIA  float_arg   integer_arg { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.FLOAT, $2, $3); }
    | POTENCIA  argument    float_arg   { $$ = instr("potencia", InstructionType.NORMAL, ReturnType.FLOAT, $2, $3); }
    | RESTO     integer_arg integer_arg { $$ = instr("resto", InstructionType.NORMAL, ReturnType.INTEGER, $2, $3); }
    | DIVISION  argument    argument    { $$ = instr("division", InstructionType.NORMAL, ReturnType.FLOAT, $2, $3); }
    ;

n_args
    : argument n_args   { paramsList.add($1); }
    | argument          { paramsList.add($1); }
    ;

n_int_args
    : integer_arg n_int_args { paramsList.add($1); }
    | integer_arg            { paramsList.add($1); }
    ;

n_float_args
    : float_arg n_float_args    { paramsList.add($1); }
    | float_arg                 { paramsList.add($1); }
    ;

n_instr
    : expression n_instr    { instrList.add($1); }
    | expression            { instrList.add($1); }
    ;

val_proc_n
    : DIFERENCIA    n_int_args      { $$ = instr("diferencia", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | DIFERENCIA    n_float_args    { $$ = instr("diferencia", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | DIFERENCIA    n_args          { $$ = instr("diferencia", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | PRODUCTO      n_int_args      { $$ = instr("producto", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | PRODUCTO      n_float_args    { $$ = instr("producto", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | PRODUCTO      n_args          { $$ = instr("producto", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | SUMA          n_int_args      { $$ = instr("suma", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | SUMA          n_float_args    { $$ = instr("suma", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | SUMA          n_args          { $$ = instr("suma", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    ;

proc_p
    : INC '[' variable integer_arg ']'  { $$ = instr("inc", InstructionType.VARIABLE, ReturnType.VOID, $3, $4); }
    | INC '[' variable float_arg ']'    { $$ = instr("inc", InstructionType.VARIABLE, ReturnType.VOID, $3, $4); }
    | PONPOS '[' integer_arg integer_arg ']'    { $$ = instr("ponpos", InstructionType.NORMAL, ReturnType.VOID, $3, $4); }
    ;

val_proc_p
    : ELEGIR '[' n_int_args ']'         { $$ = instr("elegir", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | ELEGIR '[' n_float_args ']'       { $$ = instr("elegir", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | CUENTA '[' n_args ']'             { $$ = instr("cuenta", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | ULTIMO '[' n_int_args ']'         { $$ = instr("ultimo", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | ULTIMO '[' n_float_args ']'       { $$ = instr("ultimo", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | UL '[' n_int_args ']'             { $$ = instr("ultimo", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | UL '[' n_float_args ']'           { $$ = instr("ultimo", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    | PRIMERO '[' n_int_args ']'        { $$ = instr("primero", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | PRIMERO '[' n_float_args ']'      { $$ = instr("primero", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    ;

val_proc_1p
    : ELEMENTO integer_arg '[' n_int_args ']'   { $$ = instr("elemento", InstructionType.NORMAL, ReturnType.INTEGER, paramsList); paramsList.clear(); }
    | ELEMENTO integer_arg '[' n_float_args ']' { $$ = instr("elemento", InstructionType.NORMAL, ReturnType.FLOAT, paramsList); paramsList.clear(); }
    ;

exec_instr
    : expression exec_instr { instrList.add($1); }
    | expression            { instrList.add($1); }
    ;

proc_exec
    : EJECUTA '[' exec_instr ']' { /* No hacer nada */ }
    ;

proc_loop
    : REPITE integer_arg '[' n_instr ']' { 
        paramsList.add($2); 
        $$ = instr("repite", InstructionType.CYCLE, ReturnType.VOID, paramsList, instrList); 
        paramsList.clear();
        instrList.clear(); 
    }
    ;

proc_cond
    : SI boolean_value '[' n_instr ']' {
        paramsList.add(arguments.boolArg($2));
        $$ = instr("si", InstructionType.CONDITION, ReturnType.VOID, paramsList, instrList);
        paramsList.clear();
        instrList.clear();
    }
    ;

n_params
    : IDENTIFIER n_params   { paramsList.add($1); }
    | IDENTIFIER            { paramsList.add($1); }
    ;

//Procedimientos del usuario
user_proc
    : PARA IDENTIFIER n_params n_instr FIN    {
        procedures.add($2, paramsList, instrList);
        paramsList.clear();
        instrList.clear();
    }
    | PARA IDENTIFIER n_instr FIN           {
        procedures.add($2, instrList);
        instrList.clear();
    }
    ;

user_proc_call
    : IDENTIFIER     n_args { $$ = instr($1, InstructionType.PROCEDURE, ReturnType.VOID, paramsList); paramsList.clear(); }
    | IDENTIFIER            { $$ = instr($1, InstructionType.PROCEDURE, ReturnType.VOID); }
    ;

%%

    private Lexer lexer;
    private VariableHandler variables; //Manejador de variables
    private ProcedureHandler procedures; //Manejador de procedimientos
    private InstructionHandler instructions;
    private ArgumentHandler arguments;

    //Estructuras temporales
    private ArrayList<String> paramsList; //Para almacenar parámetros de un procedimiento
    private ArrayList<String> instrList; // Para almacenar instrucciones de un procedimiento

    public String instr(String name, InstructionType type, ReturnType returnType, String... args) {
        return instructions.create(name, type, returnType, new ArrayList<>(Arrays.asList(args)));
    }

    public String instr(String name, InstructionType type, ReturnType returnType, ArrayList<String> args) {
        return instructions.create(name, type, returnType, args);
    }

    public String instr(String name, InstructionType type, ReturnType returnType, ArrayList<String> args, ArrayList<String> body) {
        return instructions.create(name, type, returnType, args, body);
    }

    public void yyerror(String msg) {
        if (lexer.isLexerError()) {
            System.err.println(lexer.getErrorMessage());
        } else {
            System.err.println(msg);
        }

        System.out.println("En " + lexer.getSemantic() + ", línea " + (lexer.getCurrentLine() + 1) + ". columna " + (lexer.getCurrentColumn() + 1));
        //TODO: mostrar los errores en la interfaz
    }

    public Parser(String ruta) {
        variables = new VariableHandler();
        procedures = new ProcedureHandler();
        instructions = new InstructionHandler();
        arguments = new ArgumentHandler();

        paramsList = new ArrayList<>();
        instrList = new ArrayList<>();

        try {
            Reader reader = new BufferedReader(new FileReader(ruta));
            lexer = new Lexer(reader);
            lexer.getNextToken();

        } catch (IOException ex) {
            yyerror("No se pudo abrir el archivo especificado");
        }
    }

    /**
     * Función para mostrar un mensaje del compilador en la interfaz.
     */
    public void showMessage(String msg, MessageType type) {
        //TODO: mostrar mensaje del tipo correspondiente en la interfaz.
    }

    public String getRutaCompilado(String filePath) {

        String rutaCompilado = filePath.substring(0, filePath.lastIndexOf(".") + 1) + "cld";
        System.out.println(rutaCompilado);

        ObjectMapper mapper = new ObjectMapper();
        instructions.reverse();
        CompiledFile cFile = new CompiledFile(instructions, procedures);
        
        try {
            File file = new File(rutaCompilado);
            file.createNewFile();

            String compilado = mapper.writeValueAsString(cFile);
            System.out.println("File compiled created: " + file.getName());
            FileWriter writer = new FileWriter(rutaCompilado);
            writer.write(compilado);
            writer.close();
            return rutaCompilado;

        } catch (IOException ex) {
            System.out.println("An error ocurred");
        }

        return null;
    }

    public static String compile(String filePath) {
        String ruta = filePath.replaceAll("\\\\", "/");
        Parser parser = new Parser(ruta);
        parser.parse();
        String rutaCompilado = parser.getRutaCompilado(filePath);

        return rutaCompilado;
    }

    public void parsingDone() {
        System.out.println("Compilación finalizada");

        //TODO: notificar que se finalizó la compilación
        variables.printVars();
        procedures.printProcedures();
        instructions.print();
    }

    public static void main(String[] args) {
        String path = "/src/Compiler/Lex/parse.txt";
        String ruta  = System.getProperty("user.dir").replaceAll("\\\\", "/") + path;
        //Parser parser = new Parser(ruta);
        //parser.parse();
        System.out.println(compile(System.getProperty("user.dir") + path));
    }
